# read url
html <- read_html(url)
# extract all the 'div" items from the html as tables
div <- html %>%
html_elements("div") %>%
html_table()
#remove empties
div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]
# only keep rows == 7
div <- div[base::sapply(y, function(i) nrow(i)[1]) == 7]
# empty list
my_vec <- list()
#for loop
for(i in 1:length(z)) {
my_out <- z[[i]][3:5,]
my_vec <- c(my_vec, my_out)
df <- data.frame(my_vec)
}
return(df)
}
test <- box_scores("2022-10-25")
test
cp3_totals <- scrape_player_data("Chris Paul", "#totals")
head(cp3_totals)
box_scores <- function(game_day){
"
A function that returns a data frame of box scores.
@param game_day is a string that represents the date in the form YYYY-MM-DD
@return a df of box scores
"
# split by dash
split_date <- base::strsplit(game_day, "-")
# year - month - day
year <- split_date[[1]][[1]]
month <- split_date[[1]][[2]]
day <- split_date[[1]][[3]]
#url
url <- paste0("https://www.basketball-reference.com/boxscores/?month=",
month ,"&day=", day,"&year=", year)
# read url
html <- read_html(url)
# extract all the 'div" items from the html as tables
div <- html %>%
html_elements("div") %>%
html_table()
#remove empties
div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]
# only keep rows == 7
div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]
# empty list
my_vec <- list()
#for loop
for(i in 1:length(z)) {
my_out <- z[[i]][3:5,]
my_vec <- c(my_vec, my_out)
df <- data.frame(my_vec)
}
return(df)
}
test <- box_scores("2022-10-25")
test
box_scores <- function(game_day){
"
A function that returns a data frame of box scores.
@param game_day is a string that represents the date in the form YYYY-MM-DD
@return a df of box scores
"
# split by dash
split_date <- base::strsplit(game_day, "-")
# year - month - day
year <- split_date[[1]][[1]]
month <- split_date[[1]][[2]]
day <- split_date[[1]][[3]]
#url
url <- paste0("https://www.basketball-reference.com/boxscores/?month=",
month ,"&day=", day,"&year=", year)
# read url
html <- read_html(url)
# extract all the 'div" items from the html as tables
div <- html %>%
html_elements("div") %>%
html_table()
#remove empties
div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]
# only keep rows == 7
div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]
# empty list
my_vec <- list()
#for loop
for(i in 1:length(div)) {
my_out <- z[[i]][3:5,]
my_vec <- c(my_vec, my_out)
df <- data.frame(my_vec)
}
return(df)
}
test <- box_scores("2022-11-7")
box_scores <- function(game_day){
"
A function that returns a data frame of box scores.
@param game_day is a string that represents the date in the form YYYY-MM-DD
@return a df of box scores
"
# split by dash
split_date <- base::strsplit(game_day, "-")
# year - month - day
year <- split_date[[1]][[1]]
month <- split_date[[1]][[2]]
day <- split_date[[1]][[3]]
#url
url <- paste0("https://www.basketball-reference.com/boxscores/?month=",
month ,"&day=", day,"&year=", year)
# read url
html <- read_html(url)
# extract all the 'div" items from the html as tables
div <- html %>%
html_elements("div") %>%
html_table()
#remove empties
div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]
# only keep rows == 7
div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]
# empty list
my_vec <- list()
#for loop
for(i in 1:length(div)) {
my_out <- z[[i]][3:5,]
my_vec <- c(my_vec, my_out)
df <- data.frame(my_vec)
}
return(df)
}
test <- box_scores("2022-11-7")
box_scores <- function(game_day){
"
A function that returns a data frame of box scores.
@param game_day is a string that represents the date in the form YYYY-MM-DD
@return a df of box scores
"
# split by dash
split_date <- base::strsplit(game_day, "-")
# year - month - day
year <- split_date[[1]][[1]]
month <- split_date[[1]][[2]]
day <- split_date[[1]][[3]]
#url
url <- paste0("https://www.basketball-reference.com/boxscores/?month=",
month ,"&day=", day,"&year=", year)
# read url
html <- read_html(url)
# extract all the 'div" items from the html as tables
div <- html %>%
html_elements("div") %>%
html_table()
#remove empties
div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]
# only keep rows == 7
div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]
# empty list
my_vec <- list()
#for loop
for(i in 1:length(div)) {
my_out <- div[[i]][3:5,]
my_vec <- c(my_vec, my_out)
df <- data.frame(my_vec)
}
return(df)
}
test <- box_scores("2022-11-7")
test
box_scores <- function(game_day){
"
A function that returns a data frame of box scores.
@param game_day is a string that represents the date in the form YYYY-MM-DD
@return a df of box scores
"
# split by dash
split_date <- base::strsplit(game_day, "-")
# year - month - day
year <- split_date[[1]][[1]]
month <- split_date[[1]][[2]]
day <- split_date[[1]][[3]]
#url
url <- paste0("https://www.basketball-reference.com/boxscores/?month=",
month ,"&day=", day,"&year=", year)
# read url
html <- read_html(url)
# extract all the 'div" items from the html as tables
div <- html %>%
html_elements("div") %>%
html_table()
#remove empties
div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]
# only keep rows == 7
div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]
# empty list
my_vec <- list()
#for loop
for(i in 1:length(div)) {
my_out <- div[[i]][3:5,]
my_vec <- c(my_vec, my_out)
df <- data.frame(my_vec)
}
df[-1,]
return(df)
}
test <- box_scores("2022-11-7")
test
box_scores <- function(game_day){
"
A function that returns a data frame of box scores.
@param game_day is a string that represents the date in the form YYYY-MM-DD
@return a df of box scores
"
# split by dash
split_date <- base::strsplit(game_day, "-")
# year - month - day
year <- split_date[[1]][[1]]
month <- split_date[[1]][[2]]
day <- split_date[[1]][[3]]
#url
url <- paste0("https://www.basketball-reference.com/boxscores/?month=",
month ,"&day=", day,"&year=", year)
# read url
html <- read_html(url)
# extract all the 'div" items from the html as tables
div <- html %>%
html_elements("div") %>%
html_table()
#remove empties
div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]
# only keep rows == 7
div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]
# empty list
my_vec <- list()
#for loop
for(i in 1:length(div)) {
my_out <- div[[i]][3:5,]
my_vec <- c(my_vec, my_out)
df <- data.frame(my_vec)
}
df <- df[-1,]
return(df)
}
test <- box_scores("2022-11-7")
test
box_scores <- function(game_day){
"
A function that returns a data frame of box scores.
@param game_day is a string that represents the date in the form YYYY-MM-DD
@return a df of box scores
"
# split by dash
split_date <- base::strsplit(game_day, "-")
# year - month - day
year <- split_date[[1]][[1]]
month <- split_date[[1]][[2]]
day <- split_date[[1]][[3]]
#url
url <- paste0("https://www.basketball-reference.com/boxscores/?month=",
month ,"&day=", day,"&year=", year)
# read url
html <- read_html(url)
# extract all the 'div" items from the html as tables
div <- html %>%
html_elements("div") %>%
html_table()
#remove empties
div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]
# only keep rows == 7
div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]
# empty list
my_vec <- list()
#for loop
for(i in 1:length(div)) {
my_out <- div[[i]][3:5,]
my_vec <- c(my_vec, my_out)
df <- data.frame(my_vec)
}
df <- df[-1,]
return(df)
}
test <- box_scores("2022-11-07")
test
test <- box_scores("2022-7-20")
test <- box_scores("2022-07-20")
test <- box_scores("2021-7-20")
test
test <- box_scores("2021-6-16")
test
NBA_finals_21 <- box_scores("2021-6-16")
test
NBA_finals_21 <- box_scores("2022-6-16")
test
NBA_finals_21 <- box_scores("2022-6-16")
test
NBA_finals_22 <- box_scores("2022-6-16")
NBA_finals_22
NBA_finals_22 <- box_scores("1992-6-2")
NBA_finals_22 <- box_scores("1992-6-3")
NBA_finals_22
finals_92_g1 <- box_scores("1992-6-3")
finals_92_g1
NBA_finals_22 <- box_scores("2022-10-18")
NBA_finals_22
oct_18 <- box_scores("2022-10-18")
oct_18
oct_18 <- box_scores("2022-10-19")
oct_18
oct_18 <- box_scores("2022-10-18")
oct_18
oct_18 <- box_scores("2022-10-19")
oct_18
oct_19 <- box_scores("2022-10-19")
oct_19
oct_18 <- box_scores("2022-10-18")
oct_18
zers_roster <- scrape_team_data("POR","2022","#roster")
# load packages
library(rvest)
library(tidyverse)
scrape_team_data <- function(slug, year, stats_tb){
"
A function that returns a data frame of team statistics.
@param slug is string of three letters that represents the teams url.
@param year is a string that corresponds to the NBA finals.
@param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced
@return a df of team statistics
"
# define team page URL
url <- paste0("https://www.basketball-reference.com/teams/",
slug,"/", year, ".html")
# Read stats table
stats_tb <- url %>%
read_html %>%
html_node(stats_tb) %>%
html_table()
# Rename Column 2 to Name
names(stats_tb)[2] <- "Name"
# Replace NA values with 0 (for stat functions)
stats_tb[is.na(stats_tb)] <- 0
# make data frame
df <- data.frame(stats_tb)
return(df)
}
zers_roster <- scrape_team_data("POR","2022","#roster")
zers_roster
cp3_totals <- scrape_player_data("Larry Bird", "#totals")
head(cp3_totals)
cp3_totals <- scrape_player_data("Magic Johnson", "#totals")
head(cp3_totals)
cp3_totals <- scrape_player_data("Kareem Abdul-Jabbar", "#totals")
head(cp3_totals)
kaj_totals <- scrape_player_data("Kareem Abdul-Jabbar", "#totals")
head(kaj_totals)
kobe_per_game <- scrape_player_data("Allen Iverson", "#per_game")
head(kobe_per_game)
bulls_totals <- scrape_team_data("CHI", "1998", "#totals")
head(bulls_totals)
avg <- mean(zers_roster$Ht)
1/12
4/12
avg <- mean(zers_roster$Exp)
avg <- mean(zers_roster$Exp)
avg
avg <- mean(zers_roster$Wt)
avg
zers_roster <- scrape_team_data("POR","2022","#roster")
head(zers_roster)
avg <- mean(kaj_totals$PTS)
kaj_totals <- scrape_player_data("Kareem Abdul-Jabbar", "#totals")
head(kaj_totals)
avg <- mean(kaj_totals$PTS)
avg
kaj_totals <- scrape_player_data("Kareem Abdul-Jabbar", "#totals")
kaj_totals
avg <- mean(kaj_totals$PTS)
avg
kaj_totals <- scrape_player_data("Kareem Abdul-Jabbar", "#totals")
kaj_totals
avg <- mean(kaj_totals$PTS)
avg
mean(4,5,6)
?mean()
kaj_totals <- scrape_player_data("Kareem Abdul-Jabbar", "#totals")
kaj_totals
avg <- mean(kaj_totals$PTS, rm.na=T)
avg
kaj_totals <- scrape_player_data("Kareem Abdul-Jabbar", "#totals")
head(kaj_totals)
scrape_team_data <- function(slug, year, stats_tb){
"
A function that returns a data frame of team statistics.
@param slug is string of three letters that represents the teams url.
@param year is a string that corresponds to the NBA finals.
@param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced
@return a df of team statistics
"
# define team page URL
url <- base::paste0("https://www.basketball-reference.com/teams/",
slug,"/", year, ".html")
# Read stats table
stats_tb <- url %>%
rvest::read_html %>%
rvest::html_node(stats_tb) %>%
rvest::html_table()
# Rename Column 2 to Name
base::names(stats_tb)[2] <- "Name"
# Replace NA values with 0 (for stat functions)
stats_tb[base::is.na(stats_tb)] <- 0
# make data frame
df <- base::data.frame(stats_tb)
return(df)
}
scrape_player_data <- function(name, stats_tb){
"
A function that returns a data frame of player statistics.
@param name is a string that represnets an NBA players name
@param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced
@return a df of player statistics
"
# make name lower case
lower_case_name <- base::tolower(name)
# split name
split_name <- base::strsplit(lower_case_name, " +")[[1]]
# define first and last name
first_name <- split_name[[1]]
last_name <- split_name[[2]]
# first letter of last name
letter <- base::substr(last_name, 1,1)
# first five letters of last name
last_5 <- base::substr(last_name, 1, 5)
# first two letters of first name
first_2 <- base::substr(first_name, 1,2)
# define team page URL
url <- base::paste0("https://www.basketball-reference.com/players/",letter ,"/",last_5,first_2,"01.html")
# Read stats table
stats_tb <- url %>%
rvest::read_html %>%
rvest::html_node(stats_tb) %>%
rvest::html_table()
# Rename Column 2 to Name
base::names(stats_tb)[2] <- "Name"
# Replace NA values with 0 (for stat functions)
stats_tb[base::is.na(stats_tb)] <- 0
# make list a dataframe
df <- base::data.frame(stats_tb)
return(df)
}
box_scores <- function(game_day){
"
A function that returns a data frame of box scores.
@param game_day is a string that represents the date in the form Y-M-D
@return a df of box scores from that day.
"
# split by dash
split_date <- base::strsplit(game_day, "-")
# year - month - day
year <- split_date[[1]][[1]]
month <- split_date[[1]][[2]]
day <- split_date[[1]][[3]]
#url
url <- base::paste0("https://www.basketball-reference.com/boxscores/?month=",month ,"&day=", day,"&year=", year)
# read url
html <- rvest::read_html(url)
# extract all the 'div" items from the html as tables
div <- html %>%
base::html_elements("div") %>%
base::html_table()
#remove empties
div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]
# only keep rows == 7
div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]
# empty list
my_vec <- base::list()
#for loop
for(i in 1:length(div)) {
my_out <- div[[i]][3:5,]
my_vec <- c(my_vec, my_out)
df <- base::data.frame(my_vec)
}
#remove first row
df <- df[-1,]
base::return(df)
}
# load packages
library(rvest)
library(magrittr)
scrape_team_data <- function(slug, year, stats_tb){
"
A function that returns a data frame of team statistics.
@param slug is string of three letters that represents the teams url.
@param year is a string that corresponds to the NBA finals.
@param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced
@return a df of team statistics
"
# define team page URL
url <- base::paste0("https://www.basketball-reference.com/teams/",
slug,"/", year, ".html")
# Read stats table
stats_tb <- url %>%
read_html %>%
html_node(stats_tb) %>%
html_table()
# Rename Column 2 to Name
names(stats_tb)[2] <- "Name"
# Replace NA values with 0 (for stat functions)
stats_tb[is.na(stats_tb)] <- 0
# make data frame
df <- data.frame(stats_tb)
return(df)
}
