{
  "hash": "b7eba0bad7b5e2f73986ded3c03bb796",
  "result": {
    "markdown": "---\ntitle: \"Creating Running Analysis\"\ndate: \"2023-05-01\"\ncategories: [\"#TidyTuesday\", R, \"Data Visuals\", \"Tutorial\"]\ndraft: true\nformat: \n  html: \n    toc: true\n---\n\n\nIn this blog post we take a closer look at how [Running Analysis](https://www.rbolt.me/01_blog/2023_04_25_Running-Analysis/) was made, including set up, data cleaning, creating data visuals, and challenges encountered along the way. By understanding the process behind the project, we can gain a better appreciation for the value of data analysis and the skills required to make it happen. \n\n# Concept Sketches\n\n::: {.panel-tabset}\n### Concept Sketches \n\nConcept sketches are beneficial for data analysis as they allow for quick and iterative exploration of data visualization ideas, facilitating communication between team members and stakeholders, and reducing the risk of errors and rework later on in the project.\n\nThis analysis used **three concept drawings**: visuals, structure, and layout. To access each drawing simply click on the corresponding tab. \n\n### Visuals\n\n::: columns\n::: {.column width=\"49%\"}\n![Fig 1: Each visual was originally drawn in black, and then updates where made in blue. They are also grouped and numbered from 1-4. This number indicates the order they are seen in the analysis.](img/img1.jpg) \n:::\n::: {.column width=\"2%\"}\n\n:::\n::: {.column width=\"49%\"}\n\nFor this analysis I started by creating some data visualizations for four reasons: \n\n1. [#TidyTuesday](https://github.com/rfordatascience/tidytuesday) is about \"understanding how to summarize and arrange data to make meaningful charts\". \n\n2. Stakeholders and upper management will often request for data analysis to be visualized. This will help them be able to glance through the findings, and dive deeper where they feel to. \n\n3. Before reading about this data I have never heard of the London Marathon. After I read through some articles on the event, I found drafting up data visuals helped me brainstorm through the project. \n\n4. Since the conception around this analysis started with data visuals, it made the most sense to create a data structure and flow that centered the data visuals. \n\n:::\n:::\n\n### Structure\n\n::: columns\n::: {.column width=\"49%\"}\nImg. \n:::\n::: {.column width=\"2%\"}\n\n:::\n::: {.column width=\"49%\"}\nExplanation.\n:::\n:::\n\n### Layout\n:::\n\n# Set Up\n\n::: {.panel-tabset}\n\n### Set Up\n\nThe setup for this analysis can be broken down into **2 parts**: Data Sources, and Packages. To access more information on each part, simply click on the corresponding tab.\n\n### Data Sources  \n\nThis analysis uses **two data sources**: \n\n1. [London Marathon](https://github.com/nrennie/LondonMarathon) package from [TidyTuesday](https://github.com/rfordatascience/tidytuesday) April-24-2023.\n\n2. The first query on Tab 7, \"Queries\", was utilized to extract the names of all the athletes. Then [Google](https://www.google.com/) and [Wikipedia](https://www.wikipedia.org/) were used to gather information on each athletes' birthday. It should be noted that not all of their birthdays were accessible online.  \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code to Load Data\"}\nremotes::install_github(\"nrennie/LondonMarathon\")\nutils::data(\n  winners, \n  package = \"LondonMarathon\")\nutils::data(\n  london_marathon, \n  package = \"LondonMarathon\")\nbirthdays <- readr::read_csv(\"data/birthdays.csv\")\n```\n:::\n\n\n### Packages\n\nThis analysis uses **two packages**: \n\n1. [tidyverse](https://www.tidyverse.org/) to wrangle the data.\n\n2. [plotly](https://plotly.com/r/) to make interactive graphs.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code to Load Packages\"}\nlibrary(tidyverse)\nlibrary(plotly)\n```\n:::\n\n\n:::\n\n# Data\n\n::: {.panel-tabset}\n\n### Data\n\nThe data is has **4 main parts**: Raw Data, Clean Data, Queries, and Data Save. To access each part, simply click on the corresponding tab. \n\n### Raw Data\n\nThis analysis uses **three raw data sets**: \n\n1. **winners** : category, year, athlete, nationality, time\n\n2. **london_marathon** : date, year, applications, accepted, starters, finishers, raised, official charity\n\n3. **birthdays** : n, Name, Birthday\n\n### Clean Data \n\nThis analysis creates **8 clean data sets**: \n\n1. **birthdays** : Used for data visuals 4-6, and includes n, Name, and Birthday. This data set simply updates the existing data set so that the \"Birthday\" column reads as a date value. This will be important for doing math with dates later on. \n\n2. **df1** : Used for **vis1**, and includes column values Nationality, and nat_winners. This data set groups the **winners** data set by Nationality, counts the number of runners from each nationality, and then arranges the data by the highest number of winners.\n\n3. **df4_join1** : used for **df4_join2**, and includes Category, Year, Athlete, Nationality, Time, and Birthday. This data set joins the winners and birthdays data set by \"Athlete\" and \"Name\".\n\n4. **df4_join2** : used for **df4_age**, and includes Year, Athlete, Birthday, Time, Category, Date. This data set joins df4_join1 with the london_marathon data by Year.\n\n5. **df4_age** : used for **df4**, and includes Year, Athlete, Birthday, Time, Category, Date. This data set subtracts the date of the marathon from the winners birthday, and then divides that value by 365.25 so that the age is in years instead of days. \n\n6. **df4** : used for **vis4** and includes age, and count. This data set filters 'NA' age values, groups by age, and then counts the number in each age group.  \n\n7. **df5** : used for **vis5** and includes category, age, and count. This data set filters 'NA' ages, groups the data by Category, and then age, and then summaries the count. \n\n8. **df6** : used for **vis6** and includes Time, age, and athlete. This data set filters 'NA' ages, and summaries the Time, age, Athlete, and Category. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Clean Data\"}\n# 1. birthdays\nbirthdays$Birthday <- as.Date(birthdays$Birthday)\n\n# 2. df1\ndf1 <- winners %>%\n  group_by(Nationality) %>%\n  summarise(nat_winners = n()) %>%\n  arrange(desc(nat_winners))\n\n# 3. df4_join1\ndf4_join1 <- winners %>%\n  select(\n    Category, \n    Year, \n    Athlete, \n    Nationality, \n    Time) %>%\n  full_join(\n    birthdays %>% select(\n      Name, Birthday\n  ), by = c(\"Athlete\" = \"Name\"))\n\n# 4. df4_join2\ndf4_join2 <- df4_join1 %>%\n  dplyr::select(\n    Year, \n    Athlete, \n    Birthday, \n    Time, \n    Category) %>%\n  dplyr::full_join(\n    london_marathon %>% \n      select(\n        Date, \n        Year), \n    by = c(\"Year\"=\"Year\"))\n\n# 5. df4_age\ndf4_age <- df4_join2 \ndf4_age$age <- as.numeric(df4_age[[6]] - df4_age[[3]])%/%365.25\n\n# 6. df4\ndf4 <- df4_age %>%\n  filter(!is.na(age)) %>%\n  group_by(age) %>%\n  summarise(count = n()) \n\n# 7. df5\ndf5 <- df4_age %>%\n  filter(!is.na(age)) %>%\n  group_by(Category, age) %>%\n  summarise(count = n())\n\n# 8. df6\ndf6 <- df4_age %>%\n  filter(!is.na(age)) %>%\n  summarise(Time = Time, \n            age = age,\n            Athlete = Athlete,\n            Category = Category)\n```\n:::\n\n\n### Queries \n\nThis analysis uses **? queries**.\n\n1. **q1** : creates a list of all athletes to win the London Marathon.\n\n2. **q2** : creates a data frame of all athletes whose birthday is unknown. \n\n3. **q3** : calculates the total amount of money raised. \n\n4. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Queries\"}\n# 1. q1\nq1 <- winners$Athlete[!duplicated(winners$Athlete)]\nq1 <- sort(q1)\n\n# 2. q2\nq2 <- birthdays %>%\n  filter(is.na(Birthday))\n\n# 3. q3\nq3 <- london_marathon %>%\n  filter(!is.na(Raised)) %>%\n  summarise(total = sum(Raised))\n\n# \ntest3 <- winners %>%\n  group_by(Athlete) %>%\n  summarise(wins = n(),\n            avg_time = mean(Time)) %>%\n  arrange(desc(wins))\n```\n:::\n\n\n### Data Save\n\nThis analysis has **3 data lists**: \n\n1. **list_raw_data** : includes all raw data sets.\n\n2. **list_clean_data** : includes all clean data sets.\n\n3. **list_queries** : includes all queries. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Lists\"}\n# 1. list_raw_data\nlist_raw_data <- list(\n  winners,\n  london_marathon,\n  birthdays\n)\n# save\nsave(list_raw_data,\n     file = \"data/list_raw_data.RData\")\n\n# 2. list_clean_data\nlist_clean_data <- list(\n  birthdays, \n  df1,\n  df4_join1,\n  df4_join2,\n  df4_age,\n  df4,\n  df5,\n  df6\n)\n# save\nsave(list_clean_data,\n     file = \"data/list_clean_data.RData\")\n\n# 3. list_queries\n```\n:::\n\n\nTo save we just use the save functions: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Saving Data Lists\"}\nsave(list_raw_data,\n     file = \"data/list_raw_data.RData\")\n```\n:::\n\n\n:::\n\n# Data Visuals \n\n::: {.panel-tabset}\n\n### Data Visuals \n\nCreating data visuals has **3 main parts**: Data Visuals, Style Functions, and Image Save. To access each part, simply click on the corresponding tab. \n\n### Data Visuals \n\n1. **vis1** : A _horizontal bargraph_ that shows the number of winners per country. \n\n2. **vis2** : A _line graph_ that shows the winning times over the years by category. \n\n3. **vis3** : A _boxplot_ that shows the winning times grouped by category. \n\n4. **vis4** : A _histogram_ that shows the number of winners by age. \n\n5. **vis5** : A _stacked bar chart_ that shows the number of winners by age in each category. \n\n6. **vis6** : A _scatterplot_ of the winning times by age. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Data Visuals\"}\n# 1. vis1 \nvis1 <- ggplot2::ggplot(\n  df1,\n  ggplot2::aes(\n    x = nat_winners,\n    # reorder to order Nationality by nat_winners\n    y = reorder(\n      Nationality, \n      nat_winners) \n    )) + \n  ggplot2::geom_bar(\n    stat=\"identity\"\n    ) \n\n# 2. vis2\nvis2 <- ggplot2::ggplot(\n  winners,\n  ggplot2::aes(\n    x = Year,\n    y = Time,\n    group = Category)\n  ) +\n  ggplot2::geom_line(\n    ggplot2::aes(\n      color = Category)\n  ) \n\n# 3. vis3\nvis3 <- ggplot2::ggplot(\n  winners,\n  ggplot2::aes(\n    x = Category,\n    y = Time)\n) + \n  ggplot2::geom_boxplot()\n\n# 4. vis4\nvis4 <- ggplot2::ggplot(df4) +\n  ggplot2::geom_bar(\n    ggplot2::aes(\n      x = age, \n      y = count),\n    stat = \"identity\")\n\n# 5. vis5\nvis5 <- ggplot2::ggplot(\n  df5,\n  ggplot2::aes(\n    x = age,\n    y = count\n  )) + \n  ggplot2::geom_bar(\n    position = \"dodge\",\n    stat = \"identity\"\n  ) +\n  ggplot2::facet_wrap(~Category)\n\n# 6. vis6\nvis6 <- ggplot2::ggplot(\n  df6, \n  ggplot2::aes(\n    x=age, \n    y=Time)) +\n  ggplot2::geom_point() +\n  ggplot2::facet_wrap(~Category) \n```\n:::\n\n\n### Style Functions\n\n1. **sty1** : is a function that styles **vis1** by adding a title, an x label, and removing the y label. \n\n2. **sty2** : is a function that styles **vis2** by ...\n\n3. **sty3** : is a function that styles **vis3** by ...\n\n4. **sty4** : is a function that styles **vis4** by ...\n\n5. **sty5** : is a function that styles **vis5** by ...\n\n6. **sty6** : is a function that styles **vis6** by ...\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Style Functions\"}\n# 1. sty1\nsty1 <- function(data){\n  sty1 <- data +\n    # title\n    ggplot2::ggtitle(\n      \"Nationality of London Marathon Winners\") +\n    # labels\n    ggplot2::ylab(\" \") +\n    ggplot2::xlab(\"Number of Winners\") +\n    # footnote\n    ggplot2::labs(\n      caption = \"Graph by Randi Bolt \\n Data from #TidyTuesday\"\n    ) +\n  # value next to bar\n  ggplot2::geom_text(\n    aes(label = nat_winners,\n        hjust = -0.2)\n  )\n  return(sty1)\n}\n\n# 2. sty2\nsty2 <- function(data){\n  sty2 <- data +\n    ggplot2::ggtitle(\n      \"Winning London Marathon Times by Category\") +\n    ggplot2::labs(\n      caption = \"Graph by Randi Bolt \\n Data from #TidyTuesday\"\n    ) \n  return(sty2)\n}\n\n# 3. sty3\n\n\n# 4. sty4\nsty4 <- function(data){\n  sty4 <- data +\n    ggplot2::ggtitle(\n      \"Ages of Winners\") +\n    ggplot2::labs(\n      caption = \"Graph by Randi Bolt \\n Data from #TidyTuesday\"\n    ) +\n    ggplot2::ylab(\"Count\") +\n    ggplot2::xlab(\"Ages\")\n  return(sty4)\n}\n\n# 5. sty5\nsty5 <- function(data){\n  sty5 <- data +\n    ggplot2::ggtitle(\n      \"Ages of Winners by Category\") +\n    ggplot2::labs(\n      caption = \"Graph by Randi Bolt \\n Data from #TidyTuesday\"\n    ) +\n    ggplot2::ylab(\"Count\") +\n    ggplot2::xlab(\"Ages\")\n  return(sty5)\n}\n\n# 6. sty6\nsty6 <- function(data){\n  sty6 <- data +\n    ggplot2::ggtitle(\n      \"Winning Times by Age and Category\") +\n    ggplot2::labs(\n      caption = \"Graph by Randi Bolt \\n Data from #TidyTuesday\"\n    ) +\n    ggplot2::ylab(\"Time\") +\n    ggplot2::xlab(\"Ages\")\n  return(sty6)\n}\n```\n:::\n\n\n\n### Save Visuals\n\n1. **vis_save** : saves all data visuals into a list.\n\n2. **vis_save_function** : function that takes in a data visual, and file name, and saves that data visual by the file name given. \n\n3. **vis_save_files** : uses vis_save_function to save all data visuals as images using a list.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Saving\"}\n# 1. vis_save\nvis_save <- list(\n  sty1(vis1),\n  sty2(vis2),\n  sty2(vis3),\n  sty4(vis4),\n  sty5(vis5),\n  sty6(vis6)\n)\n\n# 2. vis_save_function\nsave_function <- function(data_vis, img_name){\n  dat_vis <- data_vis\n  png(img_name)\n  print(dat_vis)\n  dev.off(dat_vis)\n  return(dat_vis)\n}\n\n# 3. vis_save_files\nvis_save_files <- list(\n  save_function(sty1(vis1), \"img/vis1.png\"),\n  save_function(sty2(vis2), \"img/vis2.png\"),\n  save_function(sty2(vis3), \"img/vis3.png\"),\n  save_function(sty4(vis4), \"img/vis4.png\"),\n  save_function(sty5(vis5), \"img/vis5.png\"),\n  save_function(sty6(vis6), \"img/vis6.png\")\n)\n```\n:::\n\n\n:::\n\n# Challenges\n\n::: {.panel-tabset}\n\n### Creating a Data Set\n\nBlah blah blah \n\n### When and What to Save\n\n### Creating a Map \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# world data \nworld_data <- ggplot2::map_data(\"world\")\n#head(world_data)\n\n# join winners with world_data\njoin_data <- winners %>%\n  left_join(world_data, by = c(\"Nationality\" = \"region\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in left_join(., world_data, by = c(Nationality = \"region\")): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 2 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n```\n:::\n\n```{.r .cell-code}\n# head(join_data)\n\n# bad map lol\ntest <- \n  ggplot(join_data, \n         aes(\n           long, lat, color = Nationality, size = Nationality\n         )) +\n  borders(\"world\") +\n  geom_point() +\n  coord_quickmap() +\n  guides(color = 'legend')\ntest\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using size for a discrete variable is not advised.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 56 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/bonus map code-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\nBonus Material:\n\n[The London Marathon: so much more than a race](https://www.theguardian.com/sport/2015/apr/26/london-marathon-charity-big-winner-fundraising-runners)\n\n[History of the London Marathon](https://www.tcslondonmarathon.com/results/history-of-the-london-marathon)",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}