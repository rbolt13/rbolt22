{
  "hash": "0de647fb596db7c023dda1eeeacf38c7",
  "result": {
    "markdown": "---\ntitle: \"LearnGeom\"\ndate: \"2022-01-31\"\ncategories: [R, Geometry]\ntoc: true\n---\n\n\nIn this post I create some polygons and line segments with [LearnGeom](https://cran.r-project.org/web/packages/LearnGeom/LearnGeom.pdf).\n\n![](triangles.jpeg)\n\n\n::: {.cell}\n\n:::\n\n\n# `1. Set Up`\n\nTo create coordinate planes, trianges, and line segments I will be using the [LearnGeom](https://cran.r-project.org/web/packages/LearnGeom/LearnGeom.pdf) package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(LearnGeom)\n```\n:::\n\n\n# `2. Coordinate Plane`\n\nTo create a coordinate plane I will first need to define x and y minimums and maximums, and then plot the planes with the `CoordinatePlane()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_min <- 0\nx_max <- 10\ny_min <- 0\ny_max <- 10\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n# `3. Polygons`\n\nTo create a triangle with labels: \n\n1. Print the coordinate plane I just created. \n\n2. Define three points of a triangle. \n\n3. Use `CreatePolygon()` function to create the polygon. \n\n4. Use the `Draw()` function to draw the polygon. \n\n5. Define `label = TRUE` to show the points of a triangle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nP1 <- c(1,4)\nP2 <- c(3,7)\nP3 <- c(4, 1)\nPoly <- LearnGeom::CreatePolygon(P1, P2, P3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Some of the inserted points are collinear. This could lead to a defective polygon.\"\n```\n:::\n\n```{.r .cell-code}\nLearnGeom::Draw(Poly, c(\"pink\"), label = TRUE)\n```\n\n::: {.cell-output-display}\n![Triangle](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nTo create a trapezoid: \n\n1. Print the coordinate plane I just created. \n\n2. Define four points of a trapezoid. \n\n3. Use `CreatePolygon()` function to create the polygon. \n\nNote: The order of points will matter. \n\n4. Use the `Draw()` function to draw the polygon. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nP4 <- c(6, 3)\nP5 <- c(8, 3)\nP6 <- c(9, 8)\nP7 <- c(7, 8)\nPoly2 <- LearnGeom::CreatePolygon(P4, P5, P6, P7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Some of the inserted points are collinear. This could lead to a defective polygon.\"\n```\n:::\n\n```{.r .cell-code}\nLearnGeom::Draw(Poly2, c(\"light blue\"))\n```\n\n::: {.cell-output-display}\n![Trapezoid](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nWe can also print both polygons on the same graph, shown below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nLearnGeom::Draw(Poly, c(\"pink\"), label = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nLearnGeom::Draw(Poly2, c(\"light blue\"))\n```\n\n::: {.cell-output-display}\n![Triangle and Trapezoid](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n# `4. Angle and Point Line Segments`\n\nTo create a Segment Angle: \n\n1. Print the coordinate plane I just created. \n\n2. Define a points where the line originates from. \n\n3. Define the angle of the line. \n\n4. Define the length of the line. \n\n5. Use `CreateSegmentAngle()` function to create the line segment. \n\n6. Use the `Draw()` function to draw the line. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nP <- c(0,0)\nangle <- 30\nlen <- 10\nSegment <- LearnGeom::CreateSegmentAngle(P, angle, len)\nLearnGeom::Draw(Segment, \"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nSegment Point \n\nTo create a Segment (with) Point(s): \n\n1. Print the coordinate plane. \n\n2. Define two endpoint. \n\n3. Use `CreateSegmentPoint()` function to create the line segment. \n\n4. Use the `Draw()` function to draw the line. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nP1 <- c(2,8)\nP2 <- c(8,6)\nSegment <- LearnGeom::CreateSegmentPoints(P1, P2)\nLearnGeom::Draw(Segment, \"purple\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}