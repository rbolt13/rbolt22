{
  "hash": "b946176cd9fad194b40560bc8af24dc6",
  "result": {
    "markdown": "---\ntitle: \"R and SQLite\"\nauthor: \"Randi Bolt\"\ndate: \"2023-01-23\"\ncategories: [R, SQL]\ntoc: true\ndraft: false\n---\n\n\nIn this post I use fake hospital data to answer questions using both R and SQL (Structured Query Language) via a R package called RSQLite. \n\n![](../../00_img/SQL-and-R.png)\n\n\n# `0.` Introduction \n\nThere are a handful of programming languages that data scientists use when querying, analyzing, and manipulating data. What I have found in my experience, research, and interviews with various companies is that while R and Python have a lot more power in what they are capable of producing, SQL is a fairly common way most people (especially outside of data science) query their data. So to get more practice using SQL (and R) I pulled some data and 10 questions off a website called [Learn SQL](https://www.sql-practice.com/), and will be answering them in both R and SQL. \n\n## `0.1` Packages\n\nFor all my data quering and manipulation in R I will be using the [tidyverse](https://www.tidyverse.org/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nTo run create a SQL database, and run SQL queries in R chunks I will be using a package called [RSQLite](https://cran.r-project.org/web/packages/RSQLite/index.html). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RSQLite)\n```\n:::\n\n\n## `0.2` Data \n\nThis post will use two data sets that I copied from [Learn SQL](https://www.sql-practice.com/): \n\n1. `patients`: Which includes patient_id, first_name, last_name, gender, birth_date, city, province_id, allergies, height, and weight. Note I only copied the first 1000 entries. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients <- utils::read.csv('../../00_data/patients.csv')\n```\n:::\n\n\n\n2. `province_names`: Which includes province_id, and province_name. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince_names <- utils::read.csv(\"../../00_data/province_names.csv\")\n```\n:::\n\n\n## `0.3` Database \n\nTo start I am using the `dbConnect()`, and `SQLite()` functions to create a hospital \n\nSince SQL lets the user access and manipulate data from a [database](https://www.oracle.com/database/what-is-database/), it is important to create this data base. \n\nCreate a `Hospital` database to store the `patients` data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhosp <- RSQLite::dbConnect(RSQLite::SQLite(),\n                           \"../../00_data/Hospital.db\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbWriteTable(hosp,\n                      \"patients\",\n                      patients)\nRSQLite::dbWriteTable(hosp,\n                      \"province_names\",\n                      province_names)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbListTables(hosp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"patients\"       \"province_names\"\n```\n:::\n:::\n\n\n# `1.` Show the first ten rows of `patients` data.\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nutils::head(patients, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   patient_id first_name  last_name gender birth_date            city\n1           1     Donald Waterfield      M 1963-02-12          Barrie\n2           2     Mickey     Baasha      M 1981-05-28          Dundas\n3           3       Jiji     Sharma      M 1957-09-05        Hamilton\n4           4      Blair       Diaz      M 1967-01-07        Hamilton\n5           5    Charles      Wolfe      M 2017-11-19         Orillia\n6           6        Sue     Falcon      F 2017-09-30            Ajax\n7           7     Thomas     ONeill      M 1993-01-31      Burlington\n8           8      Sonny    Beckett      M 1952-12-11 Port Hawkesbury\n9           9     Sister    Spitzer      F 1966-10-15         Toronto\n10         10     Cedric   Coltrane      M 1961-11-10         Toronto\n   province_id  allergies height weight\n1           ON       NULL    156     65\n2           ON      Sulfa    185     76\n3           ON Penicillin    194    106\n4           ON       NULL    191    104\n5           ON Penicillin     47     10\n6           ON Penicillin     43      5\n7           ON       NULL    180    117\n8           NS       NULL    174    105\n9           ON Penicillin    173     95\n10          ON       NULL    157     61\n```\n:::\n:::\n\n\n## SQL\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp, \n                    \"SELECT * \n                     FROM patients \n                     LIMIT 10\"\n                    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   patient_id first_name  last_name gender birth_date            city\n1           1     Donald Waterfield      M 1963-02-12          Barrie\n2           2     Mickey     Baasha      M 1981-05-28          Dundas\n3           3       Jiji     Sharma      M 1957-09-05        Hamilton\n4           4      Blair       Diaz      M 1967-01-07        Hamilton\n5           5    Charles      Wolfe      M 2017-11-19         Orillia\n6           6        Sue     Falcon      F 2017-09-30            Ajax\n7           7     Thomas     ONeill      M 1993-01-31      Burlington\n8           8      Sonny    Beckett      M 1952-12-11 Port Hawkesbury\n9           9     Sister    Spitzer      F 1966-10-15         Toronto\n10         10     Cedric   Coltrane      M 1961-11-10         Toronto\n   province_id  allergies height weight\n1           ON       NULL    156     65\n2           ON      Sulfa    185     76\n3           ON Penicillin    194    106\n4           ON       NULL    191    104\n5           ON Penicillin     47     10\n6           ON Penicillin     43      5\n7           ON       NULL    180    117\n8           NS       NULL    174    105\n9           ON Penicillin    173     95\n10          ON       NULL    157     61\n```\n:::\n:::\n\n\n# `2.` Show total patients admitted.\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::data.frame(\"total_admissions\" = base::nrow(patients))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  total_admissions\n1             1000\n```\n:::\n:::\n\n\n## SQL\n\t\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT COUNT(*) AS total_admissions \n                     FROM patients\"\n                    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  total_admissions\n1             1000\n```\n:::\n:::\n\n\n# `3.` Show first and last name as full_name.\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nutils::head(\n  base::data.frame(\n    full_name = base::paste0(patients$first_name, \n                             \" \", \n                             patients$last_name)), \n  10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           full_name\n1  Donald Waterfield\n2      Mickey Baasha\n3        Jiji Sharma\n4         Blair Diaz\n5      Charles Wolfe\n6         Sue Falcon\n7      Thomas ONeill\n8      Sonny Beckett\n9     Sister Spitzer\n10   Cedric Coltrane\n```\n:::\n:::\n\n\n## SQL\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n  \"SELECT first_name || ' ' || last_name AS full_name \n   FROM patients \n   LIMIT 10\"\n   )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           full_name\n1  Donald Waterfield\n2      Mickey Baasha\n3        Jiji Sharma\n4         Blair Diaz\n5      Charles Wolfe\n6         Sue Falcon\n7      Thomas ONeill\n8      Sonny Beckett\n9     Sister Spitzer\n10   Cedric Coltrane\n```\n:::\n:::\n\n\n# `4` Show unique cities that are in province_id 'NS'?\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients %>% \n  filter(province_id == \"NS\") %>%\n  summarise(unique_cities = unique(city)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    unique_cities\n1 Port Hawkesbury\n2         Halifax\n```\n:::\n:::\n\n\n\n## SQL\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(hosp,\n           \"SELECT DISTINCT(city) AS unique_cities \n            FROM patients \n            WHERE province_id IS 'NS'\"\n           )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    unique_cities\n1 Port Hawkesbury\n2         Halifax\n```\n:::\n:::\n\n    \n# `5.` Show the total amount of male patients and the total amount of female patients.\n\nDisplay the two results in the same row.\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::data.frame(\n  male_count = base::length(base::which(patients$gender == 'M')),\n  female_count = base::length(base::which(patients$gender == 'F'))\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  male_count female_count\n1        543          457\n```\n:::\n:::\n\n\n## SQL\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(hosp,\n           \"SELECT \n           (SELECT COUNT(*) FROM patients WHERE gender = 'M') AS male_count, \n           (SELECT COUNT(*) FROM patients WHERE gender = 'F') AS female_count\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  male_count female_count\n1        543          457\n```\n:::\n:::\n\n\n# `6.` Show all allergies ordered by popularity. Remove NULL values from query.\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients %>% \n  filter(allergies != \"NULL\") %>%\n  group_by(allergies) %>%\n  summarise(total_diagnosis = n()) %>%\n  arrange(desc(total_diagnosis)) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 Ã— 2\n   allergies   total_diagnosis\n   <chr>                 <int>\n 1 Penicillin              230\n 2 Codeine                  58\n 3 Sulfa                    35\n 4 ASA                      16\n 5 Sulfa Drugs              13\n 6 Tylenol                  11\n 7 Wheat                    11\n 8 Peanuts                  10\n 9 Bee Stings                9\n10 Iodine                    9\n```\n:::\n:::\n\n\n## SQL\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(hosp,\n           \"SELECT allergies,\n            COUNT(*) AS total_diagnosis\n            FROM patients\n            WHERE allergies IS NOT 'NULL'\n            GROUP BY allergies\n            ORDER BY total_diagnosis DESC\n            LIMIT 10\"\n           )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     allergies total_diagnosis\n1   Penicillin             230\n2      Codeine              58\n3        Sulfa              35\n4          ASA              16\n5  Sulfa Drugs              13\n6        Wheat              11\n7      Tylenol              11\n8      Peanuts              10\n9       Iodine               9\n10  Bee Stings               9\n```\n:::\n:::\n\n\n# `7.` Display the total amount of patients for each province. Order by descending.\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::merge(province_names, patients, by = \"province_id\") %>%\n  group_by(province_name) %>%\n  summarise(patient_count = n()) %>%\n  arrange(desc(patient_count))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 Ã— 2\n  province_name             patient_count\n  <chr>                             <int>\n1 Ontario                             954\n2 Alberta                              14\n3 British Columbia                     11\n4 Nova Scotia                           9\n5 Manitoba                              7\n6 Newfoundland and Labrador             2\n7 Quebec                                2\n8 Saskatchewan                          1\n```\n:::\n:::\n\n\n## SQL\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT province_name,\n                     COUNT(*) as patient_count\n                     FROM patients pa\n                     join province_names pr on pr.province_id = pa.province_id\n                     group by pr.province_id\n                     order by patient_count desc\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              province_name patient_count\n1                   Ontario           954\n2                   Alberta            14\n3          British Columbia            11\n4               Nova Scotia             9\n5                  Manitoba             7\n6                    Quebec             2\n7 Newfoundland and Labrador             2\n8              Saskatchewan             1\n```\n:::\n:::\n\n\n# `8.` Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name. \n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::merge(province_names, patients, by = \"province_id\") %>%\n  dplyr::group_by(province_name) %>%\n  dplyr::count(gender == \"M\", gender == \"F\") %>%\n  dplyr::slice(base::which.max(n)) %>%\n  dplyr::summarise(province_name = province_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 Ã— 1\n  province_name            \n  <chr>                    \n1 Alberta                  \n2 British Columbia         \n3 Manitoba                 \n4 Newfoundland and Labrador\n5 Nova Scotia              \n6 Ontario                  \n7 Quebec                   \n8 Saskatchewan             \n```\n:::\n:::\n\n\n## SQL \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT pr.province_name\n                     FROM patients AS pa\n                     JOIN province_names AS pr ON pa.province_id = pr.province_id\n                     GROUP BY pr.province_id\n                     HAVING\n                     COUNT( CASE WHEN gender = 'M' THEN 1 END) >\n                     COUNT( CASE WHEN gender = 'F' THEN 1 END)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              province_name\n1                   Alberta\n2          British Columbia\n3                  Manitoba\n4 Newfoundland and Labrador\n5               Nova Scotia\n6                   Ontario\n7                    Quebec\n8              Saskatchewan\n```\n:::\n:::\n\n\n# `9.` Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance.\n\nGive each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.\n\n## R\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:length(patients$patient_id))\n  {\n  if(patients$patient_id[[i]]%%2==1){\n     patients$has_insurance[[i]] <- \"Yes\"\n  }else{\n    patients$has_insurance[[i]] <- \"No\"\n  }\n}\n\n#. patients\n```\n:::\n\n\n## SQL\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT \n                        CASE WHEN patient_id % 2 = 0 Then 'Yes'\n                        ELSE 'No' \n                        END as has_insurance,\n                     SUM(\n                        CASE WHEN patient_id % 2 = 0 Then 10\n                        ELSE 50 \n                        END\n                         ) as cost_after_insurance\n                     FROM patients \n                     GROUP BY has_insurance;\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  has_insurance cost_after_insurance\n1            No                25000\n2           Yes                 5000\n```\n:::\n:::\n\n\n# `10.` We are looking for a specific patient. Pull all columns for the patient who matches the following criteria:\n\n- First_name contains an 'b' after the first two letters.\n- Identifies their gender as 'F'\n- Their weight would be between 50kg and 70kg\n- Their patient_id is an odd number\n- They are from the city 'Burlington'\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients %>%\n  filter(base::grepl(\"^.{2}[b]\", first_name),\n         gender == \"F\",\n         weight > 50 && weight < 80,\n         patient_id %%2==1,\n         city == \"Burlington\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  patient_id first_name last_name gender birth_date       city province_id\n1        695    Sabrina    Hettie      F 2000-11-25 Burlington          ON\n   allergies height weight has_insurance\n1 Penicillin    160     51           Yes\n```\n:::\n:::\n\n\n## SQL\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT *\n                     FROM patients\n                     WHERE\n                      first_name LIKE '__b%'\n                      AND gender = 'F'\n                      AND weight BETWEEN 50 AND 70\n                      AND patient_id % 2 = 1\n                      AND city = 'Burlington';\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  patient_id first_name last_name gender birth_date       city province_id\n1        695    Sabrina    Hettie      F 2000-11-25 Burlington          ON\n   allergies height weight\n1 Penicillin    160     51\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}