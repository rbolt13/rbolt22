{
  "hash": "3c981be29740ac234c2a98bb6b8a244e",
  "result": {
    "markdown": "---\ntitle: \"R and SQLite\"\ndate: \"2023-01-23\"\ncategories: [R, SQL]\ntoc: true\ndraft: false\n---\n\n\nUsing a R package called SQLite, this post demonstrates how to answer data related questions with both R and SQL (Structured Query Language). \n\n![Naruto with SQL logo, and Sauske with the R Studio logo, standing back to back.](SQL-and-R.png)\n\n# `0.` Introduction \n\nThere are a handful of programming languages that data scientists use when querying, analyzing, and manipulating data. What I have found is that while R and Python have a lot more power in what they are capable of producing, SQL is used by a wider variety of roles to access and query data. So to get more practice using both SQL and R I pulled 10 questions and some data off a website called [Learn SQL](https://www.sql-practice.com/), and will be answering the following questions in both languages. \n\n::: {.panel-tabset}\n\n### `0.0 Set-Up`\n\n**Contents:**\n\n* 0.1 Packages\n\n* 0.2 Data\n\n* 0.3 Data base\n\n### `0.1 Packages`\n\nFor all my data queries and manipulation in R I will be using base R, [dplyr](https://dplyr.tidyverse.org/), and [magrittr](https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(magrittr)\n```\n:::\n\n\nTo create a SQL database, and run SQL queries in R chunks I will be using a package called [RSQLite](https://cran.r-project.org/web/packages/RSQLite/index.html). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RSQLite)\n```\n:::\n\n\n### `0.2 Data` \n\nThis post will use three data sets that I copied from [Learn SQL](https://www.sql-practice.com/): \n\n1. `patients`: Which includes patient_id, first_name, last_name, gender, birth_date, city, province_id, allergies, height, and weight. Note I only copied the first 1000 entries. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients <- utils::read.csv('../../00_data/patients.csv')\n```\n:::\n\n\n2. `province_names`: Which includes province_id, and province_name. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince_names <- utils::read.csv(\"../../00_data/province_names.csv\")\n```\n:::\n\n\n3. `admissions`: which includes patient_id, admission_date, discharge_date, diagnosis, attending_doctor_id\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmissions <- utils::read.csv(\"../../00_data/admissions.csv\")\n```\n:::\n\n\n\n### `0.3 Database`  \n\nTo create a database use: \n\n* `dbConnect()` to connect to a SQL data base called Hospital.db in the 00_data folder. \n\n* `SQLite()` to connect to a SQLite database file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhosp <- RSQLite::dbConnect(RSQLite::SQLite(),\n                           \"../../00_data/Hospital.db\")\n```\n:::\n\n\nTo define data within the database use:\n\n* `dbWriteTable()` to create a data set within the hospital database first call the data base (hosp), define a name, and then define the data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbWriteTable(hosp,\n                      \"patients\",\n                      patients)\nRSQLite::dbWriteTable(hosp,\n                      \"province_names\",\n                      province_names)\nRSQLite::dbWriteTable(hosp,\n                      \"admissions\",\n                      admissions)\n```\n:::\n\n\nVerify the three data sets are in the database using:\n\n* `dbListTables()` to list the tables within the hosp database. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbListTables(hosp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"admissions\"     \"doctors\"        \"patients\"       \"province_names\"\n```\n:::\n:::\n\n\n:::\n\n# `1.` Show the first ten rows of patients data.\n\n::: {.panel-tabset}\n\n### `1.0`\n\n**Contents**\n\n* 1.1 Solution in R\n\n* 1.2 Solution in SQL\n\n### `1.1 R`\n\nIn R use:\n\n* `head()` to view the first 10 rows of the patients data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nutils::head(patients, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   patient_id first_name  last_name gender birth_date            city\n1           1     Donald Waterfield      M 1963-02-12          Barrie\n2           2     Mickey     Baasha      M 1981-05-28          Dundas\n3           3       Jiji     Sharma      M 1957-09-05        Hamilton\n4           4      Blair       Diaz      M 1967-01-07        Hamilton\n5           5    Charles      Wolfe      M 2017-11-19         Orillia\n6           6        Sue     Falcon      F 2017-09-30            Ajax\n7           7     Thomas     ONeill      M 1993-01-31      Burlington\n8           8      Sonny    Beckett      M 1952-12-11 Port Hawkesbury\n9           9     Sister    Spitzer      F 1966-10-15         Toronto\n10         10     Cedric   Coltrane      M 1961-11-10         Toronto\n   province_id  allergies height weight\n1           ON       NULL    156     65\n2           ON      Sulfa    185     76\n3           ON Penicillin    194    106\n4           ON       NULL    191    104\n5           ON Penicillin     47     10\n6           ON Penicillin     43      5\n7           ON       NULL    180    117\n8           NS       NULL    174    105\n9           ON Penicillin    173     95\n10          ON       NULL    157     61\n```\n:::\n:::\n\n\n### `1.2 SQL`\n\nIn R use: \n\n* `dbGetQuery()` to run SQL commands from a given data base.\n\nIn SQL use:\n\n* `SELECT` to select. \n\n* `(*)` to include all columns. \n\n* `FROM` to define the patients data for select to include all columns from. \n\n* `LIMIT` to only show the top ten rows. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp, \n                    \"SELECT * \n                     FROM patients \n                     LIMIT 10\"\n                    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   patient_id first_name  last_name gender birth_date            city\n1           1     Donald Waterfield      M 1963-02-12          Barrie\n2           2     Mickey     Baasha      M 1981-05-28          Dundas\n3           3       Jiji     Sharma      M 1957-09-05        Hamilton\n4           4      Blair       Diaz      M 1967-01-07        Hamilton\n5           5    Charles      Wolfe      M 2017-11-19         Orillia\n6           6        Sue     Falcon      F 2017-09-30            Ajax\n7           7     Thomas     ONeill      M 1993-01-31      Burlington\n8           8      Sonny    Beckett      M 1952-12-11 Port Hawkesbury\n9           9     Sister    Spitzer      F 1966-10-15         Toronto\n10         10     Cedric   Coltrane      M 1961-11-10         Toronto\n   province_id  allergies height weight\n1           ON       NULL    156     65\n2           ON      Sulfa    185     76\n3           ON Penicillin    194    106\n4           ON       NULL    191    104\n5           ON Penicillin     47     10\n6           ON Penicillin     43      5\n7           ON       NULL    180    117\n8           NS       NULL    174    105\n9           ON Penicillin    173     95\n10          ON       NULL    157     61\n```\n:::\n:::\n\n\n:::\n\n# `2.` Show total patients admitted.\n\n::: {.panel-tabset}\n\n### `2.0`\n\n**Contents**\n\n* 2.1 Solution in R\n\n* 2.2 Solution in SQL\n\n### `2.1 R`\n\nIn R use:\n\n* `data.frame()` to define a column for total_admissions.\n\n* `nrow()` to count the rows in the patients data which will equal the total_admissions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::data.frame(\"total_admissions\" = base::nrow(patients))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  total_admissions\n1             1000\n```\n:::\n:::\n\n\n### `2.2 SQL`\n\nIn SQL use:\n\n* `SELECT` to select. \n\n* `COUNT(*)` to count the total number of rows.\n\n* `AS` to define that count as a new variable, total_admissions.\n\n* `FROM` to define the patients data for select to count the total numbers of rows for, and define as total_admissions.\n\t\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT COUNT(*) AS total_admissions \n                     FROM patients\"\n                    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  total_admissions\n1             1000\n```\n:::\n:::\n\n\n:::\n\n# `3.` Show first and last name as full_name.\n\n::: {.panel-tabset}\n\n### `3.0`\n\n**Contents**\n\n* 3.1 Solution in R\n\n* 3.2 Solution in SQL\n\n### `3.1 R`\n\nIn R use: \n\n* `head()` to show the first 10 rows of data. \n\n* `data.frame()` to define a data frame that includes full_name.\n\n* `paste0()` to paste together the first_name, a space, and the last_name. This will equal the full_name. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nutils::head(\n  base::data.frame(\n    full_name = base::paste0(patients$first_name, \n                             \" \", \n                             patients$last_name)), \n  10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           full_name\n1  Donald Waterfield\n2      Mickey Baasha\n3        Jiji Sharma\n4         Blair Diaz\n5      Charles Wolfe\n6         Sue Falcon\n7      Thomas ONeill\n8      Sonny Beckett\n9     Sister Spitzer\n10   Cedric Coltrane\n```\n:::\n:::\n\n\n### `3.2 SQL`\n\nIn SQL use:\n\n* `SELECT` to select.\n\n* `||` to concatenate first_name, space, and last name.\n\n* `AS` to define the concatination as full_name. \n\n* `FROM` to define the patients data for select to concatenate data from.  \n\n* `LIMIT` to show the first 10 rows of data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n  \"SELECT first_name || ' ' || last_name AS full_name \n   FROM patients \n   LIMIT 10\"\n   )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           full_name\n1  Donald Waterfield\n2      Mickey Baasha\n3        Jiji Sharma\n4         Blair Diaz\n5      Charles Wolfe\n6         Sue Falcon\n7      Thomas ONeill\n8      Sonny Beckett\n9     Sister Spitzer\n10   Cedric Coltrane\n```\n:::\n:::\n\n\n:::\n\n# `4.` Show unique cities that are in province_id 'NS'?\n\n::: {.panel-tabset}\n\n### `4.0`\n\n**Contents**\n\n* 4.1 Solution in R\n\n* 4.2 Solution in SQL\n\n### `4.1 R`\n\nIn R define the patients data then use: \n\n* `%>%` to pipe data.\n\n* `filter()` to filter for all province_id that is equal to \"NS\".\n\n* `summerise()` to define unique_cites.\n\n* `unique()` to remove duplicate elements of the city column which will be defined as unique_cites. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients %>% \n  filter(province_id == \"NS\") %>%\n  summarise(unique_cities = unique(city)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    unique_cities\n1 Port Hawkesbury\n2         Halifax\n```\n:::\n:::\n\n\n### `4.2 SQL`\n\nIn SQL:\n\n* `SELECT` to select.\n\n* `DISTINCT()` to define city as the column to remove duplicates from. \n\n* `AS` to define those cities as unique_cites.\n\n* `FROM` to define the patients data for select to get unique_cites from. \n\n* `WHERE` specifies a condition.\n\n* `IS` is the condition that 'NS' is equal to province_id. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(hosp,\n           \"SELECT DISTINCT(city) AS unique_cities \n            FROM patients \n            WHERE province_id IS 'NS'\"\n           )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    unique_cities\n1 Port Hawkesbury\n2         Halifax\n```\n:::\n:::\n\n\n:::\n    \n# `5.` Show the total number of male patients and the total number of female patients.\n\nDisplay the two results in the same row.\n\n::: {.panel-tabset}\n\n### `5.0`\n\n**Contents**\n\n* 5.1 Solution in R\n\n* 5.2 Solution in SQL\n\n### `5.1 R`\n\nIn R use:\n\n* `data.frame()` to create a data frame with two columns: male_count, and female_count. \n\n* `length()` to count the length of the input. \n\n* `which()` to indicate which gender equals \"M\" or \"F\", and counts that length accordingly. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::data.frame(\n  male_count = base::length(base::which(patients$gender == 'M')),\n  female_count = base::length(base::which(patients$gender == 'F'))\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  male_count female_count\n1        543          457\n```\n:::\n:::\n\n\n### `5.2 SQL`\n\nIn SQL use:\n\n* `SELECT` to select. \n\n* `COUNT(*)` to count all input values.\n\n* `FROM` to define the patients data for select to count on.\n\n* `WHERE` is a condition defined as gender = \"M\" or \"F\".\n\n* `AS` is defining the count as male_count, or female_count respectively. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(hosp,\n           \"SELECT \n           (SELECT COUNT(*) FROM patients WHERE gender = 'M') AS male_count, \n           (SELECT COUNT(*) FROM patients WHERE gender = 'F') AS female_count\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  male_count female_count\n1        543          457\n```\n:::\n:::\n\n\n:::\n\n# `6.` Show all allergies ordered by popularity. Remove NULL values from the query.\n\n::: {.panel-tabset}\n\n### `6.0`\n\n**Contents**\n\n* 6.1 Solution in R\n\n* 6.2 Solution in SQL\n\n### `6.1 R`\n\nIn R define the patients data then use:\n\n* `%>%` pipe the data.\n\n* `filter()` to subset data to all allergies that aren't \"NULL\". \n\n* `group_by()` to convert the table into one that is grouped by allergies.\n\n* `summarise()` to define total_diagnosis.\n\n* `n()` to count the size of each group. \n\n* `arrange()` to define how the data is arranged.\n\n* `desc()` to define that the data is arranged in descending order by total_diagnosis. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients %>% \n  dplyr::filter(allergies != \"NULL\") %>%\n  dplyr::group_by(allergies) %>%\n  dplyr::summarise(total_diagnosis = dplyr::n()) %>%\n  dplyr::arrange(dplyr::desc(total_diagnosis)) %>%\n  utils::head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   allergies   total_diagnosis\n   <chr>                 <int>\n 1 Penicillin              230\n 2 Codeine                  58\n 3 Sulfa                    35\n 4 ASA                      16\n 5 Sulfa Drugs              13\n 6 Tylenol                  11\n 7 Wheat                    11\n 8 Peanuts                  10\n 9 Bee Stings                9\n10 Iodine                    9\n```\n:::\n:::\n\n\n### `6.2 SQL`\n\nIn SQL: \n\n* `SELECT` the allergies column.\n\n* `COUNT(*)` count all input. \n\n* `AS` to define the count as total_diagnosis. \n\n* `FROM` to define the patients data to select the allergies column from.\n\n* `WHERE` to define a condition.\n\n* `IS NOT` is the condition that says allergies cannot be 'NULL'. \n\n* `GROUP BY` groups the data by allergies.\n\n* `Order BY` to define how the data order is output.\n\n* `DESC` is the given condition that the data is ordered in descending order by total_diagnosis. \n\n* `LIMIT` to limit output to the first 10 rows. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(hosp,\n           \"SELECT allergies,\n            COUNT(*) AS total_diagnosis\n            FROM patients\n            WHERE allergies IS NOT 'NULL'\n            GROUP BY allergies\n            ORDER BY total_diagnosis DESC\n            LIMIT 10\"\n           )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     allergies total_diagnosis\n1   Penicillin             230\n2      Codeine              58\n3        Sulfa              35\n4          ASA              16\n5  Sulfa Drugs              13\n6        Wheat              11\n7      Tylenol              11\n8      Peanuts              10\n9       Iodine               9\n10  Bee Stings               9\n```\n:::\n:::\n\n\n:::\n\n# `7.` Display the total number of patients for each province. Order by descending.\n\n::: {.panel-tabset}\n\n### `7.0`\n\n**Contents**\n\n* 7.1 Solution in R\n\n* 7.2 Solution in SQL\n\n### `7.1 R`\n\nIn R use:\n\n* `merge()` to join the data sets province_names, and patients by \"province_id\". \n\n* `%>%` to pipe the data.\n\n* `group_by()` to group by province name.\n\n* `summarise()` to define the patient count.\n\n* `n()` to count the number of patients in each province. This will equal patient_count.\n\n* `arrange()` to define how the data is arranged.\n\n* `desc()` to define that the data is arranged in descending order by patient_count.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::merge(province_names, patients, by = \"province_id\") %>%\n  dplyr::group_by(province_name) %>%\n  dplyr::summarise(patient_count = dplyr::n()) %>%\n  dplyr::arrange(dplyr::desc(patient_count))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  province_name             patient_count\n  <chr>                             <int>\n1 Ontario                             954\n2 Alberta                              14\n3 British Columbia                     11\n4 Nova Scotia                           9\n5 Manitoba                              7\n6 Newfoundland and Labrador             2\n7 Quebec                                2\n8 Saskatchewan                          1\n```\n:::\n:::\n\n\n### `7.1 SQL`\n\nIn SQL use:\n\n* `SELECT` select the province_name column.\n\n* `COUNT(*)` to count all input.\n\n* `AS` to define count as patient_count.\n\n* `FROM` to define the patients data `AS` **pa** to select province_name to count the number of patients from. \n\n* `JOIN` to join the province_names data `AS` **pr**. \n\n* `ON` is the clause to join data based on pr.province_id = pa.province_id. \n\n* `GROUP BY` to group the data by pr.province_id.\n\n* `ORDER BY` to define the order of the data output.\n\n* `DESC` defines that the output data be arranged in order of descending patient_count. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT province_name,\n                     COUNT(*) AS patient_count\n                     FROM patients pa\n                     JOIN province_names pr ON pr.province_id = pa.province_id\n                     GROUP BY pr.province_id\n                     ORDER BY patient_count DESC\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              province_name patient_count\n1                   Ontario           954\n2                   Alberta            14\n3          British Columbia            11\n4               Nova Scotia             9\n5                  Manitoba             7\n6                    Quebec             2\n7 Newfoundland and Labrador             2\n8              Saskatchewan             1\n```\n:::\n:::\n\n\n:::\n\n# `8.` Show the provinces that have more patients identified as 'M' than 'F'. Must only show full province_name. \n\n::: {.panel-tabset}\n\n### `8.0`\n\n**Contents**\n\n* 8.1 Solution in R\n\n* 8.2 Solution in SQL\n\n### `8.1 R`\n\nIn R use,\n\n* `merge()` to join the data sets province_names, and patients by \"province_id\".\n\n* `group_by()` to group by province name.\n\n* `count()` to count the number of \"M\" and \"F\" patients for each province. \n\n* `slice()` to remove certain rows based on a given criteria.\n\n* `which.max()` to determine which province has a greater number of male patients.\n\n* `summarise()` to define only province_name in the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::merge(province_names, patients, by = \"province_id\") %>%\n  dplyr::group_by(province_name) %>%\n  dplyr::count(gender == \"M\", gender == \"F\") %>%\n  dplyr::slice(base::which.max(n)) %>%\n  dplyr::summarise(province_name = province_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 1\n  province_name            \n  <chr>                    \n1 Alberta                  \n2 British Columbia         \n3 Manitoba                 \n4 Newfoundland and Labrador\n5 Nova Scotia              \n6 Ontario                  \n7 Quebec                   \n8 Saskatchewan             \n```\n:::\n:::\n\n\n### `8.2 SQL` \n\nIn SQL use,\n\n* `SELECT` to select pr.province_name column.\n\n* `FROM` to define the patients data to select pr.province_name from.\n\n* `AS` to define patients data as pa.\n\n* `JOIN` to join pa.province data with pr.province_name data.\n\n* `AS` to define province_name data as pr.\n\n* `ON` to join pa.patients and pr.province_names data by province_id. \n\n* `GROUP BY` to group data by province_id. \n\n* `HAVING` to define a clause to filter the data where the number of \"M\" patients is greater than \"F\" patients. \n\n* `COUNT()` to count the given input. \n\n* `CASE` to go through the condition of gender = \"M\" or when gender = \"F\"\n\n* `WHEN` to preform the count when the condition is true.\n\n* `THEN 1 END` to add a 1 to the count when the case is met. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT pr.province_name\n                     FROM patients AS pa\n                     JOIN province_names AS pr ON pa.province_id = pr.province_id\n                     GROUP BY pr.province_id\n                     HAVING\n                     COUNT( CASE WHEN gender = 'M' THEN 1 END) >\n                     COUNT( CASE WHEN gender = 'F' THEN 1 END)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              province_name\n1                   Alberta\n2          British Columbia\n3                  Manitoba\n4 Newfoundland and Labrador\n5               Nova Scotia\n6                   Ontario\n7                    Quebec\n8              Saskatchewan\n```\n:::\n:::\n\n\n:::\n\n# `9.` Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance.\n\nGive each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.\n\n::: {.panel-tabset}\n\n### `9.0`\n\n**Contents**\n\n* 9.1 Solution in R\n\n* 9.2 Solution in SQL\n\n### `9.1 R`\n\nIn R use, \n\n* `%>%` to pipe the data.\n\n* `mutate()` to mutate the data to include has_insurance, and cost_after_insurance information.\n\n* `case_when()` to define a case where if the patient id is odd then they don't have insurance, and if they are even they do have insurance. \n\n* `group_by()` to group the data by has_insurance.\n\n* `summarize()` to define cost_after_insurance. \n\n* `sum()` to add up the cost for all those with and without insurance. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients %>%\n  dplyr::mutate(\n    has_insurance = dplyr::case_when(\n    patient_id %%2==1 ~ \"Yes\",\n    patient_id %%2!=1 ~ \"No\"\n  ),cost_after_insurance = dplyr::case_when(\n    has_insurance == \"Yes\" ~ 10,\n    has_insurance == \"No\" ~ 50\n  )) %>%\n  group_by(has_insurance)  %>%\n  summarise(cost_after_insurance = base::sum(cost_after_insurance))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  has_insurance cost_after_insurance\n  <chr>                        <dbl>\n1 No                           25000\n2 Yes                           5000\n```\n:::\n:::\n\n\n### `9.2 SQL`\n\nIn SQL use, \n\n* `SELECT` to select.\n\n* `CASE` to define a case. \n\n* `WHEN` to select when a patient_id is even.\n\n* `THEN` to set insurance to \"Yes\" if patient_id is even.\n\n* `ELSE` to set has_insurance to \"No\" when patient_id is not even. \n\n* `END` to end the case. \n\n* `AS` to define the first case values as has_insurance.\n\n* `SUM()` to add up input. \n\n* `CASE` to define another case. \n\n* `WHEN` to select when a patient has an even id.\n\n* `THEN` to set cost_after_insurance to 10 if the patient id is even. \n\n* `ELSE` to set the cost_after_insurance to 50 if the patient id is not even. \n\n* `END` to end the case.\n\n* `AS` to define the second case values as cost_after_insurance. \n\n* `FROM` to define the patients data to select and figure out insurance costs for. \n\n* `GROUP BY` to group data by has_insurance. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT \n                        CASE WHEN patient_id % 2 = 0 Then 'Yes'\n                        ELSE 'No' \n                        END as has_insurance,\n                     SUM(\n                        CASE WHEN patient_id % 2 = 0 Then 10\n                        ELSE 50 \n                        END\n                         ) AS cost_after_insurance\n                     FROM patients \n                     GROUP BY has_insurance;\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  has_insurance cost_after_insurance\n1            No                25000\n2           Yes                 5000\n```\n:::\n:::\n\n\n:::\n\n# `10.` We are looking for a specific patient. Pull all columns for the patient who matches the following criteria:\n\n- First_name contains a 'b' after the first two letters.\n- Identifies their gender as 'F'\n- Their weight would be between 50 kg and 70 kg\n- Their patient_id is an odd number\n- They are from the city 'Burlington'\n\n::: {.panel-tabset}\n\n### `10.0`\n\n**Contents**\n\n* 10.1 Solution in R\n\n* 10.2 Solution in SQL\n\n### `10.1 R`\n\nIn R define the patients data then use,\n\n* `%>%` to pipe the data.\n\n* `filter` to filter the database on first name, gender, weight, patient_id, and city.\n\n* `grepl` to select first_names where the 3rd letter is b. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients %>%\n  dplyr::filter(base::grepl(\"^.{2}[b]\", first_name),\n         gender == \"F\",\n         weight > 50 && weight < 80,\n         patient_id %%2==1,\n         city == \"Burlington\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  patient_id first_name last_name gender birth_date       city province_id\n1        695    Sabrina    Hettie      F 2000-11-25 Burlington          ON\n   allergies height weight\n1 Penicillin    160     51\n```\n:::\n:::\n\n\n### `10.2 SQL`\n\nIn SQL use: \n\n* `SELECT` to select all * columns.\n\n* `FROM` to select all columns from the patients data.\n\n* `Where` defines multiple conditions. \n\n* `LIKE` is a condition where first_name has the third letter equal to a lower case b.\n\n* `AND` to define multiple conditions such as gender, patient_id, and city.\n\n* `BETWEEN` to define weight is greater than 50, but less than 70. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT *\n                     FROM patients\n                     WHERE\n                      first_name LIKE '__b%'\n                      AND gender = 'F'\n                      AND weight BETWEEN 50 AND 70\n                      AND patient_id % 2 = 1\n                      AND city = 'Burlington';\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  patient_id first_name last_name gender birth_date       city province_id\n1        695    Sabrina    Hettie      F 2000-11-25 Burlington          ON\n   allergies height weight\n1 Penicillin    160     51\n```\n:::\n:::\n\n\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}