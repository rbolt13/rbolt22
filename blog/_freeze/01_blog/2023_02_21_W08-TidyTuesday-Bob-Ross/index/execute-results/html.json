{
  "hash": "21386a7465a2e616cf72c90e43b79ea5",
  "result": {
    "markdown": "---\ntitle: \"Week 8 Tidy Tuesday: Bob Ross Paintings\"\ndate: \"2023-02-21\"\ncategories: [\"#TidyTuesday\", R, \"Data Visuals\"]\ndraft: false\n---\n\n\nStep into the world of happy little data with my Week 8 [#TidyTuesday](https://github.com/rfordatascience/tidytuesday) submission which reveals the number of colors Bob Ross used each season of \"The Joy of Painting\".\n\n# Bob Ross Paintings\n\nThe data this week comes from Jared Wilber's data on [Bob Ross Paintings](https://github.com/jwilber/Bob_Ross_Paintings/blob/master/data/bob_ross_paintings.csv) via @frankiethull [Bob Ross Colors data package](https://github.com/frankiethull/BobRossColors).\n\n![](plot.png)\n\n# Code\n\nThis week I wanted to keep the visual fairly simple so that I could focus my efforts on designing the project in a way that felt intuitive, was easy to read, and had a manageable workflow. To achieve these objectives I broke the project into three key functions: cleaning, visualizing, and styling - organized within the 'Functions' folder for that weeks submission. The `index.R` file integrates data loading, function execution, and the generation of of a data visualization.\n\n::: {.panel-tabset}\n\n### Cleaning Function\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\n#### Load Packages ####\n# dplyr: data cleaning functions.\nbase::library(dplyr)\n#### Cleaning Function ####\nclean <- function(df){\n  # clean function\n  clean_df <- df %>%\n    dplyr::group_by(season) %>%\n    dplyr::summarise(\n      total_num_colors = base::sum(num_colors))\n  return(clean_df)\n}\n```\n:::\n\n\n### Visual Function\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\n#### Load Packages ####\n# ggplot2: graphing functions. \nbase::library(ggplot2)\n#### Visual Function ####\nvis <- function(clean_df){\n  vis <- ggplot2::ggplot(\n    clean_df,\n    ggplot2::aes(\n      x = season,\n      y = total_num_colors)) +\n    ggplot2::geom_point() + \n    ggplot2::geom_segment(\n      ggplot2::aes(\n        x = season,\n        xend = season,\n        y = 0,\n        yend = total_num_colors)) + \n    ggplot2::geom_hline(\n      yintercept=137.871, \n      linetype=\"dashed\", \n      color = \"red\") +\n    ggplot2::geom_text(\n      ggplot2::aes(label = total_num_colors,\n                   vjust = -1)\n    )\n  return(vis)\n}\n```\n:::\n\n\n### Style Function\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\n#### Load Packages ####\n# ggplot2: graphing functions. \nbase::library(ggplot2)\n#### Style Function ####\nsty <- function(vis){\n  sty <- vis +\n    # labels \n    ggplot2::labs(\n      title = \"Colors Used Each Season\",\n      subtitle = \"The dashed red line shows the average number of colors used each season, 137.871.\",\n      caption = \"Graph by Randi Bolt \\n Data from #TidyTuesday\",\n      x = \"Season\",\n      y = \"Colors Used\"\n    ) + \n    # themes\n    ggplot2::theme_classic() + \n    ggplot2::theme(\n      plot.title = element_text(\n        face = \"bold\",\n        hjust = .5),\n      plot.subtitle = element_text(\n        hjust = .5)\n    ) \n  return(sty)\n  }\n```\n:::\n\n\n### Index.R\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\n#### Load Packages ####\n# tidyverse: A collection of data-related packages.\nbase::library(tidyverse)\n\n#### Load Data ####\n# bob_ross: data about and from \"The Joy of Painting\".\ntt_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-21/bob_ross.csv')\n\n#### Clean Data ####\nclean_data <- clean(tt_data)\n\n#### Create Data Visual ####\nvis_data <- vis(clean_data)\n\n#### Style Data Visual ####\nsty_vis <- sty(vis_data)\n\n#### Save Plot ####\nggplot2::ggsave(\n  base::paste0(\"plot.png\"), \n  width = 30, \n  height = 20, \n  units = \"cm\")\n```\n:::\n\n\n### Links\n\n[Week 8 Submission](https://github.com/rbolt13/tidytuesday/tree/main/2023/week_08) \n\n[TidyTuesday Repository](https://github.com/rbolt13/tidytuesday).\n\n:::\n\n# Quick Notes\n\n* To make a lollipop graph using ggplot2 you need to assign `geom_point()` and `geom_segment()`.\n\n* `goem_hline()` was used to created the dashed horizontal red line.\n\n* `geom_text()` is used to add the values above the lollipops. \n\n* Using the TidyTuesdayR package can be problematic. \n\n* It looks nicer to keep all labels in the `labs()` function. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}