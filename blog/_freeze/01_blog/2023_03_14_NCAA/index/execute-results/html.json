{
  "hash": "5ea589f703d79a1c757808dda36960f6",
  "result": {
    "markdown": "---\ntitle: \"NCAA\"\ndate: \"2023-03-14\"\ncategories: [R]\ntoc: true\ndraft: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n:::\n\n\n\n# Load Data\n\nFrom Kaggle: https://www.kaggle.com/datasets/woodygilbertson/ncaam-march-madness-scores-19852021 \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarch_madness_data <- read.csv(\"data_cleaned.csv\")\nhead(march_madness_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  YEAR ROUND WSEED   WTEAM WSCORE LSEED        LTEAM LSCORE\n1 2021     6     1  Baylor     86     1      Gonzaga     70\n2 2021     5     1 Gonzaga     93    11         UCLA     90\n3 2021     5     1  Baylor     78     2      Houston     59\n4 2021     4     2 Houston     67    12 Oregon State     61\n5 2021     4     1  Baylor     81     3     Arkansas     72\n6 2021     4    11    UCLA     51     1     Michigan     49\n```\n:::\n:::\n\n\n## chat gpt code\n\n1. Load the data into R and into training and testing sets.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nncaa_data <- march_madness_data %>%\n  filter(YEAR == c(\"2021\", \"2019\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `filter()`.\nℹ In argument: `YEAR == c(\"2021\", \"2019\")`.\nCaused by warning in `YEAR == c(\"2021\", \"2019\")`:\n! longer object length is not a multiple of shorter object length\n```\n:::\n\n```{.r .cell-code}\n# Split data into training and testing sets\nset.seed(123)\ntrain_index <- sample(nrow(ncaa_data), size = round(0.7 * nrow(ncaa_data)), replace = FALSE)\ntrain_data <- ncaa_data[train_index, ]\ntest_data <- ncaa_data[-train_index, ]\n```\n:::\n\n\n2. Use `rpart` to build a decision tree based on test data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build decision tree using rpart\nncaa_tree <- rpart(WTEAM ~ ., \n                   data = train_data, \n                   method = \"class\")\n```\n:::\n\n\n\n\n\n3. Evaluate the accuracy of the decision tree using the testing data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predict the winner of each game in the testing data using the decision tree\ntest_data$predicted_winner <- predict(\n  ncaa_tree, \n  newdata = test_data, \n  type = \"class\")\n\n# Calculate the accuracy of the predictions\naccuracy <- sum(test_data$predicted_winner == test_data$Winner) / nrow(test_data)\n```\n:::\n\n\n\n4. Use decision tree to make predictions for future games. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data for upcoming games\n# upcoming_games <- read.csv(\"upcoming_games.csv\")\n\n# Predict the winner of each upcoming game using the decision tree\n# upcoming_games$predicted_winner <- predict(ncaa_tree, newdata = upcoming_games, type = \"class\")\n```\n:::\n\n\n\n# Chat gpt example decision tree code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(rpart)\nlibrary(rpart.plot)\n\n# Load example data\ndata(iris)\n\n# Create decision tree using rpart\niris_tree <- rpart(Species ~ ., data = iris)\n\n# Plot the decision tree\nrpart.plot(iris_tree)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}