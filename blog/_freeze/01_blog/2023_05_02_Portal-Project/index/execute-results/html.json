{
  "hash": "397e60abcd6b0a2a8f2f6e882fee73f8",
  "result": {
    "markdown": "---\ntitle: \"The Portal Project (Week 18)\"\ndate: \"2023-05-02\"\ncategories: [\"#TidyTuesday\", R, \"Data Visuals\"]\ndraft: false\ntoc: true\n---\n\n\nIn this post, I will guide you through the process of creating a data visualization for the Portal Project's #TidyTuesday[^1] challenge in Week 18 of 2023.\n\n[^1]: [#tidytuesday](https://github.com/rfordatascience/tidytuesday)\n\n![](img1.png)\n\n# Introduction\n\n> The Portal Project is a long-term ecological study being conducted near Portal, AZ. Since 1977, the site has been used to study the interactions among rodents, ants and plants and their respective responses to climate. To study the interactions among organisms, they experimentally manipulate access to 24 study plots. This study has produced over 100 scientific papers and is one of the longest running ecological studies in the U.S.[^2]\n\n[^2]: [Portal Project](https://portal.weecology.org/)\n\nThis post will follow a similar format to what is presented in Rohan Alexander's Book [Telling Stories with Data](https://tellingstorieswithdata.com/). We will start with a plan of how the data and graph should look. Then simulate the data and visualization. Next we will acquire and clean the data, explore the data by creating the visual, and lastly share the data by saving it.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Preamble\"}\n#### Preamble ####\n# Purpose: Read in data from csv and make a\n# graph of swollen testicles by month and year\n# of the AZ Merriam Kangaroo Rat.\n# Author: Randi Bolt\n# Email: randibolt93@gmail.com\n# Date: 2 May 2023\n# Prerequisites: -\n#### Workspace setup ####\nbase::library(tidyverse) # A collection of data-related packages\n```\n:::\n\n\n# 1. Plan\n\nTo start, we need to think about two things: What the **data** should look like, and what the **graph** should look like.\n\n::: columns\n::: {.column width=\"49%\"}\n### üêÄ Simulated Data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Simulted Data\"}\n#### Simulated Data ####\n# Includes:\n# - years between 1978 and 2022\n# - months between 1 and 12\n# - n between 1 and 20\ndf <- base::data.frame(\n  \"year\" = base::sample(\n    c(1978:2022),\n    size = 399,\n    replace = TRUE),\n  \"month\" = base::sample(\n    c(1,2,3,4,5,6,7,8,9,10,11,12),\n    size = 399,\n    replace = TRUE),\n  \"n\" = base::sample(\n    c(1:20),\n    size = 399,\n    replace = TRUE\n  ))\nutils::head(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  year month  n\n1 2017     9 15\n2 2009    11 17\n3 1993    11 10\n4 2022     6  7\n5 1981     6  6\n6 1981     7  3\n```\n:::\n:::\n\n\n### üêÄ Graph Function\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Graphing Function\"}\n#### Graph Function ####\n# A function that takes in a df,\n# and outputs a graph.\n# \n# @param df is a dataframe with that \n# include month, year, and n. \n# @return vis is a graph. \n#\n# Parts:\n# 1. Mapping \n# 2. Graph Geometries \n# 3. Facet Wrap\nvis <-  function(df){\n  vis <- ggplot2::ggplot(\n    df, \n    # 1. Mapping\n    mapping = ggplot2::aes(\n      x = month,\n      y = n,\n      group = year)\n    ) +\n  # 2. Graph geoms\n  ggplot2::geom_point() +\n  ggplot2::geom_line() +\n  # 3. Facet Wrap\n  ggplot2::facet_wrap(~year)\n  return(vis)\n}\n```\n:::\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n## Graph\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Show Code for Sample Graph\"}\nvis(df)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/create simple graph-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n# 2. Simulate\n\nSince we've already simulated the data, and what we want our graph to look like above in the plan. All that's left to simulate is a style function for our graph. \n\n::: columns\n::: {.column width=\"49%\"}\n### üêÄ Style Function\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Style Function\"}\n#### Style Function ####\n# A function that inputs a graph, \n# and outputs a stylized graph. \n# \n# @param vis is a graph.\n# @return sty is a stylized graph.\n# \n# Parts: \n# 1. Title, subtitles, labels, caption, alt text.\n# 2. X and Y scale.\n# 3. Add values above points.\n# 4. Format\nsty <- function(vis){\n  sty <- vis +\n    # 1. Title, subtitles, labels, caption, alt text\n    ggplot2::ggtitle(\"Swollen Testicles of Merriam's Kangaroo Rat by Month and Year near Portal, AZ\") +\n    ggplot2::labs(\n      subtitle = \"The Portal Project is a long-term ecological study being conducted near Portal, AZ.\\nThis chart shows the number of Merriam's Kangaroo Rat with swollen testicles by month and year over the past 45 years.\",\n      x = \"Month\",\n      y = \"Number of Rodents\",\n      caption = \"Graph by Randi Bolt \\n Data from #TidyTuesday and Portal Project\",\n      alt = \"This is a point and line graph showing swollen testicles of Merriam's Kangaroo Rat by months and year over the past 45 years. The x axis shows months, and the y axis shows number of rodents.\") +\n    \n    # 2. x and y scale \n    ggplot2::scale_x_continuous(\n      breaks = seq(1,12,1)) + \n    ggplot2::scale_y_continuous(\n      breaks = seq(0,60,10)) +\n    \n    # 3. add values above points\n    ggplot2::geom_text(\n      ggplot2::aes(\n        label = n,\n        vjust = -0.2)) +\n    \n    # 4. format\n    ggplot2::theme(\n      # title\n      plot.title = element_text(\n        size = 16,\n        face = \"bold\",\n        color = \"#232741\",\n        hjust = .5),\n      # subtitle\n      plot.subtitle = element_text(\n      size = 12,\n      hjust = .5,\n      color = \"#232741\"),\n    # plot background\n    plot.background = element_rect(\n      fill = \"#C58C60\"),\n    # graph background\n    panel.background = element_rect(\n      fill = \"#D3DAD9\"),\n    # x and y axis lables\n    axis.title = element_text(\n      size = 14, \n      color = \"#232741\"),\n    # legend background\n    legend.background = element_rect(\n      fill = \"#C58C60\"),\n    # facet graph titles\n    strip.background = element_rect(\n      fill = \"#A76858\"))\n  return(sty)\n}\n```\n:::\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n## Stylized Graph\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Show Code for Stylized Graph\"}\nsty(vis(df)) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/style graph-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n# 3. Aquire\n\nNow to read in the data, and create a cleaning function.\n\n::: columns\n::: {.column width=\"49%\"}\n### üêÄ Read Data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Reading in the Data\"}\n#### Read in the data ####\nsurveys <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/surveys.csv')\n```\n:::\n\n\n### üêÄ Cleaning Function\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code for Cleaning Function\"}\n#### Cleaning Function ####\n# A function that takes in a df\n# and returns a clean df. \n#\n# @param data is a df.\n# @param clean is a clean df.\n#\n# Parts: \n# 1. Select\n# 2. Filter \n# 3. Group\n# 4. Reframe\n# 5. Unique \nclean <- function(data){\n  clean <- data %>%\n    # 1. Select \n    dplyr::select(\n      month, \n      year, \n      sex, \n      testes, \n      species) %>%\n    # 2. Filter \n    dplyr::filter(\n      sex == \"M\",\n      species == \"DM\",\n      testes == \"S\") %>%\n    # 3. Group\n    dplyr::group_by(\n      year, \n      month) %>%\n    # 4. Refremae\n    dplyr::reframe(\n      month = month,\n      year = year,\n      n = n()) %>%\n    # 5. unique \n    base::unique()\n  return(clean)\n}\n```\n:::\n\n:::\n\n::: {.column width=\"2%\"}\n:::\n\n::: {.column width=\"49%\"}\n## Clean Data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Show Code for Data Cleaning\"}\nutils::head(clean(surveys))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 3\n   year month     n\n  <dbl> <dbl> <int>\n1  1978     2     2\n2  1978     3     1\n3  1978     4     2\n4  1978     5     4\n5  1978     6     2\n6  1978     7     4\n```\n:::\n:::\n\n:::\n:::\n\n# 4. Explore\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Show Code for Finished Visual\"}\nsty(vis(clean(surveys)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/create tt visual-1.png){width=672}\n:::\n:::\n\n\n# 5. Share\n\nLastly to save the graph as a png and share this post!\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code to save plot\"}\nggplot2:ggsave(\n  \"img1.png\", \n  width = 30, \n  height = 20, \n  units = \"cm\")\n```\n:::\n\n\nThanks for reading üòÅ‚ú®\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}