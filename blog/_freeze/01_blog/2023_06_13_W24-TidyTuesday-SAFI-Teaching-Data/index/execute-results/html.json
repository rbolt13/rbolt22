{
  "hash": "68eaee649f8b7f2c2dcef9e321615cc6",
  "result": {
    "markdown": "---\ntitle: \"Week 24 Tidy Tuesday: SAFI Teaching Data\"\ndate: \"2023-06-13\"\ncategories: [\"#TidyTuesday\", R]\ndraft: false\n---\n\n\nExplore a rich data set focused on understanding the role of farmer-led irrigation in Africa with my week 24 [#TidyTuesday](https://github.com/rfordatascience/tidytuesday) submission. In this post my visual delves into the relationship between livestock ownership and the number of rooms in a household. \n\n# SAFI Data \n\nThe data this week comes from the [SAFI (Studying African Farmer-Led Irrigation) survey](https://datacarpentry.org/socialsci-workshop/data/), a subset of the data used in the [Data Carpentry Social Sciences workshop](https://datacarpentry.org/socialsci-workshop/). So, if you're looking how to learn how to work with this data, lessons are already available! Data is available through [Figshare](https://figshare.com/articles/dataset/SAFI_Survey_Results/6262019).\n\nCITATION: Woodhouse, Philip; Veldwisch, Gert Jan; Brockington, Daniel; Komakech, Hans C.; Manjichi, Angela; Venot, Jean-Philippe (2018): SAFI Survey Results. doi:10.6084/m9.figshare.6262019.v1\n\n> SAFI (Studying African Farmer-Led Irrigation) is a currently running project which is looking at farming and irrigation methods. This is survey data relating to households and agriculture in Tanzania and Mozambique. The survey data was collected through interviews conducted between November 2016 and June 2017 using forms downloaded to Android Smartphones. The survey forms were created using the ODK (Open Data Kit) software via an Excel spreadsheet. The collected data is then sent back to a central server. The server can be used to download the collected data in both JSON and CSV formats. This is a teaching version of the collected data that we will be using. It is not the full dataset.\n\n> The survey covered such things as; household features (e.g. construction materials used, number of household members), agricultural practices (e.g. water usage), assets (e.g. number and types of livestock) and details about the household members.\n\n> The basic teaching dataset used in these lessons is a subset of the JSON dataset that has been converted into CSV format.\n\n![](plot.png)\n\n# Code \n\nThis week in the `index.R` file I tried using the `tidytuesdayR` package and the variable `week <- c(24)` in attempt to streamline updating the index file for future weeks. This project retains its core components of cleaning, visualizing, and styling, while the index.R file handles data loading, file execution, and the generation of a data visualization.\n\n::: {.panel-tabset}\n\n### Cleaning\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\n#### Load Packages ####\nbase::library(dplyr)\nbase::library(magrittr)\n\n#### Cleaning Function ####\nclean <- function(df){\n  # extract data from list\n  extracted_df <- df[[1]]\n  clean_df <- extracted_df %>% \n    dplyr::count(rooms, liv_count)\n  return(clean_df)\n}\n```\n:::\n\n\n### Visualize\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\n#### Load Packages ####\nbase::library(ggplot2)\n\n#### Visual Function ####\nvis <- function(clean_df){\n  vis <- ggplot2::ggplot(\n    clean_df,\n    ggplot2::aes(x = rooms, y = liv_count, fill = n)) +\n    geom_tile()\n  return(vis)\n}\n```\n:::\n\n\n### Style\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\n#### Load Packages ####\nbase::library(\"ggplot2\")\nbase::library(\"showtext\")\n\n#### Load Fonts ####\nsysfonts::font_add_google(\"Judson\", \"font\")\nshowtext::showtext_auto()\n\n#### Load Colors ####\ncol1 <- \"white\"\ncol2 <- \"#3E3D53\"\ncol3 <- \"#2C6E63\"\ncol4 <- \"#FCE100\"\n\n#### Style Function ####\nsty <- function(vis){\n  sty <- vis +\n    # labs\n    ggplot2::labs(\n      title = \"Relationship Between Live Stock Ownership and Number of Rooms in Household\",\n      subtitle = \"This subset of the SAFI (Studying African Farmer-Led Irrigation) data shows that of the 131 people surveyed most lived in a house with 1 room,\\n and had 1 cattle. There is no obvious evidence to indicate that the number of rooms in a home is related to the number of live stock owned.\",\n      caption = \"Randi Bolt - June 2023 \\n#TidyTuesday: SAFI Data - June 2017\",\n      x = \"Rooms\",\n      y = \"Live Stock\",\n      fill = \"Surveyed\")  +\n    # add numbers in boxes\n    ggplot2::geom_text(\n      ggplot2::aes(label = n),\n      color = col1,\n      size = 12,\n      family = \"font\") + \n    # scale color\n    ggplot2::scale_fill_gradient(low = col3, high = col4) +\n    # Axis Breaks \n    ggplot2::scale_x_continuous(\n      breaks = seq(1,8,1)) + \n    ggplot2::scale_y_continuous(\n      breaks = seq(1,5,1)) + \n # theme\n    ggplot2::theme(\n      plot.title = element_text(\n        size = 30,\n        family = \"font\",\n        face = \"bold\",\n        hjust = 0,\n        color = col1),\n      plot.subtitle = element_text(\n        size = 18,\n        family = \"font\",\n        hjust = 0,\n        color = col1),\n      plot.caption = element_text(\n        size = 12,\n        family = \"font\",\n        hjust = 1,\n        color = col1),\n      axis.title = element_text(\n        size = 24, \n        family = \"font\",\n        color = col1),\n      axis.text = element_text(\n        size = 18, \n        family = \"font\",\n        color = col1),\n      legend.title = element_text(\n        size = 24,\n        family = \"font\",\n        color = col1),\n      legend.text = element_text(\n        size = 16,\n        family = \"font\",\n        color = col1),\n      plot.background = element_rect(fill = col2),\n      panel.background = element_rect(fill = col2),\n      panel.grid.major.x = element_blank(),\n      panel.grid.major.y = element_blank(),\n      panel.grid.minor.y = element_blank(),\n      legend.background = element_rect(fill = col2))\n  return(sty)\n}\n```\n:::\n\n\n### index.R\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\nweek <- c(\"24\")\n#### Load Packages ####\nbase::library(tidyverse)\nbase::library(tidytuesdayR)\n\n#### Load Data ####\ntt_data <- tidytuesdayR::tt_load(2023, week = base::as.integer(week))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tDownloading file 1 of 1: `safi_data.csv`\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\n#### Clean Data ####\nclean_data <- clean(tt_data)\n\n#### Create Data Visual ####\nvis_data <- vis(clean_data)\n\n#### Style Data Visual ####\nsty_vis <- sty(vis_data)\n\n#### Save Plot ####\nggsave(\n  \"plot.png\", \n  width = 30, \n  height = 20, \n  units = \"cm\",\n  dpi = 150)\n```\n:::\n\n\n\n### Links\n\n[Week 24 Submission](https://github.com/rbolt13/tidytuesday/tree/main/2023/week_24) \n\n[TidyTuesday Repository](https://github.com/rbolt13/tidytuesday).\n\n\n:::\n\n# Quick Notes\n\n* I used `ggplot2::geom_tile()` to create the heat map graph.\n\n* I used `ggplot2::scale_fill_gradient()` to assign a \"high\" color and \"low\" color, but it might make the graph easier to read if I picked 5 colors instead.\n\n* I would have liked white horizontal lines on this graph, but was only getting the vertical lines to show. Will need to do more research on this in future weeks. \n\n* When I use the showtext package to assign fonts to the text on my graphs and go to save them as a .png file, if I don't update the `dpi = value` (dots per inch) then I have huge spaces in between lines of text. I found that the larger the dpi value the more space there is between lines of text. 150 dpi seems to be a good dpi for this graph.\n\n* Troubleshooting problems with the tidytuesdayR package has seemed to be more time consuming than the original iterations of this project that just copyed and loaded the .csv link. I am still debating if using this package actually streamlines project iteration. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}