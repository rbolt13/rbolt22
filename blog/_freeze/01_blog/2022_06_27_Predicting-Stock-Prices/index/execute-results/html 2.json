{
  "hash": "299b3c44223dbede989de3d09c949b77",
  "result": {
    "markdown": "---\ntitle: \"Predicting Stock Prices\"\ndate: \"2022-06-27\"\ncategories: [R]\ntoc: true\n---\n\n\nThis post uses the R packages quantmod and prophet to predict stock prices for [MicroVision](https://www.microvision.com/).\n\n![](../../00_img/stock.jpeg)\n\n\n::: {.cell}\n\n:::\n\n\n# `1.` Background\n\nDuring the summer of 2021 I took a  business fiance class, and learned a lot about stocks and the stock market. Most of my projects centered around [MicroVision](https://www.microvision.com/) which is a research and development company creating the newest Lidar technology for autonomous vehicles. \n\n# `2.` Set Up\n\nThis analysis will use three packages:\n\n- [tidyverse](https://github.com/tidyverse): to clean the data\n\n- [quantmod](https://github.com/joshuaulrich/quantmod): to get data from yahoo finace\n\n- [prophet](https://github.com/facebook/prophet): to make predictions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Libraries \nlibrary(quantmod)\nlibrary(tidyverse)  \nlibrary(prophet) \n```\n:::\n\n\nThere are a few places that quantmod can pull data from, but the default which I will be using is [Yahoo Finace](https://finance.yahoo.com/). You can specify this with  `src=\"yahoo\"`. Use `?getSymbols` for more information on this functions parameters. \n\nNote: If you are having issues with quantmod try re-installing it. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantmod::getSymbols(\"MVIS\", src=\"yahoo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MVIS\"\n```\n:::\n:::\n\n\n# `3.` quantmod Functions\n\nRight away we can use quantmod functions like `chartSeries()` to look at various plots of MicroVision stocks. Below are a few examples showing various subsets of data from 2019 - 2022. As well as different types such as bar, line, candlesticks, and auto. The last graph also includes `addBBands()`, `addMomentum()` and `addROC()`. Use `?` with any of these functions to find out more details on their parameters. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nchartSeries(MVIS, type = \"candlesticks\", subset = '2019-09-01::2019-12-31', theme= chartTheme('white'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/quantmod-1.png){width=672}\n:::\n\n```{.r .cell-code}\nchartSeries(MVIS, type = \"bar\", subset = '2020', theme= chartTheme('white'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/quantmod-2.png){width=672}\n:::\n\n```{.r .cell-code}\nchartSeries(MVIS, type = \"line\", subset = '2021', theme= chartTheme('white'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/quantmod-3.png){width=672}\n:::\n\n```{.r .cell-code}\nchartSeries(MVIS, type = \"auto\", subset = '2022', theme= chartTheme('white'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/quantmod-4.png){width=672}\n:::\n\n```{.r .cell-code}\nchartSeries(MVIS, type = \"auto\", subset = '2022-03', theme= chartTheme('white'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/quantmod-5.png){width=672}\n:::\n\n```{.r .cell-code}\naddBBands(n=20,sd=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/quantmod-6.png){width=672}\n:::\n\n```{.r .cell-code}\naddMomentum(n=1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/quantmod-7.png){width=672}\n:::\n\n```{.r .cell-code}\naddROC(n=7)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/quantmod-8.png){width=672}\n:::\n:::\n\n\n# `4.` Tidy Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(MVIS)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           MVIS.Open MVIS.High MVIS.Low MVIS.Close MVIS.Volume MVIS.Adjusted\n2007-01-03     25.68     26.40    24.16      24.56      106750         24.56\n2007-01-04     25.76     30.48    25.44      29.92      703538         29.92\n2007-01-05     30.00     31.44    28.16      29.60      333425         29.60\n2007-01-08     31.92     32.64    30.24      31.44      341050         31.44\n2007-01-09     30.96     31.20    29.20      29.36      242725         29.36\n2007-01-10     29.68     30.80    27.76      29.68      169038         29.68\n```\n:::\n:::\n\n\nYou might notice that the date column doesn't have a column name, and that is because it is being read as the names of the rows. To change this I will first need to change the data into a data frame, and then change the row names into a column with the function `rownames_to_column()`. It is then important to assign the date series column the name `ds`. That is how the prophet package will recognize it, so this will save us the step of renaming this later on. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nMVIS <- base::data.frame(MVIS)\nMVIS <- tibble::rownames_to_column(MVIS, \"ds\")\nutils::head(MVIS)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          ds MVIS.Open MVIS.High MVIS.Low MVIS.Close MVIS.Volume MVIS.Adjusted\n1 2007-01-03     25.68     26.40    24.16      24.56      106750         24.56\n2 2007-01-04     25.76     30.48    25.44      29.92      703538         29.92\n3 2007-01-05     30.00     31.44    28.16      29.60      333425         29.60\n4 2007-01-08     31.92     32.64    30.24      31.44      341050         31.44\n5 2007-01-09     30.96     31.20    29.20      29.36      242725         29.36\n6 2007-01-10     29.68     30.80    27.76      29.68      169038         29.68\n```\n:::\n:::\n\n\nIt will also be important that the ds column is read as date values instead of character value. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nMVIS <- MVIS %>% \n  dplyr::mutate(ds = as.Date(ds))\nutils::head(MVIS)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          ds MVIS.Open MVIS.High MVIS.Low MVIS.Close MVIS.Volume MVIS.Adjusted\n1 2007-01-03     25.68     26.40    24.16      24.56      106750         24.56\n2 2007-01-04     25.76     30.48    25.44      29.92      703538         29.92\n3 2007-01-05     30.00     31.44    28.16      29.60      333425         29.60\n4 2007-01-08     31.92     32.64    30.24      31.44      341050         31.44\n5 2007-01-09     30.96     31.20    29.20      29.36      242725         29.36\n6 2007-01-10     29.68     30.80    27.76      29.68      169038         29.68\n```\n:::\n:::\n\n\nLastly to create a data frame for the prophet package with just the date and closing costs. It is important to rename the closing cost column to `y`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CLosing Data \nMVIS_close <- base::data.frame(ds = MVIS$ds, y = MVIS$MVIS.Close)\nutils::head(MVIS_close)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          ds     y\n1 2007-01-03 24.56\n2 2007-01-04 29.92\n3 2007-01-05 29.60\n4 2007-01-08 31.44\n5 2007-01-09 29.36\n6 2007-01-10 29.68\n```\n:::\n:::\n\n\n# `5.` Predict Function\n\n uses various model fitting functions to predict future results.\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}