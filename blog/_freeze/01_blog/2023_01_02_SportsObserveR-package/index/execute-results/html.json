{
  "hash": "d4f73d85e220ce757bca9cd88d685571",
  "result": {
    "markdown": "---\ntitle: \"SportsObserveR - Part 2: Creating a R Packege\"\nauthor: \"Randi Bolt\"\ndate: \"2023-01-02\"\ncategories: [Package Building, R, NBA]\ntoc: true\ndraft: true\n---\n\n\nIn this tutorial I will be taking the functions I created in my previous post, [Creating Functions in R to Scrape NBA Data](http://localhost:5293/01_blog/2022_11_07_NBA-functions/), and putting them in my own package, [SportsObserveR](). \n\n**NEED TO UPDATE PICTURE (removing all sports but basketball)**\n\n![](../../00_img/SportsObserveR.png)\n\n# `0.` Introduction\n\n\n\n# `1.` Initial Set Up  \n\nStart in the **Terminal** and move to the folder where you want want to build your package. For me, I organize my projects by year, so I would use the following command: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncd Desktop/2023\n```\n:::\n\n\nFrom this folder you then open R in the terminal: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nR()\n```\n:::\n\n\nAnd load the following libraries: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools)\n```\n:::\n\n\nIf you do not have these packages installed, you can use the following code to install them: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\", \"devtools\")\n```\n:::\n\n\nUse the `create_package()`, and select Yes (or Definitely) to create a package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_package(\"SportsObserveR\")\n```\n:::\n\n\nThen use `q()` to quit R, and `y` to save.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq()\n```\n:::\n\n\n# `2.` Github Repository \n\nOpen your [Github](https://github.com/) and create a repository with the same name as your project. From the **Terminal** type in the following commands (similar to what is given on your Github page) to connect your project folder to your Github repo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit init\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"my first commit\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit branch -M main\n```\n:::\n\n\nNote: You will want to replace 'rbolt13' with your own username. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit remote add origin https://github.com/rbolt13/SportsObserveR.git\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push -u origin main\n```\n:::\n\n\nThen refresh your github repo page to verify that your files have been successfully uploaded. \n\n# `3.` Creating the First Function\n\nUsing **R Studio Console** (or in your **terminal**, but opening `R` first) reload the usethis and devtools packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools)\n```\n:::\n\n\nThe function to create a function in r is `use_r()`, and then `load_all()`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_r(\"scrape.team.stats\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload_all()\n```\n:::\n\n\nThen use the `check()` function to look at any potential errors. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nThere are probably going to be a few errors, but they can be easily fixed. For starters open and update the **description** file. Then use the the `use_mit_license()` function to update the license and check your project again for errors. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_mit_license()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nEverything should come back green, which means it is time to create the first function in the R file that is named \"scrape.team.stats.R\". Notice that below have modified this function somewhat from the original post to be able to access more sports data than just the NBA. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Scrape Team Data\n#'\n#'@import rvest \n#'@import magrittr\n#'\n#'@descritpion This function scrapes team data off of sports-reference.com.\n#'\n#'@param sport is a string that represents the sport.\n#'@param slug is a string that corresponds to the sports team.\n#'@param year is \n#'@param stats_tb\n#'\n#'@return\n#'@export\n#'\n#'@examples\n#'\n\nscrape_team_data <- function(slug, year, stats_tb){\n    \"\n  A function that returns a data frame of team statistics. \n  \n  @param slug is string of three letters that represents the teams url. \n  @param year is a string that corresponds to the NBA finals.\n  @param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced\n  \n  @return a df of team statistics\n  \"\n  # define team page URL\n  url <- base::paste0(\"https://www.basketball-reference.com/teams/\",\n                slug,\"/\", year, \".html\")\n  \n  # Read stats table\n  stats_tb <- url %>%\n  read_html %>%\n  html_node(stats_tb) %>% \n  html_table()\n  \n  # Rename Column 2 to Name \n  base::names(stats_tb)[2] <- \"Name\"\n  \n  # Replace NA values with 0 (for stat functions)\n  stats_tb[base::is.na(stats_tb)] <- 0\n  \n  # make data frame\n  df <- base::data.frame(stats_tb)\n  base::return(df)\n  }\n```\n:::\n\n\nNow save this file, and in the **R Studio Console** type `document()` to create documentation for this function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndocument()\n```\n:::\n\n\nThen check that it works!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?scrape.team.stats.R\n```\n:::\n\n\nIf everything looks good, it is time to push this code to github again. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"Created first function: scrape.team.stats\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n# `4.` Creating Tests\n\nNow to build tests for our code which is intended to detect and protect against bugs. To do this use the function `use_testthat()`, and `use_test()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_testthat()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_test(\"scrape.team.stats\")\n```\n:::\n\n\nA simple test ...\n\nfor our code could be if there is no data...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# test code\n```\n:::\n\n\nCheck again for errors: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nAnd if everything still looks green, push to Github again. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"Created test for scrape.team.stats\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n# `5.` Create README\n\nTo create a README file you can use the function `use_readme_rmd()` which created a README.Rmd file that allows you to code in R, and come with a lot of information already pre-filled in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_readme_rmd()\n```\n:::\n\n\nAs a starter readme, I used the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read me\n```\n:::\n\n\nYou'll want the README file to in markdown, so use the function `build_readme()` to render the file as such. Note that you will need to use this function every time you update the .Rmd. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_readme()\n```\n:::\n\n\nThen ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"Created README\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n# `6.` Add More Functions\n\nComing soon...\n\n\n::: {.cell}\n\n:::\n\n\nNote to self: \n\nChange [Creating Functions in R to Scrape NBA Data](http://localhost:5293/01_blog/2022_11_07_NBA-functions/) title to SportsObserveR - Part 1: Web Scraping Functions. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}