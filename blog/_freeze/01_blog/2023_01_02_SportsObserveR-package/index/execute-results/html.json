{
  "hash": "56822d65b4d7738cf18225b2ba2ba81f",
  "result": {
    "markdown": "---\ntitle: \"SportsObserveR - Part 2: Creating a Package in R\"\ndate: \"2023-01-02\"\ncategories: [Package Building, R, NBA, SportsObserveR]\ntoc: true\ndraft: false\n---\n\n\nIn this tutorial I will be taking the functions I created in my previous post, [SportsObserveR - Part 1: Scraping Functions](https://www.rbolt.me/01_blog/2022_11_07_nba-functions/), and using them to create my own package, [SportsObserveR](https://github.com/rbolt13/SportsObserveR). \n\n![](../../00_img/SportsObserveR-NBA.png)\n\n# `0.` Introduction\n\nRecently I have been looking to create more mathematical models of NBA statistics. However the process of scrapping and downloading data has become more tedious as the models scale. To save time, and lines of code I am creating a package in R to do a lot of the web scraping heavy lifting. \n\nTo start I will be creating two functions:\n\n1. Scrape NBA Team Data\n\n2. Scrape NBA Player Data\n\n## `0.1` Technologies\n\nTo build a package in R you need three things:\n\n1. [R](https://ftp.osuosl.org/pub/cran/) installed on your computer. \n\n2. A coding editor such as [R Studio](https://posit.co/download/rstudio-desktop/), or [Sublime](https://www.sublimetext.com/).\n\n3. A [bash](https://formulae.brew.sh/formula/bash) terminal.\n\n# `1.` Initial Set Up  \n\nStart in a **Bash Terminal** and move to the folder where you want want to build your package. For me, I organize my projects by year, so I would use the following command: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncd Desktop/2023\n```\n:::\n\n\nFrom this folder you then use the command `R` to open R in the terminal. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nR\n```\n:::\n\n\nWith R open load the following libraries: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools)\n```\n:::\n\n\nIf you do not have these packages installed, you can use the following code to install them: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\", \"devtools\")\n```\n:::\n\n\nNow use the `create_package()` function to create a package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_package(\"SportsObserveR\")\n```\n:::\n\n\nThen use `q()` to quit R, and `y` to save.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq()\n```\n:::\n\n\nCheck that a \"SportsObserveR\" folder now exists within your original directory with `ls` for \"list\". \n\n\n::: {.cell}\n\n```{.r .cell-code}\nls\n```\n:::\n\n\nThen move into that directory. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncd SportsObserveR\n```\n:::\n\n\n# `2.` Github Repository \n\nOpen your [Github](https://github.com/) and create a repository with the same name as your project. From the **Bash Terminal** type in the following commands (similar to what is given on your Github page) to connect your project folder to your Github repo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit init\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"my first commit\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit branch -M main\n```\n:::\n\n\nNote: You will want to replace 'rbolt13' with your own username. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit remote add origin https://github.com/rbolt13/SportsObserveR.git\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push -u origin main\n```\n:::\n\n\nRefresh your github repo page to verify that your files have been successfully uploaded. \n\n# `3.` Creating the First Function\n\nUsing **R Studio Console** (or opening `R` first in your **bash terminal**) reload the usethis and devtools packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools)\n```\n:::\n\n\nTo create a function in r use `use_r()`, and then `load_all()`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_r(\"scrape_nba_team_stats\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload_all()\n```\n:::\n\n\nNow use the `check()` function to look at any potential errors. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nThere will probably be one warning about a Non-standard license specification (see image below). \n\n![](../../00_img/mit-license-warning.PNG)\n\n\nUse the `use_mit_license()` function to update the license and check your project again for errors. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_mit_license()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nEverything should be green, which means it is time to create the first function. In the R file named \"scrape_nba_team_stats.R\" copy the code below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Scrapes NBA team stats tables off basketball-reference.com.\n#'\n#'@import rvest \n#'@import magrittr\n#'\n#'@param slug is a char string that corresponds to the sports team.\n#'@param year is a char string that corresponds to the playoff year. \n#'@param stats_tb is a char string that corresponds to the statistics table such as #per_game, #totals, #per_36_minutes, and #advanced.\n#'\n#'@return a data frame of statistics for a specific NBA team. \n#'@export\n#'\n#'@examples\n#'scrape_nba_team_stats(\"CHI\", \"1998\",\"#totals\")\nscrape_nba_team_stats <- function(slug, year, stats_tb){\n  # define team page URL\n  url <- base::paste0(\"https://www.basketball-reference.com/teams/\",\n                      slug,\"/\", year, \".html\")\n  \n  # Read stats table\n  stats_tb <- url %>%\n    read_html %>%\n    html_node(stats_tb) %>% \n    html_table()\n  \n  # Rename Column 2 to Name \n  base::names(stats_tb)[2] <- \"Name\"\n  \n  # Replace NA values with 0 (for stat functions)\n  stats_tb[base::is.na(stats_tb)] <- 0\n  \n  # make data frame\n  df <- base::data.frame(stats_tb)\n  base::return(df)\n}\n```\n:::\n\n\nNow save this file, and in the **R Studio Console** type `document()` to create documentation for this function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndocument()\n```\n:::\n\n\nCheck that the documentation works.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?scrape_nba_team_stats()\n```\n:::\n\n\nRun one more `check()` for good measure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nIf everything looks good, from the **Bash Terminal**  push this code to github. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"Created first function\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n# `4.` Create raw-data \n\nIn the **R Studio Console** use the `use_data_raw()` function to create a raw-data folder that includes a `DATASET.R` file. In the future I want to use this data to test my functions, as well as create complimentary data to use with the SportsObserveR package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_data_raw()\n```\n:::\n\n\nFrom here save the total statistics for the 1998 Chicago bulls, and the check to see if the data looks correct. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbulls_totals <- scrape_nba_team_stats(\"CHI\",\n                                      \"1998\",\n                                      \"#totals\")\n```\n:::\n\n\nNow save this data as a .csv into the raw-data folder. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(bulls_totals,\n          \"data_raw/1998_Bulls_Totals.csv\")\n```\n:::\n\n\nThen update the DATASET.R file, as shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_data(\"1998_Bulls_Totals.csv\")\n```\n:::\n\n\nRun another check:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nIf everything looks good, it is time to push this code to github again. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"Created data_raw\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n# `5.` Creating Tests\n\nNow to build tests which are intended to detect and protect against bugs. To do this, in the **R Studio Console** use the function `use_testthat()`, and `use_test()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_testthat()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_test(\"scrape_nba_team_stats\")\n```\n:::\n\n\nI am still learning how to create god test, but for starters I want to make sure that our data is returning a list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"Returns that typeof is list.\", {\n  expect_equal(typeof(scrape_nba_team_stats(\"CHI\", \"1998\",\"#totals\")),\n               \"list\")\n})\n```\n:::\n\n\nCheck for errors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nIf everything looks green, from the **Bash Terminal** push to Github. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"Created test for scrape_nba_team_stats\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n# `6.` Update Description\n\nUpdate your description file by filling out the appropriate information for the spots given. Be sure to include `Imports: rvest, magrittr`, see my example below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPackage: SportsObserveR\nTitle: Scrape Sports Statistics Off Sports-Reference.com\nVersion: 0.0.0.9000\nImports: rvest, magrittr\nAuthors@R: \n    person(\"Randi\", \"Bolt\", , \"randibolt93@gmail.com\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"YOUR-ORCID-ID\"))\nDescription: This package is made up of many functions that scrape data off sports-reference.com.\nLicense: MIT + file LICENSE\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\nBugReports: https://github.com/rbolt13/SportsObserveR/issues\nSuggests: \n    testthat (>= 3.0.0)\nConfig/testthat/edition: 3\n```\n:::\n\n\nIn the **R Studio Console** run another check.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nIf everything looks good, from the **Bash Terminal** push to github.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"Updated Description\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n# `7.` Create README\n\nTo create a README file where you can show code examples in R, in the **R Studio Console** use the `use_readme_rmd()` function. This file will come with a lot of information already pre-filled in.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_readme_rmd()\n```\n:::\n\n\nFill out the appropriate information such as the goal of the package, how to install it, and some examples on how to use it. Check out my [readme](https://github.com/rbolt13/SportsObserveR) if you need help or inspiration. \n\nNext to create a README file in markdown, use the function `build_readme()` to render the .rmd file as such. Note that you will need to use this function every time you update the .Rmd, because your github will only display the README.md file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_readme()\n```\n:::\n\n\nIf everything looks good, from the **Bash Terminal** push again to github. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"Created README\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n# `8.` Add Player Statistics Function\n\nNow lets add one more function, `scrape_nba_player_stats` by repeating steps 3, 5, and 7. \n\n## `8.1` Creating the Function \n\nFrom the **R Studio Console**, create the function file, and load it into your enviroment. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_r(\"scrape_nba_player_stats\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload_all()\n```\n:::\n\n\nIn the R file named \"scrape_nba_player_stats.R\" copy the code below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Scrapes NBA player stats tables off basketball-reference.com.\n#'\n#'@import rvest \n#'@import magrittr\n#'\n#'@param name is a char string that corresponds to the players name.\n#'@param stats_tb is a char string that corresponds to the statistics table such as #per_game, #totals, #per_36_minutes, and #advanced.\n#'\n#'@return a data frame of statistics for a specific NBA player. \n#'@export\n#'\n#'@examples\n#'scrape_nba_player_stats(\"Allen Iverson\", \"#per_game\")\nscrape_nba_player_stats <- function(name, stats_tb){\n  # make name lower case\n  lower_case_name <- base::tolower(name)\n\n  # split name \n  split_name <- base::strsplit(lower_case_name, \" +\")[[1]]\n\n  # define first and last name\n  first_name <- split_name[[1]]\n  last_name <- split_name[[2]]\n  \n  # first letter of last name\n  letter <- base::substr(last_name, 1,1)\n  \n  # first five letters of last name \n  last_5 <- base::substr(last_name, 1, 5)\n  \n  # first two letters of first name\n  first_2 <- base::substr(first_name, 1,2)\n  \n  # define team page URL\n  url <- base::paste0(\"https://www.basketball-reference.com/players/\",letter ,\"/\",last_5,first_2,\"01.html\")\n  \n  # Read stats table\n  stats_tb <- url %>%\n  read_html %>%\n  html_node(stats_tb) %>% \n  html_table()\n  \n  # Rename Column 2 to Name \n  names(stats_tb)[2] <- \"Name\"\n  \n  # Replace NA values with 0 (for stat functions)\n  stats_tb[base::is.na(stats_tb)] <- 0\n  \n  # make list a dataframe\n  df <- base::data.frame(stats_tb)\n  \n  base::return(df)\n  }\n```\n:::\n\n\nNow save this file, and in the **R Studio Console** type `document()` to create documentation for this function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndocument()\n```\n:::\n\n\nCheck that the documentation works:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?scrape_nba_player_stats()\n```\n:::\n\n\nUse the `check()` function to look at any potential errors. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nIf everything looks good, from the **Bash Terminal** push this code to github. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"Created second function\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n## `8.2` Creating Tests\n\nFrom the **R Studio Console** use `use_test()` again to create a test file for `scrape_nba_player_stats()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_test(\"scrape_nba_player_stats\")\n```\n:::\n\n\nNext create a similar code to what was previously done for `scrape_nba_team_stats()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"Returns that typeof is list.\", {\n  expect_equal(typeof(scrape_nba_player_stats(\"Kareem Abdul-Jabbar\", \"#totals\")),\n               \"list\")\n})\n```\n:::\n\n\nCheck for errors. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nIf everything looks green, from the **Bash Terminal** push to Github. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"Created test for scrape_nba_player_stats\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n## `8.3` Update README\n\nAdd another example to the readme.rmd file using the `scrape_nba_player_stats()` function, and then update the .md file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_readme()\n```\n:::\n\n\nFrom the **Bash Terminal** push this update to Github. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add --all\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit status\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit commit -m\"added scrape_nba_player_stats example to readme\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngit push origin main\n```\n:::\n\n\n# `9.` Check Package Works\n\nNow that the SportsObserveR package is up and running, lets check to make sure that it works.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"devtools\")\ndevtools::install_github(\"rbolt13/SportsObserveR\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(SportsObserveR)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngsw_totals <- scrape_nba_team_stats(\"GSW\", \"2022\", \"#totals\")\nutils::head(gsw_totals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Rk            Name Age  G GS   MP  FG  FGA   FG. X3P X3PA  X3P. X2P X2PA\n1  1  Andrew Wiggins  26 73 73 2329 475 1019 0.466 157  399 0.393 318  620\n2  2    Jordan Poole  22 76 51 2283 474 1058 0.448 211  580 0.364 263  478\n3  3   Stephen Curry  33 64 64 2211 535 1224 0.437 285  750 0.380 250  474\n4  4    Kevon Looney  25 82 80 1732 208  364 0.571   0    1 0.000 208  363\n5  5 Otto Porter Jr.  28 63 15 1396 193  416 0.464  80  216 0.370 113  200\n6  6  Draymond Green  31 46 44 1329 135  257 0.525  16   54 0.296 119  203\n   X2P.  eFG.  FT FTA   FT. ORB DRB TRB AST STL BLK TOV  PF  PTS\n1 0.513 0.543 149 235 0.634  85 240 325 161  76  51 111 158 1256\n2 0.550 0.548 246 266 0.925  34 226 260 304  60  23 187 206 1405\n3 0.527 0.554 275 298 0.923  34 301 335 404  85  23 206 130 1630\n4 0.573 0.571  75 125 0.600 208 388 596 165  50  52  67 215  491\n5 0.565 0.560  49  61 0.803  86 276 362  94  68  29  37  83  515\n6 0.586 0.556  60  91 0.659  45 291 336 320  61  50 139 136  346\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nai <- scrape_nba_player_stats(\"Allen Iverson\", \"#per_game\")\nutils::head(ai, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Season Name  Tm  Lg Pos  G GS   MP   FG  FGA  FG. X3P X3PA X3P.  X2P X2PA\n1  1996-97   21 PHI NBA  PG 76 74 40.1  8.2 19.8 .416 2.0  6.0 .341  6.2 13.8\n2  1997-98   22 PHI NBA  PG 80 80 39.4  8.1 17.6 .461 0.9  2.9 .298  7.2 14.7\n3  1998-99   23 PHI NBA  SG 48 48 41.5  9.1 22.0 .412 1.2  4.1 .291  7.9 17.9\n4  1999-00   24 PHI NBA  SG 70 70 40.8 10.4 24.8 .421 1.3  3.7 .341  9.1 21.0\n5  2000-01   25 PHI NBA  SG 71 71 42.0 10.7 25.5 .420 1.4  4.3 .320  9.4 21.2\n6  2001-02   26 PHI NBA  SG 60 59 43.7 11.1 27.8 .398 1.3  4.5 .291  9.8 23.4\n7  2002-03   27 PHI NBA  SG 82 82 42.5  9.8 23.7 .414 1.0  3.7 .277  8.8 20.0\n8  2003-04   28 PHI NBA  SG 48 47 42.5  9.1 23.4 .387 1.2  4.1 .286  7.9 19.3\n9  2004-05   29 PHI NBA  PG 75 75 42.3 10.3 24.2 .424 1.4  4.5 .308  8.9 19.7\n10 2005-06   30 PHI NBA  PG 72 72 43.1 11.3 25.3 .447 1.0  3.1 .323 10.3 22.2\n   X2P. eFG.  FT  FTA  FT. ORB DRB TRB AST STL BLK TOV  PF  PTS\n1  .448 .467 5.0  7.2 .702 1.5 2.6 4.1 7.5 2.1 0.3 4.4 3.1 23.5\n2  .494 .486 4.9  6.7 .729 1.1 2.6 3.7 6.2 2.2 0.3 3.1 2.5 22.0\n3  .440 .439 7.4  9.9 .751 1.4 3.5 4.9 4.6 2.3 0.1 3.5 2.0 26.8\n4  .435 .446 6.3  8.9 .713 1.0 2.8 3.8 4.7 2.1 0.1 3.3 2.3 28.4\n5  .441 .447 8.2 10.1 .814 0.7 3.1 3.8 4.6 2.5 0.3 3.3 2.1 31.1\n6  .419 .422 7.9  9.8 .812 0.7 3.8 4.5 5.5 2.8 0.2 4.0 1.7 31.4\n7  .440 .436 7.0  9.0 .774 0.8 3.4 4.2 5.5 2.7 0.2 3.5 1.8 27.6\n8  .408 .412 7.1  9.5 .745 0.7 3.0 3.7 6.8 2.4 0.1 4.4 1.8 26.4\n9  .451 .453 8.7 10.5 .835 0.7 3.3 4.0 7.9 2.4 0.1 4.6 1.9 30.7\n10 .465 .467 9.4 11.5 .814 0.6 2.6 3.2 7.4 1.9 0.1 3.4 1.7 33.0\n```\n:::\n:::\n\n\n# `10.` Conclusion \n\nThis package will be helpful in collecting a large amount of NBA related data, and be a great place to put future functions, data, and models all related to sports statistics. \n\nPlease leave me a comment below if you have any questions, need further clarification, or want to get involved in expanding the capabilities of this package. \n\nNote: You may have a hard time using this package if you are accessing it with a VPN. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}