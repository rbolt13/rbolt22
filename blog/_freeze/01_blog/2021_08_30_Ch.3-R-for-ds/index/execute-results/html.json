{
  "hash": "58384b615b96f89f76a29948294e1f5a",
  "result": {
    "markdown": "---\ntitle: \"R for Data Science - Ch.3: Data Visualisations\"\ndate: \"2021-08-30\"\ncategories: [R, Data Visuals]\ntoc: true\n---\n\n\nThese are examples and exercises from Chapter 3 of [R for Data Science](https://r4ds.had.co.nz/index.html), by Hadley Wickham and Garret Grolemund.\n\n<center>\n![](../../00_img/rfords.jpg)\n</center>\n\n# `1. Set Up`\n\nThis first chunk will remove warning messages from all chunks in this file. To hide this chunk use `include=FALSE` within the `{}` brackets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(warning = FALSE, message = FALSE) \n```\n:::\n\n\nThis second chunk calls two packages:\n\n-   tidyverse: to tidy data and create visuals with ggplot2. \n\n-   gridExtra: to arrange data in a grid\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gridExtra)\n```\n:::\n\n\nThis chapter analyzes the mpg data so I'm using the head() function from utils to view the first five rows in the mpg data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nutils::head(mpg, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  <chr>        <chr> <dbl> <int> <int> <chr>      <chr> <int> <int> <chr> <chr> \n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…\n```\n:::\n:::\n\n\n# `2. Visuals`\n\n$\\underline{\\text{Question 1}}$: Do cars with big engines use more fuel than cars with small engines?\n\nTo answer this question I will focus on two columns: \n\n**displ** : a cars engine size in litres\n\n**hwy** : a car's fuel efficiency on the highway in mpg. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nNote:\n\n* There is a negative relation between engine size and fuel efficiency. \n\n* The mapping argument is always paired with aes(), and the x and y arguments of aes() specify which variables to map to the x and y axes. \n\n# `3. 3.2.4 Exercises`\n\n1. The following code chunk creates an empty square. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data = mpg)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n2. The mpg data set has 234 rows and 11 columns. \n\n3. The drv variable is the type of drive the car has such as f = front wheel, r = rear wheel, and 4 = 4 wheel drive. \n\n4. The following plot shows hwy vs. cyl. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(mpg) +\n  ggplot2::geom_point(ggplot2::aes(x = cyl, y = hwy))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nNote: This isn't very useful because it is obvious that as the number of cylinders increases the miles per gallon decreases. \n\n5. The following plot shows class vs. drv. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(mpg) +\n  ggplot2::geom_point(ggplot2::aes(x = drv, y = class))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNote: This plot isn't useful because there are no obvious trends. Categorical variables usually have a small number of values they are limited to, so it only seems like there are 12 observed values. \n\n# `4. Aesthetics`\n\nWithin the aes() function when specifying that **color** is equal to a column variable then ggplot will add a color key to these variables, as shown below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, color = class))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWhen defining color outside aes() then color is equal to a specific color (such as red or blue), and ggplot will make all points that one color, as shown below. \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy), color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n**size**: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, size = class))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n(Warning: using size for a discrete variable is not advised.)\n\n**alpha**: (transparency)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, alpha = class))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n**shape**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, shape = class))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n![shapes built into R](images/Screen Shot 2021-08-27 at 10.22.14 AM.png) \n\n# `5. 3.3.1 Exercises`\n\n1. The following code is incorrect because color is inside aes(), which is labeling all the points as \"blue\". \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, color = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n2. Categorical : manufacturer, model name, trans, drv, fl, and class <br> Continuous : displ, cty, year of manufacture, number of cylinders, and hwy\n\n* Notice in the printed data frame the categorical variables are usually character <chr> values, where continuous variables are numeric values such as <int> or <double>.\n\n3. When mapping a continuous variable to an aes() such as color then then there the key also becomes continuos as shown below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Categorical\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = manufacturer, color = trans))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Continuous\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = manufacturer, color = hwy))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n:::\n\n\n4. When mapping the same variable to multiple aesthetics then multiple keys are added as shown below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, size = hwy, color = displ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n5. Stroke adjusts the thickness of the boarder (for shapes 21-25) as shown below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(mtcars, ggplot2::aes(wt, mpg)) +\n  ggplot2::geom_point(shape = 21, colour = \"black\", fill = \"pink\", size = 5, stroke = 5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n6. When defining something like color to be displ < 5, it sets up a true or false argument for this, and applies one color (blue) to true values less than 5 and red for false values greater than 5. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, color = displ < 5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n# `6. Facets`\n\n`facet_wrap()` should be used for discrete values as shown below: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_wrap(~ class, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nTo facet on a combination of variables use `facet_grid()` as shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_grid(drv ~ cyl)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nUse `+ facet_grid(.~cyl)` to not facet rows. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_grid(.~ cyl)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n# `7. 3.5.1 Exercises`\n\n1. When you facet a continuous variable you make A LOT of graphs. \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_wrap(~ hwy)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n2. The empty cells in the `facet_grid(drv ~ cyl)` plot above are showing the empty points in the graph below. For example cars with four wheel drive only have an even number of cylinders so the plot of 4 wheel drive with 5 cylinders is empty because it does not exist. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = drv, y = cyl))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n3. One of the below plots is shown in rows and the other in columns. The period says not to facet the rows or the columns. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rows\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  facet_grid(drv ~ .)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#columns\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  facet_grid(. ~ cyl)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-2.png){width=672}\n:::\n:::\n\n\n4. The advantages of facet wrap allow for data with various classes or types to be analyzed by such. Additionally it's difficult for humans to visualize a large amount of color so it is easier to digest the variety of date spread out. <br>The disadvantage of this could be that spreading the data out would make it difficult to compare observations between different categories. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_wrap(~ class, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n5. nrow and ncol define the number of rows and columns in the facet wrap.There is also scales, shrink, labeler, as.table, switch, drop, dir, and stip.position. Facet grid doesn't have these because it is specified in the function instead.  \n\n6. Variables with more unique levels should be in columns when using facet_grid() because there is more space for columns if the plot is laid out horizontally.  \n\n# `8. Geometric Objects`\n\nThe side by side graphs below show the same data. The left graph uses the geometric object `geom_point()` which shows all the points, and the right graphs uses `geom_smooth()` which creates a best fit line with the data's standard error without all the data points. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# left graph: geom_point()\na <- ggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy))\n# right graph: geom_smooth()\nb <- ggplot(data = mpg) + \n  geom_smooth(mapping = aes(x = displ, y = hwy))\n# both together\ngrid.arrange(a,b, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nFor different line \"shapes\" `geom_smooth()` can be used with different linetypes within `aes()` as shown below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nFor the following geoms, you can set the group aesthetic to a categorical variable to draw multiple objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc <- ggplot(data = mpg) +\n  geom_smooth(mapping = aes(x = displ, y = hwy))\n              \nd <- ggplot(data = mpg) +\n  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))\n    \ne <- ggplot(data = mpg) +\n  geom_smooth(\n    mapping = aes(x = displ, y = hwy, color = drv),\n    show.legend = FALSE)\ngrid.arrange(c,d,e, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nBelow multiple geometric objects are added to one plot. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  geom_smooth(mapping = aes(x = displ, y = hwy))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nDefining the mapping `aes()` helps reduce repetion, as shown below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point() + \n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n**Global Mapping**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n**Subcompact (subset) mapping**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth(data = filter(mpg, class == \"subcompact\"), se = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n# `9. 3.6.1 Exercises`\n\n1. line chart: `geom_line()` <br> boxplot: `geom_boxplot()` <br> histogram: `geom_histogram()` <br> area chart: `geom_area()`\n\n2. Prediction: the below code will show the various points and lines for drv without any standard error. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + \n  geom_point() + \n  geom_smooth(se = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n3. show.legend = FALSE hides the legend box, and was used earlier in this chapter because it changes the size of the graphs, which would make it more difficult to compare to the other graphs. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}