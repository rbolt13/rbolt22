{
  "hash": "64ca3720e669702bec91a268ab2c123a",
  "result": {
    "markdown": "---\ntitle: \"Tree Diagrams\"\ndate: \"2021-10-18\"\ncategories: [R, Conditional Probabilty, Tree Diagrams, Statistics]\ntoc: true\n---\n\n\nIn this post I wanted to create a tree diagram based off my [Statistics-461 Notes](https://rbolt13.github.io/stat461/). \n\n![](treediagram.png)\n\n# `1. Set-Up`\n\nThis example is from [W3-D5 Example 1](https://rbolt13.github.io/stat461/#Example_1) of my [Statistics-461 Notes](https://rbolt13.github.io/stat461/), and uses the [data.tree](https://cran.r-project.org/web/packages/data.tree/vignettes/data.tree.html) package which can create a multiple node object. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.tree)\n```\n:::\n\n\n# `2. Creating a Node Object`\n\nAll trees are constructed by tying together Node object, so to start I will create a new Node object for example 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex1 <- data.tree::Node$new(\"Example 1\")\n```\n:::\n\n\nFor example 1 we suppose that 1% of the population uses a certain drug. So next I want to `AddChild` to ex1 to show those who use the drug (d) and do not use the drug (dc, where c means [compliment](https://guides.fscj.edu/Statistics/complement#:~:text=The%20complement%20of%20an%20event,P(A%20%E2%88%A9%20B).)). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- ex1$AddChild(\"Uses Drug\", p = 0.01)\ndc <- ex1$AddChild(\"Does Not Use Drug\", p = 0.99)\n```\n:::\n\n\nNow let t be tests positive for the disease. The drug manufacturer claims that $P(T|D^C)=0.015$ and $P(T^C|D)=0.005$. Which means that: \n\n$P(T^C|D^C)=1-P(T|D^C)=1-0.015=0.985$ and\n\n$P(T|D)=1-P(T^C|D)=1-0.005=0.995$\n\nSo lets add another layer of nodes to example 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt <- d$AddChild(\"Positive Test\", p = 0.995)\ntc <- d$AddChild(\"Negative Test\", p = 0.005)\nt <- dc$AddChild(\"Positive Test\", p = 0.015)\ntc<- dc$AddChild(\"Negative Test\", p = 0.985)\n```\n:::\n\n\nAnd then print what information we have. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::print(ex1, 'p')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              levelName     p\n1 Example 1                NA\n2  ¦--Uses Drug         0.010\n3  ¦   ¦--Positive Test 0.995\n4  ¦   °--Negative Test 0.005\n5  °--Does Not Use Drug 0.990\n6      ¦--Positive Test 0.015\n7      °--Negative Test 0.985\n```\n:::\n:::\n\n\nIf the probability column shows as a percentages we can use the `SetFormat()` function to set the decimal to 3 places.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.tree::SetFormat(ex1, \"p\", formatFun = data.tree::FormatFixedDecimal(3))\n```\n:::\n\n\nAnd print the information we have. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::print(ex1, 'p')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              levelName     p\n1 Example 1                NA\n2  ¦--Uses Drug         0.010\n3  ¦   ¦--Positive Test 0.995\n4  ¦   °--Negative Test 0.005\n5  °--Does Not Use Drug 0.990\n6      ¦--Positive Test 0.015\n7      °--Negative Test 0.985\n```\n:::\n:::\n\n\n# `3. Conditional Probability`\n\nGiven a positive test, we can find the probability that a person actually uese the drug with the following equation: \n\n$\\begin{equation}\\label{a}\\begin{split}P(D|T) &= \\frac{P(T|D)\\times P(D)}{[P(T|D)\\times P(D)]+[P(T|D^C)\\times P(D^C)]}\\\\&=\\frac{(0.995)(0.01)}{(0.995\\times 0.01)+(0.015\\times 0.99)}\\\\&=\\frac{199}{496}\\\\&\\approx 0.4012\\end{split}\\end{equation}$\n\n\n# `4. Plotting a Tree Diagram`\n\nLastly we can use the `plot()` function to print a Tree Diagram:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::plot(ex1)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"grViz html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-baa4bcb0296edaacc69b\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-baa4bcb0296edaacc69b\">{\"x\":{\"diagram\":\"digraph {\\n\\n\\n\\n\\n  \\\"1\\\" [label = \\\"Example 1\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"2\\\" [label = \\\"Uses Drug\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"3\\\" [label = \\\"Positive Test\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"4\\\" [label = \\\"Negative Test\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"5\\\" [label = \\\"Does Not Use Drug\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"6\\\" [label = \\\"Positive Test\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"7\\\" [label = \\\"Negative Test\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"1\\\"->\\\"2\\\" \\n  \\\"1\\\"->\\\"5\\\" \\n  \\\"2\\\"->\\\"3\\\" \\n  \\\"2\\\"->\\\"4\\\" \\n  \\\"5\\\"->\\\"6\\\" \\n  \\\"5\\\"->\\\"7\\\" \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nTo visualize the tree diagram from left to right instead of top to bottom we can use the `SetGraphStyle()` function as shown below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.tree::SetGraphStyle(ex1, rankdir = \"LR\")\nbase::plot(ex1)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"grViz html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-05279899f201e0dab2cf\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-05279899f201e0dab2cf\">{\"x\":{\"diagram\":\"digraph {\\n\\ngraph [rankdir = \\\"LR\\\"]\\n\\n\\n\\n  \\\"1\\\" [label = \\\"Example 1\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"2\\\" [label = \\\"Uses Drug\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"3\\\" [label = \\\"Positive Test\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"4\\\" [label = \\\"Negative Test\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"5\\\" [label = \\\"Does Not Use Drug\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"6\\\" [label = \\\"Positive Test\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"7\\\" [label = \\\"Negative Test\\\", fillcolor = \\\"#FFFFFF\\\", fontcolor = \\\"#000000\\\"] \\n  \\\"1\\\"->\\\"2\\\" \\n  \\\"1\\\"->\\\"5\\\" \\n  \\\"2\\\"->\\\"3\\\" \\n  \\\"2\\\"->\\\"4\\\" \\n  \\\"5\\\"->\\\"6\\\" \\n  \\\"5\\\"->\\\"7\\\" \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.0/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/viz-1.8.2/viz.js\"></script>\n<link href=\"../../site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/grViz-binding-1.0.9/grViz.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}