{
  "hash": "eac0a13713ea25a6d2dc84e0d6587d90",
  "result": {
    "markdown": "---\ntitle: \"Python Basics\"\ndate: \"2022-11-28\"\ncategories: [Python, Data Visuals]\ntoc: true\ndraft: false\n---\n\nThis post covers topics from [Lillian Pierson](https://www.data-mania.com/blog/author/lillianpierson/)'s Linkedin Learning course [Python for Data Sciene Training Part 1](https://www.linkedin.com/learning-login/continue?account=71753745&forceAccount=false&authModeName=SAML-1&authUUID=Jn8kaR1lSRaVYTMZwb8wJw%3D%3D&redirect=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Fpython-for-data-science-essential-training-part-1%2Fdata-science-life-hacks%3Fautoplay%3Dtrue%26resume%3Dfalse%26u%3D71753745). Topics include Series, Data Frames, Data Visuals, Math and Statistics.\n\n![Image of a pink snake with a bow](pink-snake.png)\n\n# `0.0` Introduction\n\n## `0.0.1` Import Packages\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\nfrom pandas import Series, DataFrame\n```\n:::\n\n\n## `0.0.2` Print Working Directory\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n%pwd\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'/Users/randi/Desktop/2022/rbolt22/blog/01_blog/2022_11_28_python-beg'\n```\n:::\n:::\n\n\n# `1.0` Series\n\n### `1.0.1` Create a Series object with 8 rows.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nseries_obj = Series(np.arange(8), index=['row 1', 'row 2', 'row 3', 'row 4', 'row 5', 'row 6', 'row 7', 'row 8'])\nseries_obj\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nrow 1    0\nrow 2    1\nrow 3    2\nrow 4    3\nrow 5    4\nrow 6    5\nrow 7    6\nrow 8    7\ndtype: int64\n```\n:::\n:::\n\n\n## `1.1` Extracting\n\n### `1.1.1` Select row 7\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nseries_obj['row 7']\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n6\n```\n:::\n:::\n\n\n### `1.1.2` Select Elements at Position 0 and 7\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nseries_obj[[0,7]]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nrow 1    0\nrow 8    7\ndtype: int64\n```\n:::\n:::\n\n\n## `1.2` Slicing\n\nSelect every row between 3 and 7.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nseries_obj['row 3':'row 7']\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nrow 3    2\nrow 4    3\nrow 5    4\nrow 6    5\nrow 7    6\ndtype: int64\n```\n:::\n:::\n\n\n## `1.3` Scalars\n\n### `1.3.1` Print values greater than 5.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nseries_obj[series_obj>5]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nrow 7    6\nrow 8    7\ndtype: int64\n```\n:::\n:::\n\n\n### `1.3.2` Set row 1 to the value 8.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nseries_obj['row 1'] = 8\nseries_obj\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nrow 1    8\nrow 2    1\nrow 3    2\nrow 4    3\nrow 5    4\nrow 6    5\nrow 7    6\nrow 8    7\ndtype: int64\n```\n:::\n:::\n\n\n## `1.4` Missing Values\n\n### `1.4.1` Create a variable of missing values using np.nan\n\n-   np.nan: numpy function, not a number (nan)\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nmissing = np.nan\nmissing\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nnan\n```\n:::\n:::\n\n\n### `1.4.2` Create a new series object with missing values for row 3 and 7.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nseries_obj2 = Series(['row 1', 'row 2', missing , 'row 5', 'row 6', missing, 'row 8'])\nseries_obj2\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n0    row 1\n1    row 2\n2      NaN\n3    row 5\n4    row 6\n5      NaN\n6    row 8\ndtype: object\n```\n:::\n:::\n\n\n### `1.4.3` Find what values are missing using .isnull()\n\n-   isnull(): pandas function that returns t/f if null\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nseries_obj2.isnull()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0    False\n1    False\n2     True\n3    False\n4    False\n5     True\n6    False\ndtype: bool\n```\n:::\n:::\n\n\n## `1.5` Rename Data\n\n### `1.5.1` Name series object.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nseries_obj.name =\"added_variable\"\nseries_obj\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nrow 1    8\nrow 2    1\nrow 3    2\nrow 4    3\nrow 5    4\nrow 6    5\nrow 7    6\nrow 8    7\nName: added_variable, dtype: int64\n```\n:::\n:::\n\n\n# `2.0` Data Frame\n\n### `2.0.1` Create a data frame object of 36 random numbers (6X6) with a set seed of 25.\n\n-   np.random.seed(): numpy seed generator function\n-   np.random.rand(): numpy random number generator function\n-   reshape(): numpy function to reshape data frame\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nnp.random.seed(25)\nDF_obj = DataFrame(np.random.rand(36).reshape((6,6)),\n                  index = ['row 1', 'row 2', 'row 3', 'row 4', 'row 5', 'row 6'],\n                  columns = ['column 1', 'column 2', 'column 3', 'column 4', 'column 5', 'column 6'])\nDF_obj\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n      <th>column 4</th>\n      <th>column 5</th>\n      <th>column 6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row 1</th>\n      <td>0.870124</td>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n      <td>0.117376</td>\n    </tr>\n    <tr>\n      <th>row 2</th>\n      <td>0.684969</td>\n      <td>0.437611</td>\n      <td>0.556229</td>\n      <td>0.367080</td>\n      <td>0.402366</td>\n      <td>0.113041</td>\n    </tr>\n    <tr>\n      <th>row 3</th>\n      <td>0.447031</td>\n      <td>0.585445</td>\n      <td>0.161985</td>\n      <td>0.520719</td>\n      <td>0.326051</td>\n      <td>0.699186</td>\n    </tr>\n    <tr>\n      <th>row 4</th>\n      <td>0.366395</td>\n      <td>0.836375</td>\n      <td>0.481343</td>\n      <td>0.516502</td>\n      <td>0.383048</td>\n      <td>0.997541</td>\n    </tr>\n    <tr>\n      <th>row 5</th>\n      <td>0.514244</td>\n      <td>0.559053</td>\n      <td>0.034450</td>\n      <td>0.719930</td>\n      <td>0.421004</td>\n      <td>0.436935</td>\n    </tr>\n    <tr>\n      <th>row 6</th>\n      <td>0.281701</td>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n      <td>0.525819</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `2.1` Extracting\n\n### `2.1.1` Select values from row 2, row 5, column 5, and column 2.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nDF_obj.loc[['row 2', 'row 5'], ['column 5', 'column 2']]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 5</th>\n      <th>column 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row 2</th>\n      <td>0.402366</td>\n      <td>0.437611</td>\n    </tr>\n    <tr>\n      <th>row 5</th>\n      <td>0.421004</td>\n      <td>0.559053</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `2.2` Scalars\n\n### `2.2.1` Return a true or false for all values less than .2\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nDF_obj < .2\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n      <th>column 4</th>\n      <th>column 5</th>\n      <th>column 6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row 1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>row 2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>row 3</th>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>row 4</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>row 5</th>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>row 6</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `2.3` Missing Values\n\n### `2.3.1` Set the values in rows 4-5 of column 1, and rows 2-4 of column 6 to missing.\n\n-   iloc: python function used to select a particular cell of the dataset.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nDF_obj.iloc[3:5, 0] = missing\nDF_obj.iloc[1:4, 5] = missing\nDF_obj\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n      <th>column 4</th>\n      <th>column 5</th>\n      <th>column 6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row 1</th>\n      <td>0.870124</td>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n      <td>0.117376</td>\n    </tr>\n    <tr>\n      <th>row 2</th>\n      <td>0.684969</td>\n      <td>0.437611</td>\n      <td>0.556229</td>\n      <td>0.367080</td>\n      <td>0.402366</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>row 3</th>\n      <td>0.447031</td>\n      <td>0.585445</td>\n      <td>0.161985</td>\n      <td>0.520719</td>\n      <td>0.326051</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>row 4</th>\n      <td>NaN</td>\n      <td>0.836375</td>\n      <td>0.481343</td>\n      <td>0.516502</td>\n      <td>0.383048</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>row 5</th>\n      <td>NaN</td>\n      <td>0.559053</td>\n      <td>0.034450</td>\n      <td>0.719930</td>\n      <td>0.421004</td>\n      <td>0.436935</td>\n    </tr>\n    <tr>\n      <th>row 6</th>\n      <td>0.281701</td>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n      <td>0.525819</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.3.2` Replace non values with 0.\n\n-   fillna: pandas function used to replace missing values.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# fill NaN values with 0\nfilled_DF = DF_obj.fillna(0)\nfilled_DF\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n      <th>column 4</th>\n      <th>column 5</th>\n      <th>column 6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row 1</th>\n      <td>0.870124</td>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n      <td>0.117376</td>\n    </tr>\n    <tr>\n      <th>row 2</th>\n      <td>0.684969</td>\n      <td>0.437611</td>\n      <td>0.556229</td>\n      <td>0.367080</td>\n      <td>0.402366</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>row 3</th>\n      <td>0.447031</td>\n      <td>0.585445</td>\n      <td>0.161985</td>\n      <td>0.520719</td>\n      <td>0.326051</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>row 4</th>\n      <td>0.000000</td>\n      <td>0.836375</td>\n      <td>0.481343</td>\n      <td>0.516502</td>\n      <td>0.383048</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>row 5</th>\n      <td>0.000000</td>\n      <td>0.559053</td>\n      <td>0.034450</td>\n      <td>0.719930</td>\n      <td>0.421004</td>\n      <td>0.436935</td>\n    </tr>\n    <tr>\n      <th>row 6</th>\n      <td>0.281701</td>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n      <td>0.525819</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.3.3` Count the number of missing values in each column.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nDF_obj.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\ncolumn 1    2\ncolumn 2    0\ncolumn 3    0\ncolumn 4    0\ncolumn 5    0\ncolumn 6    3\ndtype: int64\n```\n:::\n:::\n\n\n### `2.3.4` Filter out rows with missing values.\n\n-   dropna(): pandas function that removes rows with missing values.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nDF_no_NaN_rows = DF_obj.dropna()\nDF_no_NaN_rows\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n      <th>column 4</th>\n      <th>column 5</th>\n      <th>column 6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row 1</th>\n      <td>0.870124</td>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n      <td>0.117376</td>\n    </tr>\n    <tr>\n      <th>row 6</th>\n      <td>0.281701</td>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n      <td>0.525819</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.3.5` Filter out columns with missing values.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nDF_no_NaN_columns = DF_obj.dropna(axis=1)\nDF_no_NaN_columns\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 2</th>\n      <th>column 3</th>\n      <th>column 4</th>\n      <th>column 5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row 1</th>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n    </tr>\n    <tr>\n      <th>row 2</th>\n      <td>0.437611</td>\n      <td>0.556229</td>\n      <td>0.367080</td>\n      <td>0.402366</td>\n    </tr>\n    <tr>\n      <th>row 3</th>\n      <td>0.585445</td>\n      <td>0.161985</td>\n      <td>0.520719</td>\n      <td>0.326051</td>\n    </tr>\n    <tr>\n      <th>row 4</th>\n      <td>0.836375</td>\n      <td>0.481343</td>\n      <td>0.516502</td>\n      <td>0.383048</td>\n    </tr>\n    <tr>\n      <th>row 5</th>\n      <td>0.559053</td>\n      <td>0.034450</td>\n      <td>0.719930</td>\n      <td>0.421004</td>\n    </tr>\n    <tr>\n      <th>row 6</th>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.3.6` Fill the missing values with the method ffill.\n\n-   ffill: pandas function fill forward which fills in the lass non-null value in DF.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nfill_DF = DF_obj.fillna(method='ffill')\nfill_DF\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n      <th>column 4</th>\n      <th>column 5</th>\n      <th>column 6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row 1</th>\n      <td>0.870124</td>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n      <td>0.117376</td>\n    </tr>\n    <tr>\n      <th>row 2</th>\n      <td>0.684969</td>\n      <td>0.437611</td>\n      <td>0.556229</td>\n      <td>0.367080</td>\n      <td>0.402366</td>\n      <td>0.117376</td>\n    </tr>\n    <tr>\n      <th>row 3</th>\n      <td>0.447031</td>\n      <td>0.585445</td>\n      <td>0.161985</td>\n      <td>0.520719</td>\n      <td>0.326051</td>\n      <td>0.117376</td>\n    </tr>\n    <tr>\n      <th>row 4</th>\n      <td>0.447031</td>\n      <td>0.836375</td>\n      <td>0.481343</td>\n      <td>0.516502</td>\n      <td>0.383048</td>\n      <td>0.117376</td>\n    </tr>\n    <tr>\n      <th>row 5</th>\n      <td>0.447031</td>\n      <td>0.559053</td>\n      <td>0.034450</td>\n      <td>0.719930</td>\n      <td>0.421004</td>\n      <td>0.436935</td>\n    </tr>\n    <tr>\n      <th>row 6</th>\n      <td>0.281701</td>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n      <td>0.525819</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `2.4` Duplicates\n\n### `2.4.1` Create a new data frame object.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nDF_obj2 = DataFrame({'column 1':[1,1,2,2,3,3,3],\n                   'column 2' :['a', 'a', 'b', 'b', 'c','c','c'],\n                   'column 3': ['A','A','B','B','C','C','C']})\nDF_obj2\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>a</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>b</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>b</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>c</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>c</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>3</td>\n      <td>c</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.4.2` Show which rows have duplicates.\n\n-   duplicated(): pandas function that returns t/f for rows with duplicate values.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nDF_obj2.duplicated()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n0    False\n1     True\n2    False\n3     True\n4    False\n5     True\n6     True\ndtype: bool\n```\n:::\n:::\n\n\n### `2.4.3` Drop duplicates rows.\n\n-   drop_duplicates()\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nDF_obj2_row_drop  = DF_obj2.drop_duplicates()\nDF_obj2_row_drop\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>b</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>c</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.4.4` Drop duplicate from column 3.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nDF_obj2_c3_drop = DF_obj2.drop_duplicates(['column 3'])\nDF_obj2_c3_drop\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>b</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>c</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `2.5` Adding data\n\n### `2.5.1` Slice the first 6 rows of series object.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nnew_series_obj = series_obj['row 0':'row 6']\nnew_series_obj\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nrow 1    8\nrow 2    1\nrow 3    2\nrow 4    3\nrow 5    4\nrow 6    5\nName: added_variable, dtype: int64\n```\n:::\n:::\n\n\n### `2.5.2` Add new_series_obj to the end of DF_obj\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nvariable_added = DataFrame.join(DF_obj, series_obj)\nvariable_added\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n      <th>column 4</th>\n      <th>column 5</th>\n      <th>column 6</th>\n      <th>added_variable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row 1</th>\n      <td>0.870124</td>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n      <td>0.117376</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>row 2</th>\n      <td>0.684969</td>\n      <td>0.437611</td>\n      <td>0.556229</td>\n      <td>0.367080</td>\n      <td>0.402366</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>row 3</th>\n      <td>0.447031</td>\n      <td>0.585445</td>\n      <td>0.161985</td>\n      <td>0.520719</td>\n      <td>0.326051</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>row 4</th>\n      <td>NaN</td>\n      <td>0.836375</td>\n      <td>0.481343</td>\n      <td>0.516502</td>\n      <td>0.383048</td>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>row 5</th>\n      <td>NaN</td>\n      <td>0.559053</td>\n      <td>0.034450</td>\n      <td>0.719930</td>\n      <td>0.421004</td>\n      <td>0.436935</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>row 6</th>\n      <td>0.281701</td>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n      <td>0.525819</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.5.3` Use append to add data table to itself retaining index values.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nadded_datatable = variable_added.append(variable_added, ignore_index=False)\nadded_datatable\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/90/4rtssdj16dl23f_f66qj0t3w0000gn/T/ipykernel_1775/426574045.py:1: FutureWarning:\n\nThe frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n      <th>column 4</th>\n      <th>column 5</th>\n      <th>column 6</th>\n      <th>added_variable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>row 1</th>\n      <td>0.870124</td>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n      <td>0.117376</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>row 2</th>\n      <td>0.684969</td>\n      <td>0.437611</td>\n      <td>0.556229</td>\n      <td>0.367080</td>\n      <td>0.402366</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>row 3</th>\n      <td>0.447031</td>\n      <td>0.585445</td>\n      <td>0.161985</td>\n      <td>0.520719</td>\n      <td>0.326051</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>row 4</th>\n      <td>NaN</td>\n      <td>0.836375</td>\n      <td>0.481343</td>\n      <td>0.516502</td>\n      <td>0.383048</td>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>row 5</th>\n      <td>NaN</td>\n      <td>0.559053</td>\n      <td>0.034450</td>\n      <td>0.719930</td>\n      <td>0.421004</td>\n      <td>0.436935</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>row 6</th>\n      <td>0.281701</td>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n      <td>0.525819</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>row 1</th>\n      <td>0.870124</td>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n      <td>0.117376</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>row 2</th>\n      <td>0.684969</td>\n      <td>0.437611</td>\n      <td>0.556229</td>\n      <td>0.367080</td>\n      <td>0.402366</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>row 3</th>\n      <td>0.447031</td>\n      <td>0.585445</td>\n      <td>0.161985</td>\n      <td>0.520719</td>\n      <td>0.326051</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>row 4</th>\n      <td>NaN</td>\n      <td>0.836375</td>\n      <td>0.481343</td>\n      <td>0.516502</td>\n      <td>0.383048</td>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>row 5</th>\n      <td>NaN</td>\n      <td>0.559053</td>\n      <td>0.034450</td>\n      <td>0.719930</td>\n      <td>0.421004</td>\n      <td>0.436935</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>row 6</th>\n      <td>0.281701</td>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n      <td>0.525819</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.5.4` Use append to add data table to itself, resetting index values.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nadded_datatable = variable_added.append(variable_added, ignore_index=True)\nadded_datatable\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/90/4rtssdj16dl23f_f66qj0t3w0000gn/T/ipykernel_1775/4230768127.py:1: FutureWarning:\n\nThe frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column 1</th>\n      <th>column 2</th>\n      <th>column 3</th>\n      <th>column 4</th>\n      <th>column 5</th>\n      <th>column 6</th>\n      <th>added_variable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.870124</td>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n      <td>0.117376</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.684969</td>\n      <td>0.437611</td>\n      <td>0.556229</td>\n      <td>0.367080</td>\n      <td>0.402366</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.447031</td>\n      <td>0.585445</td>\n      <td>0.161985</td>\n      <td>0.520719</td>\n      <td>0.326051</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>0.836375</td>\n      <td>0.481343</td>\n      <td>0.516502</td>\n      <td>0.383048</td>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>0.559053</td>\n      <td>0.034450</td>\n      <td>0.719930</td>\n      <td>0.421004</td>\n      <td>0.436935</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.281701</td>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n      <td>0.525819</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0.870124</td>\n      <td>0.582277</td>\n      <td>0.278839</td>\n      <td>0.185911</td>\n      <td>0.411100</td>\n      <td>0.117376</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.684969</td>\n      <td>0.437611</td>\n      <td>0.556229</td>\n      <td>0.367080</td>\n      <td>0.402366</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.447031</td>\n      <td>0.585445</td>\n      <td>0.161985</td>\n      <td>0.520719</td>\n      <td>0.326051</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>NaN</td>\n      <td>0.836375</td>\n      <td>0.481343</td>\n      <td>0.516502</td>\n      <td>0.383048</td>\n      <td>NaN</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>NaN</td>\n      <td>0.559053</td>\n      <td>0.034450</td>\n      <td>0.719930</td>\n      <td>0.421004</td>\n      <td>0.436935</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>0.281701</td>\n      <td>0.900274</td>\n      <td>0.669612</td>\n      <td>0.456069</td>\n      <td>0.289804</td>\n      <td>0.525819</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.5.5` Create a 6x6 data frame with values arraged from 0-35, and another 3x5 data frame with values arranged from 0-14.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nDF_obj3 = pd.DataFrame(np.arange(36).reshape(6,6))\nDF_obj3\n\nDF_obj4 = pd.DataFrame(np.arange(15).reshape(5,3))\nDF_obj4\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9</td>\n      <td>10</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.5.6` Concatenate by adding columns.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\npd.concat([DF_obj3, DF_obj4], axis = 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n      <td>11</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n      <td>15</td>\n      <td>16</td>\n      <td>17</td>\n      <td>6.0</td>\n      <td>7.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>18</td>\n      <td>19</td>\n      <td>20</td>\n      <td>21</td>\n      <td>22</td>\n      <td>23</td>\n      <td>9.0</td>\n      <td>10.0</td>\n      <td>11.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24</td>\n      <td>25</td>\n      <td>26</td>\n      <td>27</td>\n      <td>28</td>\n      <td>29</td>\n      <td>12.0</td>\n      <td>13.0</td>\n      <td>14.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>30</td>\n      <td>31</td>\n      <td>32</td>\n      <td>33</td>\n      <td>34</td>\n      <td>35</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.5.7` Concatenate by adding rows.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\npd.concat([DF_obj3, DF_obj4])\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>9.0</td>\n      <td>10.0</td>\n      <td>11.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n      <td>15.0</td>\n      <td>16.0</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>18</td>\n      <td>19</td>\n      <td>20</td>\n      <td>21.0</td>\n      <td>22.0</td>\n      <td>23.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24</td>\n      <td>25</td>\n      <td>26</td>\n      <td>27.0</td>\n      <td>28.0</td>\n      <td>29.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>30</td>\n      <td>31</td>\n      <td>32</td>\n      <td>33.0</td>\n      <td>34.0</td>\n      <td>35.0</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9</td>\n      <td>10</td>\n      <td>11</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `2.6` Grouping and Aggregating Data\n\n### `2.6.1` Read cars csv with python.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\naddress = 'data/mtcars.csv'\ncars = pd.read_csv(address)\n# assign column names\ncars.columns = ['car_names', 'mpg', 'cyl', 'disp', 'hp', 'drat', 'wt', 'qsec', 'vs', 'am', 'gear', 'carb']\ncars.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>car_names</th>\n      <th>mpg</th>\n      <th>cyl</th>\n      <th>disp</th>\n      <th>hp</th>\n      <th>drat</th>\n      <th>wt</th>\n      <th>qsec</th>\n      <th>vs</th>\n      <th>am</th>\n      <th>gear</th>\n      <th>carb</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mazda RX4</td>\n      <td>21.0</td>\n      <td>6</td>\n      <td>160.0</td>\n      <td>110</td>\n      <td>3.90</td>\n      <td>2.620</td>\n      <td>16.46</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mazda RX4 Wag</td>\n      <td>21.0</td>\n      <td>6</td>\n      <td>160.0</td>\n      <td>110</td>\n      <td>3.90</td>\n      <td>2.875</td>\n      <td>17.02</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Datsun 710</td>\n      <td>22.8</td>\n      <td>4</td>\n      <td>108.0</td>\n      <td>93</td>\n      <td>3.85</td>\n      <td>2.320</td>\n      <td>18.61</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Hornet 4 Drive</td>\n      <td>21.4</td>\n      <td>6</td>\n      <td>258.0</td>\n      <td>110</td>\n      <td>3.08</td>\n      <td>3.215</td>\n      <td>19.44</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Hornet Sportabout</td>\n      <td>18.7</td>\n      <td>8</td>\n      <td>360.0</td>\n      <td>175</td>\n      <td>3.15</td>\n      <td>3.440</td>\n      <td>17.02</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.6.2` Group by cyl and find mean values.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ncars_groups = cars.groupby(cars['cyl'])\ncars_groups.mean()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/90/4rtssdj16dl23f_f66qj0t3w0000gn/T/ipykernel_1775/3858733335.py:2: FutureWarning:\n\nThe default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>disp</th>\n      <th>hp</th>\n      <th>drat</th>\n      <th>wt</th>\n      <th>qsec</th>\n      <th>vs</th>\n      <th>am</th>\n      <th>gear</th>\n      <th>carb</th>\n    </tr>\n    <tr>\n      <th>cyl</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>26.663636</td>\n      <td>105.136364</td>\n      <td>82.636364</td>\n      <td>4.070909</td>\n      <td>2.285727</td>\n      <td>19.137273</td>\n      <td>0.909091</td>\n      <td>0.727273</td>\n      <td>4.090909</td>\n      <td>1.545455</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>19.742857</td>\n      <td>183.314286</td>\n      <td>122.285714</td>\n      <td>3.585714</td>\n      <td>3.117143</td>\n      <td>17.977143</td>\n      <td>0.571429</td>\n      <td>0.428571</td>\n      <td>3.857143</td>\n      <td>3.428571</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>15.100000</td>\n      <td>353.100000</td>\n      <td>209.214286</td>\n      <td>3.229286</td>\n      <td>3.999214</td>\n      <td>16.772143</td>\n      <td>0.000000</td>\n      <td>0.142857</td>\n      <td>3.285714</td>\n      <td>3.500000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `2.6.3` Group by am and find mean values.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ncars_trans_group = cars.groupby(cars['am'])\ncars_trans_group.mean()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/90/4rtssdj16dl23f_f66qj0t3w0000gn/T/ipykernel_1775/564591146.py:2: FutureWarning:\n\nThe default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cyl</th>\n      <th>disp</th>\n      <th>hp</th>\n      <th>drat</th>\n      <th>wt</th>\n      <th>qsec</th>\n      <th>vs</th>\n      <th>gear</th>\n      <th>carb</th>\n    </tr>\n    <tr>\n      <th>am</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17.147368</td>\n      <td>6.947368</td>\n      <td>290.378947</td>\n      <td>160.263158</td>\n      <td>3.286316</td>\n      <td>3.768895</td>\n      <td>18.183158</td>\n      <td>0.368421</td>\n      <td>3.210526</td>\n      <td>2.736842</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>24.392308</td>\n      <td>5.076923</td>\n      <td>143.530769</td>\n      <td>126.846154</td>\n      <td>4.050000</td>\n      <td>2.411000</td>\n      <td>17.360000</td>\n      <td>0.538462</td>\n      <td>4.384615</td>\n      <td>2.923077</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# `3.0` Data Visuals\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nfrom numpy.random import randn\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\n```\n:::\n\n\n## `3.1` Line Charts\n\n### `3.1.1` Plot a line chart with matplotlib.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nx = range(1,10)\ny = [1,2,3,4,0,4,3,2,1]\nplt.plot(x,y)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-38-output-1.png){width=571 height=411}\n:::\n:::\n\n\n### `3.1.2` Defining axes, limits, and tick marks\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# gerate a figure\nfig = plt.figure()\n\n# add axis\nax = fig.add_axes([.1,.1,1,1]) \n\n# add limits \nax.set_xlim([1,9])\nax.set_ylim([0,5])\n\n# set tick marks\nax.set_xticks([0,1,2,4,5,6,8,9,10])\nax.set_yticks([0,1,2,3,4,5])\n\n# plot\nax.plot(x,y)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-39-output-1.png){width=717 height=527}\n:::\n:::\n\n\n### `3.1.3` Add Grid\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\n# gerate a figure\nfig = plt.figure()\n\n# add axis\nax = fig.add_axes([.1,.1,1,1])\n\n# add limits \nax.set_xlim([1,9])\nax.set_ylim([0,5])\n\n# add grid\nax.grid()\n\n# plot\nax.plot(x,y)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-40-output-1.png){width=713 height=527}\n:::\n:::\n\n\n### `3.1.4` Create A plot with two lines\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\n# create new variables\nx1 = range(0,10)\ny1 = [10,9,8,7,6,5,4,3,2,1]\n\n# make line plot with two lines\nplt.plot(x,y)\nplt.plot(x1,y1)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-41-output-1.png){width=566 height=411}\n:::\n:::\n\n\n### `3.1.5` Customizing Line Styles\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\n# make line plot with two lines with style\nplt.plot(x,y, ds ='steps', lw=5)\nplt.plot(x1,y1, ls='--', lw=10)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-42-output-1.png){width=566 height=411}\n:::\n:::\n\n\n### `3.1.6` Customizing Markers\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\n# make line plot with two lines with markers\nplt.plot(x,y, marker='1', mew='20')\nplt.plot(x1,y1, marker='+', mew=15)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-43-output-1.png){width=566 height=411}\n:::\n:::\n\n\n### `3.1.7` Generating Multiple Plots\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\n# generate a figure\nfig = plt.figure()\n\n# create a tuple equal to the subplots function defined as 1 row with 2 columns\nfig,(ax1, ax2) = plt.subplots(1,2)\n\n# defining axes\nax1.plot(x)\nax2.plot(x,y)\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-44-output-2.png){width=558 height=411}\n:::\n:::\n\n\n### `3.1.8` Plot a line chart with Pandas\n\nUsing the cars data set from 2.6.1:\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\n# select mpg variable\nmpg = cars['mpg']\n\n# print plot\nmpg.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-45-output-2.png){width=566 height=415}\n:::\n:::\n\n\n### `3.1.9` Plot 3 Variables\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\ndf = cars[['cyl','wt','mpg']]\ndf.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-46-output-2.png){width=566 height=411}\n:::\n:::\n\n\n### `3.1.10` Define Color\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\n# color\ncolor_theme = ['darkgray', 'lightsalmon', 'powderblue']\n\n# pass in color theme\ndf.plot(color=color_theme)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-47-output-2.png){width=566 height=411}\n:::\n:::\n\n\n### `3.1.11` Add Labels (Object Oriented Method)\n\nNote: Car names are numbers because of the data set I am using.\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\n# create a figure\nfig = plt.figure()\n\n# add axis \nax = fig.add_axes([.1,.1,1,1])\n\n# call plot method\nmpg.plot()\n\n# add tick marks\nax.set_xticks(range(32))\n\n# add lables with 60 degree rotaion\nax.set_xticklabels(cars.car_names, rotation=60, fontsize='medium')\n\n# set title\nax.set_title('Miles per Gallon of Cars in mtcars Dataset')\n\n# set x and y lables\nax.set_xlabel('car names')\nax.set_ylabel('mpg')\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\nText(0, 0.5, 'mpg')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-48-output-2.png){width=736 height=664}\n:::\n:::\n\n\n### `3.1.12` Add Legend (Object Oriented Method)\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\n# create a figure\nfig = plt.figure()\n\n# add axis \nax = fig.add_axes([.1,.1,1,1])\n\n# call plot method\nmpg.plot()\n\n# add tick marks\nax.set_xticks(range(32))\n\n# add lables with 60 degree rotaion\nax.set_xticklabels(cars.car_names, rotation=60, fontsize='medium')\n\n# set title\nax.set_title('Miles per Gallon of Cars in mtcars Dataset')\n\n# set x and y lables\nax.set_xlabel('car names')\nax.set_ylabel('mpg')\n\n# add legend\nax.legend(loc='best')\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n<matplotlib.legend.Legend at 0x7fb97c8c1c40>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-49-output-2.png){width=736 height=664}\n:::\n:::\n\n\n### `3.1.13` Annotating\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\n# create a figure\nfig = plt.figure()\n\n# add axis \nax = fig.add_axes([.1,.1,1,1])\n\n# call plot method\nmpg.plot()\n\n# add tick marks\nax.set_xticks(range(32))\n\n# add lables with 60 degree rotaion\nax.set_xticklabels(cars.car_names, rotation=60, fontsize='medium')\n\n# set title\nax.set_title('Miles per Gallon of Cars in mtcars Dataset')\n\n# set x and y lables\nax.set_xlabel('car names')\nax.set_ylabel('mpg')\n\n# add legend\nax.legend(loc='best')\n\n# set y limit\nax.set_ylim([0,45])\n\n# create annotation at (19,33.9) with text at (21,35) of an arrow\nax.annotate('Toyota Corolla', xy=(19,33.9), xytext=(21,35), \n            arrowprops=dict(facecolor='black', shrink=0.05))\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\nText(21, 35, 'Toyota Corolla')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-50-output-2.png){width=736 height=664}\n:::\n:::\n\n\n## `3.2` Bar Charts\n\n### `3.2.1` Create a bar chart from a list\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nplt.bar(x,y)\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n<BarContainer object of 9 artists>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-51-output-2.png){width=571 height=411}\n:::\n:::\n\n\n### `3.2.2` Define bar width and plot color\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\n# widths to adjust default bar width\nwide = [.5,.5,.5,.9,.9,.9,.5,.5,.5]\n\n# change color\ncolor = ['salmon']\n\n# format barchart with adjustments\nplt.bar(x,y, width=wide, color=color, align='center')\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n<BarContainer object of 9 artists>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-52-output-2.png){width=571 height=411}\n:::\n:::\n\n\n### `3.2.3` Create a bar chart from Pandas object\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\nmpg.plot(kind=\"bar\")\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-53-output-2.png){width=566 height=415}\n:::\n:::\n\n\n### `3.2.4` Create a horizontal bar chart\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nmpg.plot(kind=\"barh\")\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-54-output-2.png){width=566 height=411}\n:::\n:::\n\n\n### `3.2.5` Add labels\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\n# create variables\nx = range(1,10)\ny = [1,2,3,4,.5,4,3,2,1]\n\n# generate barchart \nplt.bar(x,y)\n\n# add labels\nplt.xlabel('your x-axis label')\nplt.ylabel('your y-axis label')\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\nText(0, 0.5, 'your y-axis label')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-55-output-2.png){width=589 height=429}\n:::\n:::\n\n\n## `3.3` Pie Charts\n\n### `3.3.1` Create a pie chart.\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nx = [1,2,3,4,0.5]\n\n# create pie chart\nplt.pie(x)\n\n# show pie chart\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-56-output-1.png){width=389 height=389}\n:::\n:::\n\n\n### `3.3.2` Define Color\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\n# create color theme with RGB code\ncolor_theme = ['#A9A9A9', '#FFA07A', '#B0E0E6', '#FFE4C4', '#BDB76B']\n\n# call pie function\nplt.pie(x, colors=color_theme)\n\n# show pie chart\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-57-output-1.png){width=389 height=389}\n:::\n:::\n\n\n### `3.3.3` Add labels (Functional Method)\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\n# create variable\nz = [1,2,3,4,.5]\nveh_type = ['bicycle', 'motorbike', 'car', 'van', 'stroller']\n\n# generate pie chart\nplt.pie(z, labels=veh_type)\n\n# plot pie chart\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-58-output-1.png){width=411 height=389}\n:::\n:::\n\n\n### `3.3.4` Add Legend\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\n# create pie chart\nplt.pie(x)\n\n# create a legend located in the best location\nplt.legend(veh_type, loc='best')\n\n# show pot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-59-output-1.png){width=389 height=389}\n:::\n:::\n\n\n### `3.3.5`Saving a pie chart\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\nplt.pie(x)\nplt.savefig('figs/pie-chart.png')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-60-output-1.png){width=389 height=389}\n:::\n:::\n\n\n## `3.4` Time Series\n\n### `3.4.0` Load Data\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\n# address\naddress = 'data/Superstore-Sales.csv'\n# create a dataframe of csv file\ndf = pd.read_csv(address, index_col='Order Date', encoding='cp1252', parse_dates=True)\n\n# look at first 5 records\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Row ID</th>\n      <th>Order ID</th>\n      <th>Order Priority</th>\n      <th>Order Quantity</th>\n      <th>Sales</th>\n      <th>Discount</th>\n      <th>Ship Mode</th>\n      <th>Profit</th>\n      <th>Unit Price</th>\n      <th>Shipping Cost</th>\n      <th>Customer Name</th>\n      <th>Province</th>\n      <th>Region</th>\n      <th>Customer Segment</th>\n      <th>Product Category</th>\n      <th>Product Sub-Category</th>\n      <th>Product Name</th>\n      <th>Product Container</th>\n      <th>Product Base Margin</th>\n      <th>Ship Date</th>\n    </tr>\n    <tr>\n      <th>Order Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2010-10-13</th>\n      <td>1</td>\n      <td>3</td>\n      <td>Low</td>\n      <td>6</td>\n      <td>261.5400</td>\n      <td>0.04</td>\n      <td>Regular Air</td>\n      <td>-213.25</td>\n      <td>38.94</td>\n      <td>35.00</td>\n      <td>Muhammed MacIntyre</td>\n      <td>Nunavut</td>\n      <td>Nunavut</td>\n      <td>Small Business</td>\n      <td>Office Supplies</td>\n      <td>Storage &amp; Organization</td>\n      <td>Eldon Base for stackable storage shelf, platinum</td>\n      <td>Large Box</td>\n      <td>0.80</td>\n      <td>10/20/2010</td>\n    </tr>\n    <tr>\n      <th>2012-10-01</th>\n      <td>49</td>\n      <td>293</td>\n      <td>High</td>\n      <td>49</td>\n      <td>10123.0200</td>\n      <td>0.07</td>\n      <td>Delivery Truck</td>\n      <td>457.81</td>\n      <td>208.16</td>\n      <td>68.02</td>\n      <td>Barry French</td>\n      <td>Nunavut</td>\n      <td>Nunavut</td>\n      <td>Consumer</td>\n      <td>Office Supplies</td>\n      <td>Appliances</td>\n      <td>1.7 Cubic Foot Compact \"Cube\" Office Refrigera...</td>\n      <td>Jumbo Drum</td>\n      <td>0.58</td>\n      <td>10/2/2012</td>\n    </tr>\n    <tr>\n      <th>2012-10-01</th>\n      <td>50</td>\n      <td>293</td>\n      <td>High</td>\n      <td>27</td>\n      <td>244.5700</td>\n      <td>0.01</td>\n      <td>Regular Air</td>\n      <td>46.71</td>\n      <td>8.69</td>\n      <td>2.99</td>\n      <td>Barry French</td>\n      <td>Nunavut</td>\n      <td>Nunavut</td>\n      <td>Consumer</td>\n      <td>Office Supplies</td>\n      <td>Binders and Binder Accessories</td>\n      <td>Cardinal Slant-D® Ring Binder, Heavy Gauge Vinyl</td>\n      <td>Small Box</td>\n      <td>0.39</td>\n      <td>10/3/2012</td>\n    </tr>\n    <tr>\n      <th>2011-07-10</th>\n      <td>80</td>\n      <td>483</td>\n      <td>High</td>\n      <td>30</td>\n      <td>4965.7595</td>\n      <td>0.08</td>\n      <td>Regular Air</td>\n      <td>1198.97</td>\n      <td>195.99</td>\n      <td>3.99</td>\n      <td>Clay Rozendal</td>\n      <td>Nunavut</td>\n      <td>Nunavut</td>\n      <td>Corporate</td>\n      <td>Technology</td>\n      <td>Telephones and Communication</td>\n      <td>R380</td>\n      <td>Small Box</td>\n      <td>0.58</td>\n      <td>7/12/2011</td>\n    </tr>\n    <tr>\n      <th>2010-08-28</th>\n      <td>85</td>\n      <td>515</td>\n      <td>Not Specified</td>\n      <td>19</td>\n      <td>394.2700</td>\n      <td>0.08</td>\n      <td>Regular Air</td>\n      <td>30.94</td>\n      <td>21.78</td>\n      <td>5.94</td>\n      <td>Carlos Soltero</td>\n      <td>Nunavut</td>\n      <td>Nunavut</td>\n      <td>Consumer</td>\n      <td>Office Supplies</td>\n      <td>Appliances</td>\n      <td>Holmes HEPA Air Purifier</td>\n      <td>Medium Box</td>\n      <td>0.50</td>\n      <td>8/30/2010</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### `3.4.1` Use Sample Method to Create Line Chart\n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\n# use sample method\ndf2 = df.sample(n=100, random_state=25, axis=0)\n\n# add labels\nplt.xlabel('Order Date')\nplt.ylabel('Order Quantity')\n\n# add title\nplt.title('Superstore Sales')\n\n# select Order Quantity and plot\ndf2['Order Quantity'].plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n<AxesSubplot: title={'center': 'Superstore Sales'}, xlabel='Order Date', ylabel='Order Quantity'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-62-output-2.png){width=585 height=432}\n:::\n:::\n\n\n## `3.5` Statistical Plots\n\n### `3.5.1` Scatterplot\n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\n# create a scatterplot with darkgray dots of size 150\ncars.plot(kind='scatter', x='hp', y='mpg', c=['darkgray'], s=150)\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n<AxesSubplot: xlabel='hp', ylabel='mpg'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-63-output-2.png){width=585 height=433}\n:::\n:::\n\n\n### `3.5.2` Boxplots\n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\n# create 2 boxplots with matplotlib\ncars.boxplot(column='mpg', by='am')\ncars.boxplot(column='wt', by='am')\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n<AxesSubplot: title={'center': 'wt'}, xlabel='am'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-64-output-2.png){width=583 height=458}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-64-output-3.png){width=587 height=458}\n:::\n:::\n\n\n# `4.0` Math and Statistics\n\n## `4.1` Arrays\n\n### `4.1.1` Creating Arrays\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\na = np.array([1,2,3,4,5,6])\nb = np.array([6,5,4,3,2,1])\na\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\narray([6, 5, 4, 3, 2, 1])\n```\n:::\n:::\n\n\n### `4.1.2` Array Arithimetic\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\na*10\na+b\na-b\na*b\na/b\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\narray([0.16666667, 0.4       , 0.75      , 1.33333333, 2.5       ,\n       6.        ])\n```\n:::\n:::\n\n\n## `4.2` Matricies\n\n### `4.2.1` Creating Matricies\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\naa = np.array([[2,3,6],[1,3,5],[10,20,30]])\nbb = np.array([[0,1,2],[3,4,5],[6,7,8]])\naa\nbb\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n```\n:::\n:::\n\n\n### `4.2.2` Multiplying Matricies\n\n::: {.cell execution_count=67}\n``` {.python .cell-code}\naa*bb\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\narray([[  0,   3,  12],\n       [  3,  12,  25],\n       [ 60, 140, 240]])\n```\n:::\n:::\n\n\n### `4.2.3` Dot Product of Matricies\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\nnp.dot(aa,bb)\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\narray([[ 45,  56,  67],\n       [ 39,  48,  57],\n       [240, 300, 360]])\n```\n:::\n:::\n\n\n## `4.3` Summary Statistics\n\n### `4.3.1` Sum of Column values\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\ncars.sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\ncar_names    Mazda RX4Mazda RX4 WagDatsun 710Hornet 4 Drive...\nmpg                                                      642.9\ncyl                                                        198\ndisp                                                    7383.1\nhp                                                        4694\ndrat                                                    115.09\nwt                                                     102.952\nqsec                                                    571.16\nvs                                                          14\nam                                                          13\ngear                                                       118\ncarb                                                        90\ndtype: object\n```\n:::\n:::\n\n\n### `4.3.2` Sum of Row values\n\n::: {.cell execution_count=70}\n``` {.python .cell-code}\ncars.sum(axis=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/90/4rtssdj16dl23f_f66qj0t3w0000gn/T/ipykernel_1775/1808080884.py:1: FutureWarning:\n\nDropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n0     328.980\n1     329.795\n2     259.580\n3     426.135\n4     590.310\n5     385.540\n6     656.920\n7     270.980\n8     299.570\n9     350.460\n10    349.660\n11    510.740\n12    511.500\n13    509.850\n14    728.560\n15    726.644\n16    725.695\n17    213.850\n18    195.165\n19    206.955\n20    273.775\n21    519.650\n22    506.085\n23    646.280\n24    631.175\n25    208.215\n26    272.570\n27    273.683\n28    670.690\n29    379.590\n30    694.710\n31    288.890\ndtype: float64\n```\n:::\n:::\n\n\n### `4.3.3` Median\n\n::: {.cell execution_count=71}\n``` {.python .cell-code}\ncars.median()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/90/4rtssdj16dl23f_f66qj0t3w0000gn/T/ipykernel_1775/2356643283.py:1: FutureWarning:\n\nThe default value of numeric_only in DataFrame.median is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\nmpg      19.200\ncyl       6.000\ndisp    196.300\nhp      123.000\ndrat      3.695\nwt        3.325\nqsec     17.710\nvs        0.000\nam        0.000\ngear      4.000\ncarb      2.000\ndtype: float64\n```\n:::\n:::\n\n\n### `4.3.4` Mean\n\n::: {.cell execution_count=72}\n``` {.python .cell-code}\ncars.mean()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/90/4rtssdj16dl23f_f66qj0t3w0000gn/T/ipykernel_1775/1764053374.py:1: FutureWarning:\n\nThe default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\nmpg      20.090625\ncyl       6.187500\ndisp    230.721875\nhp      146.687500\ndrat      3.596563\nwt        3.217250\nqsec     17.848750\nvs        0.437500\nam        0.406250\ngear      3.687500\ncarb      2.812500\ndtype: float64\n```\n:::\n:::\n\n\n### `4.3.5` Max\n\n::: {.cell execution_count=73}\n``` {.python .cell-code}\ncars.max()\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\ncar_names    Volvo 142E\nmpg                33.9\ncyl                   8\ndisp              472.0\nhp                  335\ndrat               4.93\nwt                5.424\nqsec               22.9\nvs                    1\nam                    1\ngear                  5\ncarb                  8\ndtype: object\n```\n:::\n:::\n\n\n### `4.3.6` Find index value for row with max value\n\n::: {.cell execution_count=74}\n``` {.python .cell-code}\nmpg = cars.mpg\nmpg.idxmax()\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\n19\n```\n:::\n:::\n\n\n### `4.3.7` Standard Deviation\n\n::: {.cell execution_count=75}\n``` {.python .cell-code}\ncars.std()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/90/4rtssdj16dl23f_f66qj0t3w0000gn/T/ipykernel_1775/2703001680.py:1: FutureWarning:\n\nThe default value of numeric_only in DataFrame.std is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=75}\n```\nmpg       6.026948\ncyl       1.785922\ndisp    123.938694\nhp       68.562868\ndrat      0.534679\nwt        0.978457\nqsec      1.786943\nvs        0.504016\nam        0.498991\ngear      0.737804\ncarb      1.615200\ndtype: float64\n```\n:::\n:::\n\n\n### `4.3.8` Variance\n\n::: {.cell execution_count=76}\n``` {.python .cell-code}\ncars.var()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/90/4rtssdj16dl23f_f66qj0t3w0000gn/T/ipykernel_1775/2053581105.py:1: FutureWarning:\n\nThe default value of numeric_only in DataFrame.var is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\nmpg        36.324103\ncyl         3.189516\ndisp    15360.799829\nhp       4700.866935\ndrat        0.285881\nwt          0.957379\nqsec        3.193166\nvs          0.254032\nam          0.248992\ngear        0.544355\ncarb        2.608871\ndtype: float64\n```\n:::\n:::\n\n\n### `4.3.9` Counts\n\n::: {.cell execution_count=77}\n``` {.python .cell-code}\ngear = cars.gear\ngear.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n3    15\n4    12\n5     5\nName: gear, dtype: int64\n```\n:::\n:::\n\n\n### `4.3.10` Descriptive Statistics\n\n::: {.cell execution_count=78}\n``` {.python .cell-code}\ncars.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cyl</th>\n      <th>disp</th>\n      <th>hp</th>\n      <th>drat</th>\n      <th>wt</th>\n      <th>qsec</th>\n      <th>vs</th>\n      <th>am</th>\n      <th>gear</th>\n      <th>carb</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.000000</td>\n      <td>32.0000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>20.090625</td>\n      <td>6.187500</td>\n      <td>230.721875</td>\n      <td>146.687500</td>\n      <td>3.596563</td>\n      <td>3.217250</td>\n      <td>17.848750</td>\n      <td>0.437500</td>\n      <td>0.406250</td>\n      <td>3.687500</td>\n      <td>2.8125</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6.026948</td>\n      <td>1.785922</td>\n      <td>123.938694</td>\n      <td>68.562868</td>\n      <td>0.534679</td>\n      <td>0.978457</td>\n      <td>1.786943</td>\n      <td>0.504016</td>\n      <td>0.498991</td>\n      <td>0.737804</td>\n      <td>1.6152</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>10.400000</td>\n      <td>4.000000</td>\n      <td>71.100000</td>\n      <td>52.000000</td>\n      <td>2.760000</td>\n      <td>1.513000</td>\n      <td>14.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>1.0000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>15.425000</td>\n      <td>4.000000</td>\n      <td>120.825000</td>\n      <td>96.500000</td>\n      <td>3.080000</td>\n      <td>2.581250</td>\n      <td>16.892500</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>2.0000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>19.200000</td>\n      <td>6.000000</td>\n      <td>196.300000</td>\n      <td>123.000000</td>\n      <td>3.695000</td>\n      <td>3.325000</td>\n      <td>17.710000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>2.0000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>22.800000</td>\n      <td>8.000000</td>\n      <td>326.000000</td>\n      <td>180.000000</td>\n      <td>3.920000</td>\n      <td>3.610000</td>\n      <td>18.900000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>4.0000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>33.900000</td>\n      <td>8.000000</td>\n      <td>472.000000</td>\n      <td>335.000000</td>\n      <td>4.930000</td>\n      <td>5.424000</td>\n      <td>22.900000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>5.000000</td>\n      <td>8.0000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## `4.4` Summarizing Categorical Data\n\n### `4.4.1` Count Carborators of Each Car\n\n::: {.cell execution_count=79}\n``` {.python .cell-code}\ncarb = cars.carb\ncarb.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\n4    10\n2    10\n1     7\n3     3\n6     1\n8     1\nName: carb, dtype: int64\n```\n:::\n:::\n\n\n### `4.4.2` Group By Gear\n\n::: {.cell execution_count=80}\n``` {.python .cell-code}\n# subset data\ncars_cat = cars[['cyl', 'vs', 'am', 'gear', 'carb']]\n# Group by gear\ngears_group = cars_cat.groupby('gear')\ngears_group.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"8\" halign=\"left\">cyl</th>\n      <th colspan=\"2\" halign=\"left\">vs</th>\n      <th>...</th>\n      <th colspan=\"2\" halign=\"left\">am</th>\n      <th colspan=\"8\" halign=\"left\">carb</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>...</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>gear</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>15.0</td>\n      <td>7.466667</td>\n      <td>1.187234</td>\n      <td>4.0</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>15.0</td>\n      <td>0.200000</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>15.0</td>\n      <td>2.666667</td>\n      <td>1.175139</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12.0</td>\n      <td>4.666667</td>\n      <td>0.984732</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>6.0</td>\n      <td>6.0</td>\n      <td>12.0</td>\n      <td>0.833333</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>12.0</td>\n      <td>2.333333</td>\n      <td>1.302678</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5.0</td>\n      <td>6.000000</td>\n      <td>2.000000</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>6.0</td>\n      <td>8.0</td>\n      <td>8.0</td>\n      <td>5.0</td>\n      <td>0.200000</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>4.400000</td>\n      <td>2.607681</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>6.0</td>\n      <td>8.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 32 columns</p>\n</div>\n```\n:::\n:::\n\n\n### `4.4.3` Transforming Variables to Categorical Data type\n\n::: {.cell execution_count=81}\n``` {.python .cell-code}\n# create new column\ncars['group'] = pd.Series(cars.gear, dtype = 'category')\n# look at new variable \ncars['group'].dtypes\n# look at distribution\ncars['group'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\n3    15\n4    12\n5     5\nName: group, dtype: int64\n```\n:::\n:::\n\n\n### `4.4.4` Describe Categorical Data with Crosstabs\n\n::: {.cell execution_count=82}\n``` {.python .cell-code}\npd.crosstab(cars['am'], cars['gear'])\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>gear</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n    </tr>\n    <tr>\n      <th>am</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>8</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}