{
  "hash": "c14c93862827697ba3d3bf0b11b99065",
  "result": {
    "markdown": "---\ntitle: \"R and SQLite\"\ndate: \"2023-01-23\"\ncategories: [R, SQL]\ntoc: true\ndraft: true\n---\n\n\n\n::: {.panel-tabset}\n\n### `0.0 Set-Up`\n\n**Contents:**\n\n* 0.1 Packages\n\n* 0.2 Data\n\n* 0.3 Data base\n\n### `0.1 Packages`\n\nFor all my data queries and manipulation in R I will be using base R, [dplyr](https://dplyr.tidyverse.org/), and [magrittr](https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(magrittr)\n```\n:::\n\n\nTo create a SQL database, and run SQL queries in R chunks I will be using a package called [RSQLite](https://cran.r-project.org/web/packages/RSQLite/index.html). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RSQLite)\n```\n:::\n\n\n### `0.2 Data` \n\nThis post will use three data sets that I copied from [Learn SQL](https://www.sql-practice.com/): \n\n1. `patients`: Which includes patient_id, first_name, last_name, gender, birth_date, city, province_id, allergies, height, and weight. Note I only copied the first 1000 entries. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients <- utils::read.csv('../../00_data/patients.csv')\n```\n:::\n\n\n2. `province_names`: Which includes province_id, and province_name. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince_names <- utils::read.csv(\"../../00_data/province_names.csv\")\n```\n:::\n\n\n3. `admissions`: which includes patient_id, admission_date, discharge_date, diagnosis, attending_doctor_id\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmissions <- utils::read.csv(\"../../00_data/admissions.csv\")\n```\n:::\n\n\n\n### `0.3 Database`  \n\nTo create a database use: \n\n* `dbConnect()` to connect to a SQL data base called Hospital.db in the 00_data folder. \n\n* `SQLite()` to connect to a SQLite database file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhosp <- RSQLite::dbConnect(RSQLite::SQLite(),\n                           \"../../00_data/Hospital.db\")\n```\n:::\n\n\nTo define data within the database use:\n\n* `dbWriteTable()` to create a data set within the hospital database first call the data base (hosp), define a name, and then define the data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbWriteTable(hosp,\n                      \"patients\",\n                      patients)\nRSQLite::dbWriteTable(hosp,\n                      \"province_names\",\n                      province_names)\nRSQLite::dbWriteTable(hosp,\n                      \"admissions\",\n                      admissions)\n```\n:::\n\n\nVerify the three data sets are in the database using:\n\n* `dbListTables()` to list the tables within the hosp database. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbListTables(hosp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"admissions\"     \"patients\"       \"province_names\"\n```\n:::\n:::\n\n\n---\n\n\n# `11.` Show by week the revenue by province, and city. \n\n::: {.panel-tabset}\n\n### `11.0`\n\n**Contents**\n\n* 11.1 Solution in R\n\n* 11.2 Solution in SQL\n\n### `11.1 R`\n\nStart by defining discharge_week_num using:\n\n* `strftime()` to input discharge_date from the admissions data and format by week of the year.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmissions$discharge_week_num <- base::strftime(admissions$discharge_date, format = \"%V\")\n```\n:::\n\n\nRedefine the cost_after_insurance column as an integer using: \n\n* `as.interger` to convert cost_after_insurance to an integer. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients <- patients %>%\n  dplyr::mutate(\n    has_insurance = dplyr::case_when(\n    patient_id %%2==1 ~ \"Yes\",\n    patient_id %%2!=1 ~ \"No\"\n  ),cost_after_insurance = dplyr::case_when(\n    has_insurance == \"Yes\" ~ 10,\n    has_insurance == \"No\" ~ 50\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npatients$cost_after_insurance <- as.integer(patients$cost_after_insurance)\n```\n:::\n\n\nCreate a list of patients, admission, and province names data called hosp using: \n\n* `list` to create a list. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhosp <- base::list(patients, admissions, province_names) \n```\n:::\n\n\nTo show weekly revenue by province in R use: \n\n* `Reduce` to use a function to combine all the data sets in the hosp list. \n\n* `group_by` to group the data by discharge_week_num, and then by province_name. \n\n* `summarise` to define weekly_cost_after_insurance.\n\n* `sum` to add up the cost_after_insurance by week and province_name. \n\n* `arrange` to arrange by discharge_week_num.\n\n* `head()` to show the first ten rows of data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::Reduce(function(x,y)merge(x,y, all=TRUE), hosp) %>%\n  dplyr::group_by(discharge_week_num, province_name, city)  %>%\n  dplyr::summarise(cost_after_insurance = base::sum(cost_after_insurance)) %>%\n  dplyr::arrange(discharge_week_num) %>%\n  utils::head(10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'discharge_week_num', 'province_name'. You\ncan override using the `.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n# Groups:   discharge_week_num, province_name [3]\n   discharge_week_num province_name city         cost_after_insurance\n   <chr>              <chr>         <chr>                       <int>\n 1 01                 Alberta       Walnut Grove                   10\n 2 01                 Manitoba      Red River                      50\n 3 01                 Ontario       Ancaster                       50\n 4 01                 Ontario       Athens                         50\n 5 01                 Ontario       Barrie                         60\n 6 01                 Ontario       Burlington                     10\n 7 01                 Ontario       Caledonia                      10\n 8 01                 Ontario       Carlisle                       50\n 9 01                 Ontario       Elmira                         50\n10 01                 Ontario       Fruitland                      10\n```\n:::\n:::\n\n\nTo show the weekly revenue by city modify: \n\n* `group_by` adding city. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::Reduce(function(x,y)merge(x,y, all=TRUE), hosp) %>%\n  dplyr::group_by(discharge_week_num, province_name, city)  %>%\n  dplyr::summarise(cost_after_insurance = base::sum(cost_after_insurance)) %>%\n  dplyr::arrange(discharge_week_num) %>%\n  utils::head(10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'discharge_week_num', 'province_name'. You\ncan override using the `.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n# Groups:   discharge_week_num, province_name [3]\n   discharge_week_num province_name city         cost_after_insurance\n   <chr>              <chr>         <chr>                       <int>\n 1 01                 Alberta       Walnut Grove                   10\n 2 01                 Manitoba      Red River                      50\n 3 01                 Ontario       Ancaster                       50\n 4 01                 Ontario       Athens                         50\n 5 01                 Ontario       Barrie                         60\n 6 01                 Ontario       Burlington                     10\n 7 01                 Ontario       Caledonia                      10\n 8 01                 Ontario       Carlisle                       50\n 9 01                 Ontario       Elmira                         50\n10 01                 Ontario       Fruitland                      10\n```\n:::\n:::\n\n\n### `11.2 SQL`\n\n**COMING SOON**\n\nIn SQL use: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT \")\n```\n:::\n\n\n\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}