{
  "hash": "0a42eef7d002f0958c9b4d244ea9d16d",
  "result": {
    "markdown": "---\ntitle: \"R and SQLite\"\ndate: \"2023-01-23\"\ncategories: [R, SQL]\ntoc: true\ndraft: true\n---\n\n\n\n\n::: {.panel-tabset}\n\n### `0.0 Set-Up`\n\n**Contents:**\n\n* 0.1 Packages\n\n* 0.2 Data\n\n* 0.3 Data base\n\n### `0.1 Packages`\n\nFor all my data queries and manipulation in R I will be using base R, [dplyr](https://dplyr.tidyverse.org/), and [magrittr](https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(magrittr)\n```\n:::\n\n\nTo create a SQL database, and run SQL queries in R chunks I will be using a package called [RSQLite](https://cran.r-project.org/web/packages/RSQLite/index.html). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RSQLite)\n```\n:::\n\n\n### `0.2 Data` \n\nThis post will use three data sets that I copied from [Learn SQL](https://www.sql-practice.com/): \n\n1. `patients`: Which includes patient_id, first_name, last_name, gender, birth_date, city, province_id, allergies, height, and weight. Note I only copied the first 1000 entries. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients <- utils::read.csv('../../00_data/patients.csv')\n```\n:::\n\n\n2. `province_names`: Which includes province_id, and province_name. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince_names <- utils::read.csv(\"../../00_data/province_names.csv\")\n```\n:::\n\n\n3. `admissions`: which includes patient_id, admission_date, discharge_date, diagnosis, attending_doctor_id\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmissions <- utils::read.csv(\"../../00_data/admissions.csv\")\n```\n:::\n\n\n4. `doctors`: which includes doctor_id, first_name, last_name, and specialty. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoctors <- utils::read.csv(\"../../00_data/doctors.csv\")\n```\n:::\n\n\n### `0.3 Database`  \n\nTo create a database use: \n\n* `dbConnect()` to connect to a SQL data base called Hospital.db in the 00_data folder. \n\n* `SQLite()` to connect to a SQLite database file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhosp <- RSQLite::dbConnect(RSQLite::SQLite(),\n                           \"../../00_data/Hospital.db\")\n```\n:::\n\n\nTo define data within the database use:\n\n* `dbWriteTable()` to create a data set within the hospital database first call the data base (hosp), define a name, and then define the data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbWriteTable(hosp,\n                      \"patients\",\n                      patients)\nRSQLite::dbWriteTable(hosp,\n                      \"province_names\",\n                      province_names)\nRSQLite::dbWriteTable(hosp,\n                      \"admissions\",\n                      admissions)\nRSQLite::dbWriteTable(hosp,\n                      \"doctors\",\n                      doctors)\n```\n:::\n\n\nVerify the three data sets are in the database using:\n\n* `dbListTables()` to list the tables within the hosp database. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbListTables(hosp)\n```\n:::\n\n\n---\n\n\n# `11.` For each day display total admissions on that day. Disply the amount changed from the previous day. \n\n### `11.0`\n\n**Contents**\n\n* 11.1 Solutions in R\n\n* 11.2 Solutions in SQL\n\n### `11.1 R`\n\n\n::: {.cell}\n\n:::\n\n\n### `11.2 SQL` \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(hosp,\n           \"SELECT admission_date,\n           COUNT(*) AS total_admissions,\n           COUNT(admission_date) - LAG(COUNT(admission_date)) OVER(ORDER BY admission_date) AS admission_count_change\nFROM admissions\nGROUP BY admission_date\"\n           )\n```\n:::\n\n\n# `12.` Show patient_id, first_name, last_name, and attending doctor's specialty. Show only the patients who has a diagnosis as \"Epilepsey\" and the doctors first name is \"Lisa\". \n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoctors\n```\n:::\n\n\n\n### SQL\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(hosp,\n           \"SELECT\n  p.patient_id,\n  p.first_name AS patient_first_name,\n  p.last_name AS patient_last_name,\n  d.specialty AS attending_doctor_specialty\nFROM patients p\n  JOIN admissions a ON a.patient_id = p.patient_id\n  JOIN doctors d ON d.doctor_id = a.attending_doctor_id\nWHERE\n  d.first_name = 'Lisa' and\n  a.diagnosis = 'Epilepsy'\"\n           )\n```\n:::\n\n\n\n# `13.` Show all the patients grouped into weight groups. Show the total amount of patients in each weight group. Order the list by the weight group decending. \n\nFor example, if they weight 100 to 109 pounds they are placed in the 100 weight group, 110-119 = 110 weight group, etc. \n\n\n### Contents\n\n### R\n\n### SQL \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(hosp,\n           \"SELECT\n  COUNT(*) AS patients_in_group,\n  FLOOR(weight / 10) * 10 AS weight_group\nFROM patients\nGROUP BY weight_group\nORDER BY weight_group DESC\"\n           )\n```\n:::\n\n\n# `14.` Show patient_id, weight, height, isObese from the patients table. Display isObese as a boolean 0 or 1. \n\nWeight is in units kg, and height is in units cm. \n\nObese is defined as weight(kg)/(height(m)^2)>=30.\n\n### Contents\n\n### R\n\n### SQL\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT patient_id, \n                            weight, \n                            height, \n                     (CASE \n                     WHEN weight/(POWER(height/100.0,2)) >= 30 THEN 1\n      ELSE 0\n      END) AS isObese\nFROM patients\")\n```\n:::\n\n\n\n# `15.` Show by week (month?) the revenue by province, and city. \n\n--> what if I grouped by month? could I do that in SQL? \n\n::: {.panel-tabset}\n\n### `11.0`\n\n**Contents**\n\n* 11.1 Solution in R\n\n* 11.2 Solution in SQL\n\n### `11.1 R`\n\nStart by defining discharge_week_num using:\n\n* `strftime()` to input discharge_date from the admissions data and format by week of the year.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmissions$discharge_week_num <- base::strftime(admissions$discharge_date, format = \"%V\")\n```\n:::\n\n\nRedefine the cost_after_insurance column as an integer using: \n\n* `as.interger` to convert cost_after_insurance to an integer. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npatients <- patients %>%\n  dplyr::mutate(\n    has_insurance = dplyr::case_when(\n    patient_id %%2==1 ~ \"Yes\",\n    patient_id %%2!=1 ~ \"No\"\n  ),cost_after_insurance = dplyr::case_when(\n    has_insurance == \"Yes\" ~ 10,\n    has_insurance == \"No\" ~ 50\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npatients$cost_after_insurance <- as.integer(patients$cost_after_insurance)\n```\n:::\n\n\nCreate a list of patients, admission, and province names data called hosp using: \n\n* `list` to create a list. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhosp <- base::list(patients, admissions, province_names) \n```\n:::\n\n\nTo show weekly revenue by province in R use: \n\n* `Reduce` to use a function to combine all the data sets in the hosp list. \n\n* `group_by` to group the data by discharge_week_num, and then by province_name. \n\n* `summarise` to define weekly_cost_after_insurance.\n\n* `sum` to add up the cost_after_insurance by week and province_name. \n\n* `arrange` to arrange by discharge_week_num.\n\n* `head()` to show the first ten rows of data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::Reduce(function(x,y)merge(x,y, all=TRUE), hosp) %>%\n  dplyr::group_by(discharge_week_num, province_name, city)  %>%\n  dplyr::summarise(cost_after_insurance = base::sum(cost_after_insurance)) %>%\n  dplyr::arrange(discharge_week_num) %>%\n  utils::head(10)\n```\n:::\n\n\nTo show the weekly revenue by city modify: \n\n* `group_by` adding city. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::Reduce(function(x,y)merge(x,y, all=TRUE), hosp) %>%\n  dplyr::group_by(discharge_week_num, province_name, city)  %>%\n  dplyr::summarise(cost_after_insurance = base::sum(cost_after_insurance)) %>%\n  dplyr::arrange(discharge_week_num) %>%\n  na.omit() %>%\n  utils::head(10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nweekly_cost <- base::Reduce(function(x,y)merge(x,y, all=TRUE), hosp) %>%\n  dplyr::group_by(discharge_week_num, province_name)  %>%\n  dplyr::summarise(cost_after_insurance = base::sum(cost_after_insurance)) %>%\n  dplyr::arrange(discharge_week_num) %>%\n  na.omit()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(plotly)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- weekly_cost %>% ggplot(aes(x = discharge_week_num, \n                           y = cost_after_insurance,\n                           color = province_name)) +\n  geom_point() +\n  geom_line() +\n  geom_smooth() \nggplotly(x)\n\n# weekly_cost\n```\n:::\n\n\n\n\n\n### `11.2 SQL`\n\n**COMING SOON**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dbReadTable(hosp, \"province_names\")\n```\n:::\n\n\n\nIn SQL use: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT *\n                     FROM admissions\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nRSQLite::dbGetQuery(hosp,\n                    \"SELECT admission_date,\n                     COUNT(admission_date) AS patients\n                     FROM admissions\n                     GROUP BY admission_date\n                     ORDER BY patients DESC\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(hosp,\n           \"SELECT attending_doctor_id,\n            COUNT(*) AS total_diagnosis\n            FROM admissions\n            WHERE attending_doctor_id IS NOT 'NULL'\n            GROUP BY attending_doctor_id\n            ORDER BY total_diagnosis DESC\n            LIMIT 10\"\n           )\n```\n:::\n\n\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}