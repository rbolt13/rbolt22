{
  "hash": "367347edd83952e756c6b7b50596010f",
  "result": {
    "markdown": "---\ntitle: \"NBA Circular Bar Charts - Holiday Games\"\ndate: \"2022-08-29\"\ncategories: [R, Data Visuals, Web-Scraping]\ntoc: true\ndraft: true\n---\n\n\nThis post is an updated version of NBA circular bar charts, which are used to compare teams competing on Christmas Day.\n\n![](../../00_img/holiday_games_22.jpeg)\n\n\n\n\n\n# `0.0` Introduction\n\nThis post is an updated version of older post I have on my previous blog called, [NBA Play in Games - Circular Barplots of Simple Stats](https://rbolt2.netlify.app/post/2022-04-15-nba-play-in-games-circular-barplots-of-simple-stats/). When re-reading this post I realized the code was repetitive, and not very efficient. So instead of moving the code over  \n\n\nMost of my past posts from that blog have been updated slightly and put on my current blog. \n\nHowever my older post was repetitive, and not very efficient. I've instead rewritten the code for that post to use more lists, and for loops. \n\nseemed tedious the way I originally wrote it. So here I am 6+ months later re-writing what I have previously done to compare teams competing on Christmas Day:\n\n-   Boston Celtics Vs. Milwaukee Bucks\n\n-   Golden State Warriors Vs. Phoenix Suns\n\n-   Brooklyn Nets Vs. Los Angeles Lakers\n\n-   Dallas Mavericks Vs. and Utah Jazz.\n\n# `1.0` Set Up\n\nTo make these plots I will use three packages, one of which I created. To install my package make sure you have the `devtools` package installed so that you can use the `install_github()` function to use my package.\n\n1.  rvest : to gather the data from Basketball Reference\n\n2.  tidyverse : to clean the data\n\n3.  NBAcharts : to create the circular bar charts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"devtools\")\ndevtools::install_github(\"rbolt13/NBAcharts\")\n# load packages \nlibrary(rvest) \nlibrary(tidyverse)\nlibrary(NBAcharts)\n```\n:::\n\n\n## `1.1` Initialize Team Variables\n\nTo start I am going to initialize all team variables, and then put all those into a list. This will make it easier to extract, more efficient to update, and potentially use again in the future for different teams.\n\nNote: For each teams HTML I used [Team Color Codes](https://teamcolorcodes.com/). I did not use black or white because white blends into the background of the graphs, and black would hide the labels. For the Brooklyn Nets I did not use their actual black and white team colors, but instead used different shades of grey. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# team variables: name, slug, and colors\ncels <- list(team_name = \"Boston Celtics\",\n             slug = \"BOS\",\n             colors = c(\"#007A33\", \n                        \"#BA9653\", \n                        \"#963821\"))\nbucks <- list(team_name = \"Milwaukee Bucks\",\n              slug = \"MIL\",\n              colors = c(\"#00471B\",\n                         \"#EEE1C6\",\n                         \"#0077C0\"))\ngsw <- list(team_name = \"Golden State Warriors\",\n            slug = \"GSW\",\n            colors = c(\"#1D428A\",\n                       \"#FFC72C\"))\nsuns <- list(team_name = \"Phoenix Suns\",\n             slug = \"PHO\",\n             colors = c(\"#1D1160\",\n                        \"#E56020\",\n                        \"#63727A\",\n                        \"#F9AD1B\",\n                        \"#B95915\",\n                        \"#BEC0C2\"))\nnets <- list(team_name = \"Brooklyn Nets\",\n             slug = \"BRK\",\n             colors = c(\"#272727\",\n                        \"#F9F9F9\"))\nlakers <- list(team_name = \"Los Angeles Lakers\",\n               slug = \"LAL\",\n               colors = c(\"#552583\",\n                          \"#FDB927\"))\nmavs <- list(team_name = \"Dallas Mavericks\",\n             slug = \"DAL\",\n             colors = c(\"#00538C\",\n                        \"#002B5E\",\n                        \"#B8C4CA\"))\njazz <- list(team_name = \"Utah Jazz\",\n             slug = \"UTA\",\n             colors = c(\"#002B5C\",\n                        \"#00471B\",\n                        \"#F9A01B\"))\n# list of teams\nteam_list <- list(cels,\n                  bucks,\n                  gsw,\n                  suns,\n                  nets,\n                  lakers,\n                  mavs,\n                  jazz)\n```\n:::\n\n\n## `1.2` Initialize Graph Variables\n\nAll graphs will have the same caption information about who created the graph, sources, and date. \n\nEach \n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_cap <- c(\"\\n\\n Data Visualisation by Randi Bolt\\n https://www.rbolt.me/\\nSource: Basketball Reference \\nLink: https://www.basketball-reference.com/\\nDate: December 23rd, 2022\")\n\nnba_stats <- list(c(\"Steals\",\n                    \"Blocks\",\n                    \"Defensive Rebounds\",\n                    \"Points Per Game\",\n                    \"Assists\",\n                    \"Turn Overs\"))\n\nnba_doers <- list(c(\"stealers\",\n               \"blockers\",\n               \"defensive rebounders\",\n               \"points per game scorers\",\n               \"assitsters\",\n               \"turn overers\"))\n```\n:::\n\n\n## `1.3` Graph Title For Loop\n\nDoesn't work :(, might need to check other outputs with similar form. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnba_t <- list()\nnba_title <- list()\n\nfor(i in 1:length(team_list)){\n  op <- team_list[[c(i,1)]]\n  for(j in 1:length(nba_stats)){\n    output <- paste0(op,\n                   \" \", \n                   nba_stats[[c(1,j)]])\n    nba_t[[i]] <- output\n  }\n  nba_title[[i]] <- nba_t\n}\n\n# nba_title\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnba_title <- list()\n\nfor(i in 1:length(team_list)){\n  for(j in 1:length(nba_stats))\n  output <- paste0(team_list[[c(i,1)]],\n                   \" \", \n                   nba_stats[[c(1,i)]])\n  nba_title[[i]] <- output\n}\n\n# nba_title\n\n# nba_stats[[c(1,2)]]\n```\n:::\n\n\n## `1.4` Graph Caption Subtitle For Loop\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnba_sub_cap <- list()\n\nfor(i in length(nba_doers))\n{\n  output <- paste0(\"This visualization shows the top 25% of \", nba_doers[[i]], \".\")\n  nba_sub_cap[[i]] <- output\n}\n```\n:::\n\n\n# `2.0` Functions\n\nThis post will use a handful of functions to accomplish the end goal of creating multiple circular bar plots. These functions include:\n\n-   `scrape_bbR()`: This function scrapes data tables off basketball reference.\n\n    -   `s_tb()`: This is a nested function that scrapes a defined table off basketball reference. Within the `scrape_bbR()` this nested function is scraping the totals and per-game tables. This can be updated on line 132, within the stat_tb list.\n\n-   `sub_nba()`: This function subsets a larger data frame of team data into two column data sets with a players name, and a specific statistic. The subset data is then subset again to the top 25% of players with that stat. \n\n- `data_list()`: This function uses to create a list of stat tables for each team. The stat tables being subset for each team are: steals, blocks, defensive rebounds, assists, turnovers, and points per game.\n\n- `color_ramp()`: This function uses a teams colors and subset data to create color pallets. \n\n- ``\n\n- `nba_graphs()`\n\n## `2.1` Scraping Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscrape_bbR <- function(slug){\n  \"\n  A function that scrapes and merges statistics tables from Basektball Reference. \n  \n  @param slug is a 3 letter character string that represents the teams url address.\n  \n  @return merged_tb which is a df of NBA team statistics.\n  \"\n  # URL\n  url <- base::paste0(\"https://www.basketball-reference.com/teams/\",\n                slug,\"/2023.html\")\n  \n  # Nested Table Scraping Function\n  s_tb <- function(stat_tb, url){\n    \"\n    A function that scrapes a defined table off a specific Basketball reference URL. \n    \n    @param url is a character string that represents a web address where the table is located.\n    @param stat_tb is a character string that represents the stats table to scrape. \n    \n    @return s_tb is a df of a NBA teams specific statistics table. \n    \"\n    s_tb <- url %>%\n      read_html %>%\n      html_node(stat_tb) %>% \n      html_table()\n    \n    # Assign Column 2 = \"player\"\n    base::names(s_tb)[2] <- \"player\"\n    \n    # Replace NA values with 0 (for quantile function)\n    s_tb[base::is.na(s_tb)] <- 0\n    \n    return(s_tb)\n  }\n  \n  # Saved as a list to make it easy to modify\n  stat_tb <- list(ttl_stat <- s_tb(\"#totals\", url),\n                  per_game_stat <- s_tb(\"#per_game\", url))\n  \n  # Merge Stats tables\n  merged_tb <- merge(stat_tb[[1]], \n                     stat_tb[[2]],\n                     by = c(\"Age\", \"player\", \"G\", \"GS\"))\n\n  \n  base::return(merged_tb)\n}\n```\n:::\n\n\nThe following for loop will cycle through team_list slugs, and scrape team data for each team in the list. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnba_data <- list()\n\nfor (i in 1:length(team_list))\n  {\n  output <- scrape_bbR(team_list[[c(i,2)]])\n  nba_data[[i]] <- output\n}\n\nhead(nba_data, 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# save data \n# base::saveRDS(nba_data, \"../../00_data/nba_raw_data_12_24_22.rds\")\n```\n:::\n\n\n\n## `2.2` Subset Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsub_nba <- function(team_data, team_stat){\n  \"\n  A function that .. \n  \n  @param team_data is a dataframe of NBA stats. \n  @param team_stat is \n  \n  @return sub_nba_data is a dataframe of subset NBA stats. \n  \"\n  # subset data\n  sub_data <- data.frame(\"player\" = team_data[\"player\"],\n                         team_stat = team_data[team_stat])\n  # filter by Q4 \n  q_data <- sub_data %>%\n    filter(sub_data[[2]] >= quantile(sub_data[[2]])[[4]])\n  \n  # arrange ascending\n  sub_nba_data <- mutate(q_data %>%\n                           arrange(-q_data[[2]]))\n    \n  return(sub_nba_data)\n} \n```\n:::\n\n\n## `2.3` Data List Function\n\nThere is a lot of simple stats to look at, so this \n\nbut to narrow it down lets look at some big ones: steals, blocks, defensive rebounds, assists, turnovers, and points per game.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_list <- function(val){\n  \"\n  A function that takes in a value\n  \"\n  data <- list(steals = sub_nba(nba_data[[val]], \n                                \"STL.x\"),\n               blocks = sub_nba(nba_data[[val]], \n                                \"BLK.x\"),\n               def_reb = sub_nba(nba_data[[val]], \n                                 \"DRB.x\"),\n               assists = sub_nba(nba_data[[val]], \n                                 \"AST.x\"),\n               turnovers = sub_nba(nba_data[[val]], \n                                   \"TOV.x\"),\n               points_per_game = sub_nba(nba_data[[val]], \n                                         \"PTS/G\")\n               )\n  return(data)\n}\n```\n:::\n\n\n## `2.4` Color Pallets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolor_ramp <- function(colors,data){\n  \"\n  \"\n  grDevices::colorRampPalette(colors)(base::length(data[[c(1,1)]]))\n}\n```\n:::\n\n\n## `2.5` Graph Captions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnba_sub_cap <- list()\n\nfor(i in length(nba_doers))\n{\n  output <- paste0(\"This visualization shows the top 25% of \", nba_doers[[i]], \".\")\n  nba_sub_cap[[i]] <- output\n}\n```\n:::\n\n\n## `2.6` Graph Ring Scale\n\nFor each graph there will be three rings that would be equivalent to defining a y-axis. To acquire these value for each graph I initially find the max value for each nba table, divide that value by three, and round it to the nearest whole number. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs <- list()\nring_scale <- list()\n\nfor (i in 1:length(nba_subset_data)) {\nfor (j in 1:length(nba_subset_data[[i]])) {\n  output <- round(max(nba_subset_data[[c(i,j,2)]]/3))\n  rs[[j]] <- output\n}\n  ring_scale[[i]] <- rs\n}\n\nring_scale\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## `2.7` Graphs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnba_graphs <-function(data, r_scale, cp, ct, cs, cc){\n  \"\n  This function ...\n  \"\n  circ_col_chart(player_data = data,\n                 ring_scale = r_scale,\n                 ring_inner = r_scale+2,\n                 ring_middle = r_scale*2+2,\n                 ring_outer = r_scale*3+2,\n                 ringlab_inner = r_scale,\n                 ringlab_middle = r_scale*2,\n                 ringlab_outer = r_scale*3,\n                 col_pal = cp,\n                 chart_title = ct, \n                 chart_subtitle = cs,\n                 chart_source = cc, \n                 cc_chart_filename = paste0(\"../../00_figs/\", ct, Sys.Date(), \".png\")\n                 )\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnba_graphs(nba_subset_data[[c(1,1)]],\n           ring_scale[[c(1,1)]],\n           nba_color_pallets[[c(1,1)]],\n           \"title\",\n           \"subtitle\",\n           \"source\")\n```\n:::\n\n\n\n# 3.0 Collecting Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnba_data <- list()\n\nfor (i in 1:length(team_list))\n  {\n  output <- scrape_bbR(team_list[[c(i,2)]])\n  nba_data[[i]] <- output\n}\n\nhead(nba_data, 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2.2 and 2.3 \nnba_subset_data <- list()\n\nfor (i in 1:length(nba_data))\n{\n  output <- data_list(i)\n  nba_subset_data[[i]] <- output\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2.4\nnba_color_pallets <- list()\n\nfor(i in 1:length(nba_subset_data))\n{\n  output <- color_ramp(team_list[[c(i,3)]], nba_subset_data[[i]])\n  nba_color_pallets[[i]] <- output\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}