[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\nTry again.\n\nx <- data.frame(x = c(\"1\",\"2\",\"3\"), y = c(\"a\",\"b\",\"c\"))\nx\n\n  x y\n1 1 a\n2 2 b\n3 3 c"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Randi Bolt",
    "section": "",
    "text": "This blog is currently under construction so be sure to check out the links below and my old blog which showcases all of my academic and personal projects from undergrad."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "So the links are below the text."
  },
  {
    "objectID": "posts/life-update/index.html",
    "href": "posts/life-update/index.html",
    "title": "Life Update",
    "section": "",
    "text": "Here is a post."
  },
  {
    "objectID": "journal.html",
    "href": "journal.html",
    "title": "Misc",
    "section": "",
    "text": "2022 10 October\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022 10 October\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022 10 October\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022 10 October\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n2022 10 October\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n2022 13 August\n\n\n\n\n\n\n\n\n\n\n\nAug 13, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022 06 June\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n2022 06 June\n\n\n\n\n\n\n\n\n\n\n\nJun 12, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n2022 04 April\n\n\n\n\n\n\n\n\n\n\n\nApr 21, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "journal/life-update/index.html",
    "href": "journal/life-update/index.html",
    "title": "August 13th, 2022",
    "section": "",
    "text": "Hello hello! Welcome to the first post of my ✨new blog✨ . I’ve started this Journal to help develop my written skills and hopefully boost my confidence when communicating complicated subject matter.\nFor this first post I’ve decided to give a life update on some of the big events of the last six months."
  },
  {
    "objectID": "journal/2022-10-06/index.html",
    "href": "journal/2022-10-06/index.html",
    "title": "October 6th, 2022",
    "section": "",
    "text": "Tim and Sam from the telivision show Detroiters making suprised faces."
  },
  {
    "objectID": "journal/life-update/index.html#april-2022",
    "href": "journal/life-update/index.html#april-2022",
    "title": "August 13th, 2022",
    "section": "April 2022",
    "text": "April 2022\nMy partner and I bought a house 💗"
  },
  {
    "objectID": "journal/life-update/index.html#june-2022",
    "href": "journal/life-update/index.html#june-2022",
    "title": "August 13th, 2022",
    "section": "June 2022",
    "text": "June 2022\nI graduated magna cum laude from Portland State University with my Bachelors of Science in Mathematics.\nI also started my job as a Product Owner (software analyst expert?), thanks to a referral by my friend Amy."
  },
  {
    "objectID": "journal/life-update/index.html#august-2022",
    "href": "journal/life-update/index.html#august-2022",
    "title": "August 13th, 2022",
    "section": "August 2022",
    "text": "August 2022\nMy sister got married.\n\n\n\nPhoto of my family from my sister’s wedding."
  },
  {
    "objectID": "journal/life-update/index.html#october-2022",
    "href": "journal/life-update/index.html#october-2022",
    "title": "August 13th, 2022",
    "section": "October 2022",
    "text": "October 2022\nI created this blog, and my partner set up plex."
  },
  {
    "objectID": "journal/2022-04-21/index.html",
    "href": "journal/2022-04-21/index.html",
    "title": "April 21st, 2022",
    "section": "",
    "text": "My Partner Tanner and I bought a house."
  },
  {
    "objectID": "journal/2022-10-08/index.html",
    "href": "journal/2022-10-08/index.html",
    "title": "October 8th, 2022",
    "section": "",
    "text": "Wasn’t able to work on my blog as much as I would have liked, because the internet was down. However we did get some yard work and house chores done.\nTomorrow I am going on a wine tasting with some people who work for the same company as me. My friend who got me the job, also set up the wine tasting. I’m nervous, but looking forward to it."
  },
  {
    "objectID": "journal/2022-10-07/index.html",
    "href": "journal/2022-10-07/index.html",
    "title": "October 7th, 2022",
    "section": "",
    "text": "I did another Linkedin Learn video today on web scrapping and natural language processing. Tomorrow I’m hoping to spend more time on my blog.\nI’m just keeping my head down at work, and trying to figure out more productive ways to interact with my coworkers. It will be helpful to use the long weekend to clear my head."
  },
  {
    "objectID": "journal/2022-06-21/index.html",
    "href": "journal/2022-06-21/index.html",
    "title": "June 21st, 2022",
    "section": "",
    "text": "I started my first day as a product owner / software analyst at finastra."
  },
  {
    "objectID": "journal/2022-08-13/index.html",
    "href": "journal/2022-08-13/index.html",
    "title": "August 13th, 2022",
    "section": "",
    "text": "Photo of my family from my sister’s wedding."
  },
  {
    "objectID": "journal/2022-08-13/index.html#april-2022",
    "href": "journal/2022-08-13/index.html#april-2022",
    "title": "August 13th, 2022",
    "section": "April 2022",
    "text": "April 2022\nMy partner and I bought a house 💗"
  },
  {
    "objectID": "journal/2022-08-13/index.html#june-2022",
    "href": "journal/2022-08-13/index.html#june-2022",
    "title": "August 13th, 2022",
    "section": "June 2022",
    "text": "June 2022\nI graduated magna cum laude from Portland State University with my Bachelors of Science in Mathematics.\nI also started my job as a Product Owner (software analyst expert?), thanks to a referral by my friend Amy."
  },
  {
    "objectID": "journal/2022-08-13/index.html#august-2022",
    "href": "journal/2022-08-13/index.html#august-2022",
    "title": "August 13th, 2022",
    "section": "August 2022",
    "text": "August 2022\nMy sister got married.\n\n\n\nPhoto of my family from my sister’s wedding."
  },
  {
    "objectID": "journal/2022-08-13/index.html#october-2022",
    "href": "journal/2022-08-13/index.html#october-2022",
    "title": "August 13th, 2022",
    "section": "October 2022",
    "text": "October 2022\nI created this blog, and my partner set up plex."
  },
  {
    "objectID": "journal/2022-06-12/index.html",
    "href": "journal/2022-06-12/index.html",
    "title": "June 12th, 2022",
    "section": "",
    "text": "I graduated magna cum laude from Portland State University with my Bachelors of Science in Mathematics."
  },
  {
    "objectID": "misc/2022-08-13/index.html",
    "href": "misc/2022-08-13/index.html",
    "title": "August 13th, 2022",
    "section": "",
    "text": "Photo of my family from my sister’s wedding."
  },
  {
    "objectID": "misc/2022-04-21/index.html",
    "href": "misc/2022-04-21/index.html",
    "title": "April 21st, 2022",
    "section": "",
    "text": "My Partner Tanner and I bought a house."
  },
  {
    "objectID": "misc/2022-06-12/index.html",
    "href": "misc/2022-06-12/index.html",
    "title": "June 12th, 2022",
    "section": "",
    "text": "I graduated magna cum laude from Portland State University with my Bachelors of Science in Mathematics."
  },
  {
    "objectID": "misc/2022-06-21/index.html",
    "href": "misc/2022-06-21/index.html",
    "title": "June 21st, 2022",
    "section": "",
    "text": "I started my first day as a product owner / software analyst at finastra."
  },
  {
    "objectID": "misc/2022-10-08/index.html",
    "href": "misc/2022-10-08/index.html",
    "title": "October 8th, 2022",
    "section": "",
    "text": "Tanner got the compost bin set up and some weeds pulled."
  },
  {
    "objectID": "misc/2022-10-06/index.html",
    "href": "misc/2022-10-06/index.html",
    "title": "October 6th, 2022",
    "section": "",
    "text": "Tim and Sam from the telivision show Detroiters making suprised faces."
  },
  {
    "objectID": "misc/2022-10-07/index.html",
    "href": "misc/2022-10-07/index.html",
    "title": "October 7th, 2022",
    "section": "",
    "text": "“Can you keep the deep water still and clear, so it reflects without blurring?” - Techniques, Tao Te Ching"
  },
  {
    "objectID": "misc/2022-10-10/index.html",
    "href": "misc/2022-10-10/index.html",
    "title": "Octorber 10th, 2022",
    "section": "",
    "text": "The full moon in October is the Hunter’s Moon."
  },
  {
    "objectID": "datsci.html",
    "href": "datsci.html",
    "title": "Data Science",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "datsci/post-with-code/index.html",
    "href": "datsci/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\nTry again.\n\nx <- data.frame(x = c(\"1\",\"2\",\"3\"), y = c(\"a\",\"b\",\"c\"))\nx\n\n  x y\n1 1 a\n2 2 b\n3 3 c"
  },
  {
    "objectID": "datsci/welcome/index.html",
    "href": "datsci/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "misc/2022-10-14/index.html",
    "href": "misc/2022-10-14/index.html",
    "title": "October 14th, 2022",
    "section": "",
    "text": "Headphones on. Do not disturb mode activated."
  },
  {
    "objectID": "00_index.html",
    "href": "00_index.html",
    "title": "Randi Bolt",
    "section": "",
    "text": "Hello, and welcome to my blog!!"
  },
  {
    "objectID": "03_misc.html",
    "href": "03_misc.html",
    "title": "Miscellaneous",
    "section": "",
    "text": "2022 10 October\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022 10 October\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022 10 October\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022 10 October\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n2022 10 October\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n2022 13 August\n\n\n\n\n\n\n\n\n\n\n\nAug 13, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2022 06 June\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n2022 06 June\n\n\n\n\n\n\n\n\n\n\n\nJun 12, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n2022 04 April\n\n\n\n\n\n\n\n\n\n\n\nApr 21, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "03_misc/2022-10-10/index.html",
    "href": "03_misc/2022-10-10/index.html",
    "title": "Octorber 10th, 2022",
    "section": "",
    "text": "The full moon in October is the Hunter’s Moon."
  },
  {
    "objectID": "03_misc/2022-08-13/index.html",
    "href": "03_misc/2022-08-13/index.html",
    "title": "August 13th, 2022",
    "section": "",
    "text": "Photo of my family from my sister’s wedding."
  },
  {
    "objectID": "03_misc/2022-04-21/index.html",
    "href": "03_misc/2022-04-21/index.html",
    "title": "April 21st, 2022",
    "section": "",
    "text": "My Partner Tanner and I bought a house."
  },
  {
    "objectID": "03_misc/2022-06-12/index.html",
    "href": "03_misc/2022-06-12/index.html",
    "title": "June 12th, 2022",
    "section": "",
    "text": "I graduated magna cum laude from Portland State University with my Bachelors of Science in Mathematics."
  },
  {
    "objectID": "03_misc/2022-10-14/index.html",
    "href": "03_misc/2022-10-14/index.html",
    "title": "October 14th, 2022",
    "section": "",
    "text": "Headphones on. Do not disturb mode activated."
  },
  {
    "objectID": "03_misc/2022-06-21/index.html",
    "href": "03_misc/2022-06-21/index.html",
    "title": "June 21st, 2022",
    "section": "",
    "text": "I started my first day as a product owner / software analyst at finastra."
  },
  {
    "objectID": "03_misc/2022-10-08/index.html",
    "href": "03_misc/2022-10-08/index.html",
    "title": "October 8th, 2022",
    "section": "",
    "text": "Tanner got the compost bin set up and some weeds pulled."
  },
  {
    "objectID": "03_misc/2022-10-06/index.html",
    "href": "03_misc/2022-10-06/index.html",
    "title": "October 6th, 2022",
    "section": "",
    "text": "Tim and Sam from the telivision show Detroiters making suprised faces."
  },
  {
    "objectID": "03_misc/2022-10-07/index.html",
    "href": "03_misc/2022-10-07/index.html",
    "title": "October 7th, 2022",
    "section": "",
    "text": "“Can you keep the deep water still and clear, so it reflects without blurring?” - Techniques, Tao Te Ching"
  },
  {
    "objectID": "01_datsci/post-with-code/index.html",
    "href": "01_datsci/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\nTry again.\n\nx <- data.frame(x = c(\"1\",\"2\",\"3\"), y = c(\"a\",\"b\",\"c\"))\nx\n\n  x y\n1 1 a\n2 2 b\n3 3 c"
  },
  {
    "objectID": "01_datsci/welcome/index.html",
    "href": "01_datsci/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "01_datsci.html",
    "href": "01_datsci.html",
    "title": "Data Science",
    "section": "",
    "text": "NBA\n\n\nWeb-Scraping\n\n\n\n\n\n\n\n\n\n\n\nOct 19, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "02_math.html",
    "href": "02_math.html",
    "title": "Mathematics",
    "section": "",
    "text": "Proof\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nRandi Bolt\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "04_proj.html",
    "href": "04_proj.html",
    "title": "Projects",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "05_stat.html",
    "href": "05_stat.html",
    "title": "Statistics",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "03_stat.html",
    "href": "03_stat.html",
    "title": "Statistics",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "04_misc/2022-10-10/index.html",
    "href": "04_misc/2022-10-10/index.html",
    "title": "Octorber 10th, 2022",
    "section": "",
    "text": "The full moon in October is the Hunter’s Moon."
  },
  {
    "objectID": "04_misc/2022-08-13/index.html",
    "href": "04_misc/2022-08-13/index.html",
    "title": "August 13th, 2022",
    "section": "",
    "text": "Photo of my family from my sister’s wedding."
  },
  {
    "objectID": "04_misc/2022-04-21/index.html",
    "href": "04_misc/2022-04-21/index.html",
    "title": "April 21st, 2022",
    "section": "",
    "text": "My Partner Tanner and I bought a house."
  },
  {
    "objectID": "04_misc/2022-06-12/index.html",
    "href": "04_misc/2022-06-12/index.html",
    "title": "June 12th, 2022",
    "section": "",
    "text": "I graduated magna cum laude from Portland State University with my Bachelors of Science in Mathematics."
  },
  {
    "objectID": "04_misc/2022-10-14/index.html",
    "href": "04_misc/2022-10-14/index.html",
    "title": "October 14th, 2022",
    "section": "",
    "text": "Headphones on. Do not disturb mode activated."
  },
  {
    "objectID": "04_misc/2022-06-21/index.html",
    "href": "04_misc/2022-06-21/index.html",
    "title": "June 21st, 2022",
    "section": "",
    "text": "I started my first day as a product owner / software analyst at finastra."
  },
  {
    "objectID": "04_misc/2022-10-08/index.html",
    "href": "04_misc/2022-10-08/index.html",
    "title": "October 8th, 2022",
    "section": "",
    "text": "Tanner got the compost bin set up and some weeds pulled."
  },
  {
    "objectID": "04_misc/2022-10-06/index.html",
    "href": "04_misc/2022-10-06/index.html",
    "title": "October 6th, 2022",
    "section": "",
    "text": "Tim and Sam from the telivision show Detroiters making suprised faces."
  },
  {
    "objectID": "04_misc/2022-10-07/index.html",
    "href": "04_misc/2022-10-07/index.html",
    "title": "October 7th, 2022",
    "section": "",
    "text": "“Can you keep the deep water still and clear, so it reflects without blurring?” - Techniques, Tao Te Ching"
  },
  {
    "objectID": "04_misc.html",
    "href": "04_misc.html",
    "title": "Miscellaneous",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "01_datsci/2022_10_19_NBA-functions/index.html",
    "href": "01_datsci/2022_10_19_NBA-functions/index.html",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "",
    "text": "In this tutorial I will be creating functions to scrape NBA data. The goal here is to prepare these functions to use in a package for future analysis."
  },
  {
    "objectID": "01_datsci/2022_10_19_NBA-functions/index.html#team-statistics",
    "href": "01_datsci/2022_10_19_NBA-functions/index.html#team-statistics",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "1_1. Team Statistics:",
    "text": "1_1. Team Statistics:\nThe first function I’m creating scrapes team statistics, which will need the user to input the teams url slug, the year that team attended or attends the NBA playoffs, and the stats_tb or statistics table that corresponds to what is shown on Basketball Reference. Currently not all tables work, but it should work for: #per_game, #totals, #per_36_minutes, and #advanced.\n\nscrape_team_data <- function(slug, year, stats_tb){\n    \"\n  A function that returns a data frame of team statistics. \n  \n  @param slug is string of three letters that represents the teams url. \n  @param year is a string that corresponds to the NBA finals.\n  @param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced\n  \n  @return a df of team statistics\n  \"\n  # define team page URL\n  url <- base::paste0(\"https://www.basketball-reference.com/teams/\",\n                slug,\"/\", year, \".html\")\n  \n  # Read stats table\n  stats_tb <- url %>%\n  read_html %>%\n  html_node(stats_tb) %>% \n  html_table()\n  \n  # Rename Column 2 to Name \n  base::names(stats_tb)[2] <- \"Name\"\n  \n  # Replace NA values with 0 (for stat functions)\n  stats_tb[base::is.na(stats_tb)] <- 0\n  \n  # make data frame\n  df <- base::data.frame(stats_tb)\n  base::return(df)\n  }\n\n\nExamples\n\nA. Current Blazers Roster\n\nzers_roster <- scrape_team_data(\"POR\",\"2022\",\"#roster\")\nutils::head(zers_roster)\n\n  No.              Name Pos  Ht  Wt         Birth.Date Var.7 Exp\n1  21    Keljin Blevins  SF 6-4 200  November 24, 1995    us   1\n2   4    Greg Brown III  SF 6-9 205  September 1, 2001    us   R\n3  33  Robert Covington  PF 6-7 209  December 14, 1990    us   8\n4  34 Jarron Cumberland  SG 6-5 205 September 22, 1997    us   R\n5  18         Kris Dunn  PG 6-3 205     March 18, 1994    us   5\n6  16         CJ Elleby  SF 6-6 200      June 16, 2000    us   1\n                       College\n1 Southern Miss, Montana State\n2                        Texas\n3              Tennessee State\n4                   Cincinnati\n5                   Providence\n6             Washington State\n\n\n\n\nB. 1997 Chicago Bulls Total Statistics\n\nbulls_totals <- scrape_team_data(\"CHI\", \"1998\", \"#totals\")\nutils::head(bulls_totals)\n\n  Rk           Name Age  G GS   MP  FG  FGA   FG. X3P X3PA  X3P. X2P X2PA  X2P.\n1  1 Michael Jordan  34 82 82 3181 881 1893 0.465  30  126 0.238 851 1767 0.482\n2  2  Dennis Rodman  36 80 66 2856 155  360 0.431   4   23 0.174 151  337 0.448\n3  3     Ron Harper  34 82 82 2284 293  665 0.441  16   84 0.190 277  581 0.477\n4  4     Toni Kukoč  29 74 52 2235 383  841 0.455  63  174 0.362 320  667 0.480\n5  5    Luc Longley  29 58 58 1703 277  609 0.455   0    0 0.000 277  609 0.455\n6  6 Scottie Pippen  32 44 44 1652 315  704 0.447  61  192 0.318 254  512 0.496\n   eFG.  FT FTA   FT. ORB DRB  TRB AST STL BLK TOV  PF  PTS\n1 0.473 565 721 0.784 130 345  475 283 141  45 185 151 2357\n2 0.436  61 111 0.550 421 780 1201 230  47  18 147 238  375\n3 0.453 162 216 0.750 107 183  290 241 108  48  91 181  764\n4 0.493 155 219 0.708 121 206  327 314  76  37 154 149  984\n5 0.455 109 148 0.736 113 228  341 161  34  62 130 206  663\n6 0.491 150 193 0.777  53 174  227 254  79  43 109 116  841\n\n\nHere we can see when Michael Jordan won his 6th ring with the Chicago Bulls he was also the leagues leading point scorer with 2,357 total points that season. Dennis Rodman was also a league leader that season in rebounds collecting a total of 1,201 rebounds."
  },
  {
    "objectID": "01_datsci/2022_10_19_NBA-functions/index.html#player-statistics",
    "href": "01_datsci/2022_10_19_NBA-functions/index.html#player-statistics",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "1_2. Player Statistics",
    "text": "1_2. Player Statistics\nThe second function will scrape player statistics. The user will need to input the players name, and the stats_tb or statistics table that corresponds to what is shown on Basketball Reference. Currently not all tables work, but it should work for: #per_game, #totals, #per_36_minutes, and #advanced.\n\nscrape_player_data <- function(name, stats_tb){\n  \"\n  A function that returns a data frame of player statistics. \n  \n  @param name is a string that represnets an NBA players name\n  @param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced\n  \n  @return a df of player statistics\n  \"\n  # make name lower case\n  lower_case_name <- base::tolower(name)\n\n  # split name \n  split_name <- base::strsplit(lower_case_name, \" +\")[[1]]\n\n  # define first and last name\n  first_name <- split_name[[1]]\n  last_name <- split_name[[2]]\n  \n  # first letter of last name\n  letter <- base::substr(last_name, 1,1)\n  \n  # first five letters of last name \n  last_5 <- base::substr(last_name, 1, 5)\n  \n  # first two letters of first name\n  first_2 <- base::substr(first_name, 1,2)\n  \n  # define team page URL\n  url <- base::paste0(\"https://www.basketball-reference.com/players/\",letter ,\"/\",last_5,first_2,\"01.html\")\n  \n  # Read stats table\n  stats_tb <- url %>%\n  read_html %>%\n  html_node(stats_tb) %>% \n  html_table()\n  \n  # Rename Column 2 to Name \n  names(stats_tb)[2] <- \"Name\"\n  \n  # Replace NA values with 0 (for stat functions)\n  stats_tb[base::is.na(stats_tb)] <- 0\n  \n  # make list a dataframe\n  df <- base::data.frame(stats_tb)\n  \n  base::return(df)\n  }\n\n\nExamples\n\nC. Allen Iverson Per Game Stats\n\nai_per_game <- scrape_player_data(\"Allen Iverson\", \"#per_game\")\nhead(ai_per_game)\n\n   Season Name  Tm  Lg Pos  G GS   MP   FG  FGA  FG. X3P X3PA X3P. X2P X2PA\n1 1996-97   21 PHI NBA  PG 76 74 40.1  8.2 19.8 .416 2.0  6.0 .341 6.2 13.8\n2 1997-98   22 PHI NBA  PG 80 80 39.4  8.1 17.6 .461 0.9  2.9 .298 7.2 14.7\n3 1998-99   23 PHI NBA  SG 48 48 41.5  9.1 22.0 .412 1.2  4.1 .291 7.9 17.9\n4 1999-00   24 PHI NBA  SG 70 70 40.8 10.4 24.8 .421 1.3  3.7 .341 9.1 21.0\n5 2000-01   25 PHI NBA  SG 71 71 42.0 10.7 25.5 .420 1.4  4.3 .320 9.4 21.2\n6 2001-02   26 PHI NBA  SG 60 59 43.7 11.1 27.8 .398 1.3  4.5 .291 9.8 23.4\n  X2P. eFG.  FT  FTA  FT. ORB DRB TRB AST STL BLK TOV  PF  PTS\n1 .448 .467 5.0  7.2 .702 1.5 2.6 4.1 7.5 2.1 0.3 4.4 3.1 23.5\n2 .494 .486 4.9  6.7 .729 1.1 2.6 3.7 6.2 2.2 0.3 3.1 2.5 22.0\n3 .440 .439 7.4  9.9 .751 1.4 3.5 4.9 4.6 2.3 0.1 3.5 2.0 26.8\n4 .435 .446 6.3  8.9 .713 1.0 2.8 3.8 4.7 2.1 0.1 3.3 2.3 28.4\n5 .441 .447 8.2 10.1 .814 0.7 3.1 3.8 4.6 2.5 0.3 3.3 2.1 31.1\n6 .419 .422 7.9  9.8 .812 0.7 3.8 4.5 5.5 2.8 0.2 4.0 1.7 31.4\n\n\nNotice that when Allen Iverson won the NBA’s MVP in 2001 he was putting up about 31 points a game.\n\n\nD. Kareem Abdul-Jabbar Totals\n\nkaj_totals <- scrape_player_data(\"Kareem Abdul-Jabbar\", \"#totals\")\nutils::head(kaj_totals)\n\n   Season Name  Tm  Lg Pos  G GS   MP   FG  FGA   FG. X3P X3PA X3P.  X2P X2PA\n1 1969-70   22 MIL NBA   C 82  0 3534  938 1810 0.518   0    0    0  938 1810\n2 1970-71   23 MIL NBA   C 82  0 3288 1063 1843 0.577   0    0    0 1063 1843\n3 1971-72   24 MIL NBA   C 81  0 3583 1159 2019 0.574   0    0    0 1159 2019\n4 1972-73   25 MIL NBA   C 76  0 3254  982 1772 0.554   0    0    0  982 1772\n5 1973-74   26 MIL NBA   C 81  0 3548  948 1759 0.539   0    0    0  948 1759\n6 1974-75   27 MIL NBA   C 65  0 2747  812 1584 0.513   0    0    0  812 1584\n   X2P.  eFG.  FT FTA   FT. ORB DRB  TRB AST STL BLK TOV  PF  PTS Var.31\n1 0.518 0.518 485 743 0.653   0   0 1190 337   0   0   0 283 2361      0\n2 0.577 0.577 470 681 0.690   0   0 1311 272   0   0   0 264 2596      0\n3 0.574 0.574 504 732 0.689   0   0 1346 370   0   0   0 235 2822      0\n4 0.554 0.554 328 460 0.713   0   0 1224 379   0   0   0 208 2292      0\n5 0.539 0.539 295 420 0.702 287 891 1178 386 112 283   0 238 2191      0\n6 0.513 0.513 325 426 0.763 194 718  912 264  65 212   0 205 1949      0\n  Trp.Dbl\n1       0\n2       1\n3       1\n4       2\n5       3\n6       1"
  },
  {
    "objectID": "04_misc/post-with-code/index.html",
    "href": "04_misc/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\nTry again.\n\nx <- data.frame(x = c(\"1\",\"2\",\"3\"), y = c(\"a\",\"b\",\"c\"))\nx\n\n  x y\n1 1 a\n2 2 b\n3 3 c"
  },
  {
    "objectID": "04_misc/welcome/index.html",
    "href": "04_misc/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "02_math/02_00_P-logically-equivalent-neg-neg-P/index.html",
    "href": "02_math/02_00_P-logically-equivalent-neg-neg-P/index.html",
    "title": "Prove P is Logically Equivalent to the Negation of the Negation of P",
    "section": "",
    "text": "Solution 1\nConsider the truth table for P, \\(\\neg P\\), and \\(\\neg (\\neg P)\\), as shown below in Figure 1:\n\n\nFigure 1: Truth Table\n\n\nP\n\\(\\neg P\\)\n\\(\\neg (\\neg P)\\)\n\n\n\n\nT\nF\nT\n\n\nF\nT\nF\n\n\n\n\nSince the truth values for P and \\(\\neg (\\neg P)\\) are the same then P and \\(\\neg (\\neg P)\\) are logically equivalent.\n\n\nSolution 2\nSuppose by way of contradiction (BWOC) that P and \\(\\neg (\\neg P)\\) are not logically equivalent.\nLet P be true and then \\(\\neg (\\neg P)\\) would be false.\nIf P is true then \\(\\neg P\\) would be false, but \\(\\neg P\\) and \\(\\neg (\\neg P)\\) cannot both be false. Therefore BWOC \\(\\neg (\\neg P)\\equiv P\\).\n\\(\\square\\)"
  },
  {
    "objectID": "03_stat/2022_11_8_test/index.html",
    "href": "03_stat/2022_11_8_test/index.html",
    "title": "Test",
    "section": "",
    "text": "Hi hi"
  },
  {
    "objectID": "01_datsci/2022_10_19_NBA-functions/index.html#about-the-data",
    "href": "01_datsci/2022_10_19_NBA-functions/index.html#about-the-data",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "0_1. About-The-Data",
    "text": "0_1. About-The-Data\nI will be scrapping data from Basketball Reference which gets thier data updated regularly by a handful of contributors and sources. The main reasons I like using this data is because it’s reliable, updated regularly, and similar sites exist for other non-NBA Sports (such as: WNBA, Baseball, Football, and others) if I wanted to expand my research outside the NBA."
  },
  {
    "objectID": "01_datsci/2022_10_19_NBA-functions/index.html#package-installs",
    "href": "01_datsci/2022_10_19_NBA-functions/index.html#package-installs",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "0_2. Package Installs",
    "text": "0_2. Package Installs\nThe packages I will be using are rvest to scrape the data and magrittr to pipe it. To install these packages, copy the code below and remove the first comment hash (command - shift - c).\n\n## install packages\n# install.packages(\"rvest\",  \"magrittr\")\n\nThen load:\n\n# load packages \nlibrary(rvest) \nlibrary(magrittr)"
  },
  {
    "objectID": "01_datsci/2022_10_19_NBA-functions/index.html#box-scores",
    "href": "01_datsci/2022_10_19_NBA-functions/index.html#box-scores",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "1_3. Box Scores",
    "text": "1_3. Box Scores\nThe last function still needs a bit of work, but will pull box scores of all the NBA games on a given day. The user will need to enter the game_day or day of the games they want box scores for.\nNote: Ideally this function would return a list with each game being its own df, but for now it only prints one data frame that includes all games played on that date. There also seem to be issues when only one game is played, or it is the first game of the season (see examples below), but for now those issues are manageable.\n\nbox_scores <- function(game_day){\n  \"\n  A function that returns a data frame of box scores. \n  \n  @param game_day is a string that represents the date in the form Y-M-D\n  \n  @return a df of box scores from that day.\n  \"\n  # split by dash\n  split_date <- base::strsplit(game_day, \"-\")\n  \n  # year - month - day \n  year <- split_date[[1]][[1]]\n  month <- split_date[[1]][[2]]\n  day <- split_date[[1]][[3]]\n  \n  #url\n  url <- base::paste0(\"https://www.basketball-reference.com/boxscores/?month=\",\n                month ,\"&day=\", day,\"&year=\", year)\n  \n  # read url\n  html <- read_html(url)\n  \n  # extract all the 'div\" items from the html as tables\n  div <- html %>% \n    html_elements(\"div\") %>% \n    html_table()\n  \n  #remove empties\n  div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]\n  \n  # only keep rows == 7\n  div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]\n  \n  # empty list\n  my_vec <- base::list()\n  \n  #for loop\n  for(i in 1:base::length(div)) {        \n  my_out <- div[[i]][3:5,] \n  my_vec <- c(my_vec, my_out)\n  df <- base::data.frame(my_vec)\n  }\n  \n  df <- df[-1,]\n  \n  base::return(df)\n}\n\n\nExample\n\nE. Box Scores for 10-19-2022 (works correctly)\n\noct_19 <- box_scores(\"2022-10-19\")\noct_19\n\n       X1 X2 X3 X4 X5        X1.1 X2.1 X3.1 X4.1 X5.1    X1.2 X2.2 X3.2 X4.2\n2 Houston 20 30 30 27 New Orleans   32   26   40   32 Orlando   28   27   28\n3 Atlanta 26 33 25 33    Brooklyn   14   36   28   30 Detroit   17   40   34\n  X5.2       X1.3 X2.3 X3.3 X4.3 X5.3     X1.4 X2.4 X3.4 X4.4 X5.4 X6    X1.5\n2   26 Washington   36   24   27   27 New York   23   23   33   29  4 Chicago\n3   22    Indiana   25   27   25   30  Memphis   25   36   24   23  7   Miami\n  X2.5 X3.5 X4.5 X5.5          X1.6 X2.6 X3.6 X4.6 X5.6    X1.7 X2.7 X3.7 X4.7\n2   28   31   37   20 Oklahoma City   22   30   35   21  Dallas   32   30   19\n3   33   26   27   22     Minnesota   35   30   22   28 Phoenix   24   21   31\n  X5.7       X1.8 X2.8 X3.8 X4.8 X5.8        X1.9 X2.9 X3.9 X4.9 X5.9     X1.10\n2   24   Portland   32   19   33   31   Charlotte   38   30   30   31 Cleveland\n3   31 Sacramento   23   32   29   24 San Antonio   22   25   28   27   Toronto\n  X2.10 X3.10 X4.10 X5.10  X1.11 X2.11 X3.11 X4.11 X5.11\n2    22    35    27    21 Denver    30    23    27    22\n3    28    23    25    32   Utah    37    38    19    29\n\n\n\n\nF. Box scores for the first day of the ’22/’23 NBA season (issues)\n\noct_18 <- box_scores(\"2022-10-18\")\noct_18\n\n            X1 X2 X3 X4 X5         X1.1 X2.1 X3.1 X4.1 X5.1               X1.2\n2 Philadelphia 29 34 25 29    LA Lakers   22   30   19   38 Philadelphia 76ers\n3       Boston 24 39 35 28 Golden State   25   34   32   32 Western Conference\n  X2.2 X3.2 X4.2 X5.2    X6    X7   X8   X9 X10 X11 X12  X13 X14 X15  X16 X17\n2    0    1 .000  1.0 117.0 126.0 <NA> <NA>  NA  NA  NA <NA>  NA  NA <NA>  NA\n3    W    L W/L%   GB  PS/G  PA/G <NA> <NA>  NA  NA  NA <NA>  NA  NA <NA>  NA\n  X18 X19 X20 X21 X22  X23  X24  X25  X26  X27  X28  X29  X30  X31 X32 X33 X34\n2  NA  NA  NA  NA  NA <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>  NA  NA  NA\n3  NA  NA  NA  NA  NA <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>  NA  NA  NA\n   X35 X36 X37  X38 X39 X40 X41 X42 X43 X44\n2 <NA>  NA  NA <NA>  NA  NA  NA  NA  NA  NA\n3 <NA>  NA  NA <NA>  NA  NA  NA  NA  NA  NA\n\n\nIssue: For the first game of the season there is an are NA tables that are being pulled in.\nG. First game of the 1992 NBA Finals AKA Michael Jordan’s famous Shrug (issues)\n\nfinals_92_g1 <- box_scores(\"1992-6-3\")\nfinals_92_g1\n\n        X1 X2 X3 X4 X5     X1.1 X2.1 X3.1 X4.1 X5.1\n2 Portland 30 21 17 21 Portland   30   21   17   21\n3  Chicago 33 33 38 18  Chicago   33   33   38   18\n\n\nIssue: For days where only one game is played the one game is printed twice in the data frame."
  },
  {
    "objectID": "01_blog.html",
    "href": "01_blog.html",
    "title": "Blog",
    "section": "",
    "text": "NBA\n\n\nWeb-Scraping\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nOct 31, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nMath\n\n\nProof\n\n\n\n\n\n\n\n\n\n\n\nOct 24, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nGeometry\n\n\n\n\n\n\n\n\n\n\n\nMay 30, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nAbstract Math\n\n\n\n\n\n\n\n\n\n\n\nMay 23, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\nData Visuals\n\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\nNLP\n\n\nData Visuals\n\n\n\n\n\n\n\n\n\n\n\nApr 18, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nAbstract Math\n\n\n\n\n\n\n\n\n\n\n\nMar 28, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nGeometry\n\n\n\n\n\n\n\n\n\n\n\nMar 21, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nFeb 28, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\nData Visuals\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\nGeometry\n\n\n\n\n\n\n\n\n\n\n\nJan 31, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nMath\n\n\n\n\n\n\n\n\n\n\n\nJan 24, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\nLinear Regression\n\n\n\n\n\n\n\n\n\n\n\nDec 20, 2021\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nProof\n\n\nStatistics\n\n\nLinear Regression\n\n\n\n\n\n\n\n\n\n\n\nNov 29, 2021\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nStatistics\n\n\n\n\n\n\n\n\n\n\n\nNov 22, 2021\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nMath\n\n\nAbstract Math\n\n\n\n\n\n\n\n\n\n\n\nOct 25, 2021\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\nConditional Probabilty\n\n\nTree Diagrams\n\n\nStatistics\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2021\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\nGenerative Art\n\n\n\n\n\n\n\n\n\n\n\nSep 27, 2021\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\ntidycensus\n\n\nAPI\n\n\n\n\n\n\n\n\n\n\n\nSep 20, 2021\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\nData Visuals\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2021\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nAug 23, 2021\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "01_blog/2022_10_19_NBA-functions/index.html",
    "href": "01_blog/2022_10_19_NBA-functions/index.html",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "",
    "text": "In this tutorial I will be creating functions to scrape NBA data. The goal here is to prepare these functions to use in a package for future analysis."
  },
  {
    "objectID": "01_blog/2022_10_19_NBA-functions/index.html#about-the-data",
    "href": "01_blog/2022_10_19_NBA-functions/index.html#about-the-data",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "0_1. About-The-Data",
    "text": "0_1. About-The-Data\nI will be scrapping data from Basketball Reference which gets thier data updated regularly by a handful of contributors and sources. The main reasons I like using this data is because it’s reliable, updated regularly, and similar sites exist for other non-NBA Sports (such as: WNBA, Baseball, Football, and others) if I wanted to expand my research outside the NBA."
  },
  {
    "objectID": "01_blog/2022_10_19_NBA-functions/index.html#package-installs",
    "href": "01_blog/2022_10_19_NBA-functions/index.html#package-installs",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "0_2. Package Installs",
    "text": "0_2. Package Installs\nThe packages I will be using are rvest to scrape the data and magrittr to pipe it. To install these packages, copy the code below and remove the first comment hash (command - shift - c).\n\n## install packages\n# install.packages(\"rvest\",  \"magrittr\")\n\nThen load:\n\n# load packages \nlibrary(rvest) \nlibrary(magrittr)"
  },
  {
    "objectID": "01_blog/2022_10_19_NBA-functions/index.html#team-statistics",
    "href": "01_blog/2022_10_19_NBA-functions/index.html#team-statistics",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "1_1. Team Statistics:",
    "text": "1_1. Team Statistics:\nThe first function I’m creating scrapes team statistics, which will need the user to input the teams url slug, the year that team attended or attends the NBA playoffs, and the stats_tb or statistics table that corresponds to what is shown on Basketball Reference. Currently not all tables work, but it should work for: #per_game, #totals, #per_36_minutes, and #advanced.\n\nscrape_team_data <- function(slug, year, stats_tb){\n    \"\n  A function that returns a data frame of team statistics. \n  \n  @param slug is string of three letters that represents the teams url. \n  @param year is a string that corresponds to the NBA finals.\n  @param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced\n  \n  @return a df of team statistics\n  \"\n  # define team page URL\n  url <- base::paste0(\"https://www.basketball-reference.com/teams/\",\n                slug,\"/\", year, \".html\")\n  \n  # Read stats table\n  stats_tb <- url %>%\n  read_html %>%\n  html_node(stats_tb) %>% \n  html_table()\n  \n  # Rename Column 2 to Name \n  base::names(stats_tb)[2] <- \"Name\"\n  \n  # Replace NA values with 0 (for stat functions)\n  stats_tb[base::is.na(stats_tb)] <- 0\n  \n  # make data frame\n  df <- base::data.frame(stats_tb)\n  base::return(df)\n  }\n\n\nExamples\n\nA. Current Blazers Roster\n\nzers_roster <- scrape_team_data(\"POR\",\"2022\",\"#roster\")\nutils::head(zers_roster)\n\n  No.              Name Pos  Ht  Wt         Birth.Date Var.7 Exp\n1  21    Keljin Blevins  SF 6-4 200  November 24, 1995    us   1\n2   4    Greg Brown III  SF 6-9 205  September 1, 2001    us   R\n3  33  Robert Covington  PF 6-7 209  December 14, 1990    us   8\n4  34 Jarron Cumberland  SG 6-5 205 September 22, 1997    us   R\n5  18         Kris Dunn  PG 6-3 205     March 18, 1994    us   5\n6  16         CJ Elleby  SF 6-6 200      June 16, 2000    us   1\n                       College\n1 Southern Miss, Montana State\n2                        Texas\n3              Tennessee State\n4                   Cincinnati\n5                   Providence\n6             Washington State\n\n\n\n\nB. 1997 Chicago Bulls Total Statistics\n\nbulls_totals <- scrape_team_data(\"CHI\", \"1998\", \"#totals\")\nutils::head(bulls_totals)\n\n  Rk           Name Age  G GS   MP  FG  FGA   FG. X3P X3PA  X3P. X2P X2PA  X2P.\n1  1 Michael Jordan  34 82 82 3181 881 1893 0.465  30  126 0.238 851 1767 0.482\n2  2  Dennis Rodman  36 80 66 2856 155  360 0.431   4   23 0.174 151  337 0.448\n3  3     Ron Harper  34 82 82 2284 293  665 0.441  16   84 0.190 277  581 0.477\n4  4     Toni Kukoč  29 74 52 2235 383  841 0.455  63  174 0.362 320  667 0.480\n5  5    Luc Longley  29 58 58 1703 277  609 0.455   0    0 0.000 277  609 0.455\n6  6 Scottie Pippen  32 44 44 1652 315  704 0.447  61  192 0.318 254  512 0.496\n   eFG.  FT FTA   FT. ORB DRB  TRB AST STL BLK TOV  PF  PTS\n1 0.473 565 721 0.784 130 345  475 283 141  45 185 151 2357\n2 0.436  61 111 0.550 421 780 1201 230  47  18 147 238  375\n3 0.453 162 216 0.750 107 183  290 241 108  48  91 181  764\n4 0.493 155 219 0.708 121 206  327 314  76  37 154 149  984\n5 0.455 109 148 0.736 113 228  341 161  34  62 130 206  663\n6 0.491 150 193 0.777  53 174  227 254  79  43 109 116  841\n\n\nHere we can see when Michael Jordan won his 6th ring with the Chicago Bulls he was also the leagues leading point scorer with 2,357 total points that season. Dennis Rodman was also a league leader that season in rebounds collecting a total of 1,201 rebounds."
  },
  {
    "objectID": "01_blog/2022_10_19_NBA-functions/index.html#player-statistics",
    "href": "01_blog/2022_10_19_NBA-functions/index.html#player-statistics",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "1_2. Player Statistics",
    "text": "1_2. Player Statistics\nThe second function will scrape player statistics. The user will need to input the players name, and the stats_tb or statistics table that corresponds to what is shown on Basketball Reference. Currently not all tables work, but it should work for: #per_game, #totals, #per_36_minutes, and #advanced.\n\nscrape_player_data <- function(name, stats_tb){\n  \"\n  A function that returns a data frame of player statistics. \n  \n  @param name is a string that represnets an NBA players name\n  @param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced\n  \n  @return a df of player statistics\n  \"\n  # make name lower case\n  lower_case_name <- base::tolower(name)\n\n  # split name \n  split_name <- base::strsplit(lower_case_name, \" +\")[[1]]\n\n  # define first and last name\n  first_name <- split_name[[1]]\n  last_name <- split_name[[2]]\n  \n  # first letter of last name\n  letter <- base::substr(last_name, 1,1)\n  \n  # first five letters of last name \n  last_5 <- base::substr(last_name, 1, 5)\n  \n  # first two letters of first name\n  first_2 <- base::substr(first_name, 1,2)\n  \n  # define team page URL\n  url <- base::paste0(\"https://www.basketball-reference.com/players/\",letter ,\"/\",last_5,first_2,\"01.html\")\n  \n  # Read stats table\n  stats_tb <- url %>%\n  read_html %>%\n  html_node(stats_tb) %>% \n  html_table()\n  \n  # Rename Column 2 to Name \n  names(stats_tb)[2] <- \"Name\"\n  \n  # Replace NA values with 0 (for stat functions)\n  stats_tb[base::is.na(stats_tb)] <- 0\n  \n  # make list a dataframe\n  df <- base::data.frame(stats_tb)\n  \n  base::return(df)\n  }\n\n\nExamples\n\nC. Allen Iverson Per Game Stats\n\nai_per_game <- scrape_player_data(\"Allen Iverson\", \"#per_game\")\nhead(ai_per_game)\n\n   Season Name  Tm  Lg Pos  G GS   MP   FG  FGA  FG. X3P X3PA X3P. X2P X2PA\n1 1996-97   21 PHI NBA  PG 76 74 40.1  8.2 19.8 .416 2.0  6.0 .341 6.2 13.8\n2 1997-98   22 PHI NBA  PG 80 80 39.4  8.1 17.6 .461 0.9  2.9 .298 7.2 14.7\n3 1998-99   23 PHI NBA  SG 48 48 41.5  9.1 22.0 .412 1.2  4.1 .291 7.9 17.9\n4 1999-00   24 PHI NBA  SG 70 70 40.8 10.4 24.8 .421 1.3  3.7 .341 9.1 21.0\n5 2000-01   25 PHI NBA  SG 71 71 42.0 10.7 25.5 .420 1.4  4.3 .320 9.4 21.2\n6 2001-02   26 PHI NBA  SG 60 59 43.7 11.1 27.8 .398 1.3  4.5 .291 9.8 23.4\n  X2P. eFG.  FT  FTA  FT. ORB DRB TRB AST STL BLK TOV  PF  PTS\n1 .448 .467 5.0  7.2 .702 1.5 2.6 4.1 7.5 2.1 0.3 4.4 3.1 23.5\n2 .494 .486 4.9  6.7 .729 1.1 2.6 3.7 6.2 2.2 0.3 3.1 2.5 22.0\n3 .440 .439 7.4  9.9 .751 1.4 3.5 4.9 4.6 2.3 0.1 3.5 2.0 26.8\n4 .435 .446 6.3  8.9 .713 1.0 2.8 3.8 4.7 2.1 0.1 3.3 2.3 28.4\n5 .441 .447 8.2 10.1 .814 0.7 3.1 3.8 4.6 2.5 0.3 3.3 2.1 31.1\n6 .419 .422 7.9  9.8 .812 0.7 3.8 4.5 5.5 2.8 0.2 4.0 1.7 31.4\n\n\nNotice that when Allen Iverson won the NBA’s MVP in 2001 he was putting up about 31 points a game.\n\n\nD. Kareem Abdul-Jabbar Totals\n\nkaj_totals <- scrape_player_data(\"Kareem Abdul-Jabbar\", \"#totals\")\nutils::head(kaj_totals)\n\n   Season Name  Tm  Lg Pos  G GS   MP   FG  FGA   FG. X3P X3PA X3P.  X2P X2PA\n1 1969-70   22 MIL NBA   C 82  0 3534  938 1810 0.518   0    0    0  938 1810\n2 1970-71   23 MIL NBA   C 82  0 3288 1063 1843 0.577   0    0    0 1063 1843\n3 1971-72   24 MIL NBA   C 81  0 3583 1159 2019 0.574   0    0    0 1159 2019\n4 1972-73   25 MIL NBA   C 76  0 3254  982 1772 0.554   0    0    0  982 1772\n5 1973-74   26 MIL NBA   C 81  0 3548  948 1759 0.539   0    0    0  948 1759\n6 1974-75   27 MIL NBA   C 65  0 2747  812 1584 0.513   0    0    0  812 1584\n   X2P.  eFG.  FT FTA   FT. ORB DRB  TRB AST STL BLK TOV  PF  PTS Var.31\n1 0.518 0.518 485 743 0.653   0   0 1190 337   0   0   0 283 2361      0\n2 0.577 0.577 470 681 0.690   0   0 1311 272   0   0   0 264 2596      0\n3 0.574 0.574 504 732 0.689   0   0 1346 370   0   0   0 235 2822      0\n4 0.554 0.554 328 460 0.713   0   0 1224 379   0   0   0 208 2292      0\n5 0.539 0.539 295 420 0.702 287 891 1178 386 112 283   0 238 2191      0\n6 0.513 0.513 325 426 0.763 194 718  912 264  65 212   0 205 1949      0\n  Trp.Dbl\n1       0\n2       1\n3       1\n4       2\n5       3\n6       1"
  },
  {
    "objectID": "01_blog/2022_10_19_NBA-functions/index.html#box-scores",
    "href": "01_blog/2022_10_19_NBA-functions/index.html#box-scores",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "1_3. Box Scores",
    "text": "1_3. Box Scores\nThe last function still needs a bit of work, but will pull box scores of all the NBA games on a given day. The user will need to enter the game_day or day of the games they want box scores for.\nNote: Ideally this function would return a list with each game being its own df, but for now it only prints one data frame that includes all games played on that date. There also seem to be issues when only one game is played, or it is the first game of the season (see examples below), but for now those issues are manageable.\n\nbox_scores <- function(game_day){\n  \"\n  A function that returns a data frame of box scores. \n  \n  @param game_day is a string that represents the date in the form Y-M-D\n  \n  @return a df of box scores from that day.\n  \"\n  # split by dash\n  split_date <- base::strsplit(game_day, \"-\")\n  \n  # year - month - day \n  year <- split_date[[1]][[1]]\n  month <- split_date[[1]][[2]]\n  day <- split_date[[1]][[3]]\n  \n  #url\n  url <- base::paste0(\"https://www.basketball-reference.com/boxscores/?month=\",\n                month ,\"&day=\", day,\"&year=\", year)\n  \n  # read url\n  html <- read_html(url)\n  \n  # extract all the 'div\" items from the html as tables\n  div <- html %>% \n    html_elements(\"div\") %>% \n    html_table()\n  \n  #remove empties\n  div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]\n  \n  # only keep rows == 7\n  div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]\n  \n  # empty list\n  my_vec <- base::list()\n  \n  #for loop\n  for(i in 1:base::length(div)) {        \n  my_out <- div[[i]][3:5,] \n  my_vec <- c(my_vec, my_out)\n  df <- base::data.frame(my_vec)\n  }\n  \n  df <- df[-1,]\n  \n  base::return(df)\n}\n\n\nExample\n\nE. Box Scores for 10-19-2022 (works correctly)\n\noct_19 <- box_scores(\"2022-10-19\")\noct_19\n\n       X1 X2 X3 X4 X5        X1.1 X2.1 X3.1 X4.1 X5.1    X1.2 X2.2 X3.2 X4.2\n2 Houston 20 30 30 27 New Orleans   32   26   40   32 Orlando   28   27   28\n3 Atlanta 26 33 25 33    Brooklyn   14   36   28   30 Detroit   17   40   34\n  X5.2       X1.3 X2.3 X3.3 X4.3 X5.3     X1.4 X2.4 X3.4 X4.4 X5.4 X6    X1.5\n2   26 Washington   36   24   27   27 New York   23   23   33   29  4 Chicago\n3   22    Indiana   25   27   25   30  Memphis   25   36   24   23  7   Miami\n  X2.5 X3.5 X4.5 X5.5          X1.6 X2.6 X3.6 X4.6 X5.6    X1.7 X2.7 X3.7 X4.7\n2   28   31   37   20 Oklahoma City   22   30   35   21  Dallas   32   30   19\n3   33   26   27   22     Minnesota   35   30   22   28 Phoenix   24   21   31\n  X5.7       X1.8 X2.8 X3.8 X4.8 X5.8        X1.9 X2.9 X3.9 X4.9 X5.9     X1.10\n2   24   Portland   32   19   33   31   Charlotte   38   30   30   31 Cleveland\n3   31 Sacramento   23   32   29   24 San Antonio   22   25   28   27   Toronto\n  X2.10 X3.10 X4.10 X5.10  X1.11 X2.11 X3.11 X4.11 X5.11\n2    22    35    27    21 Denver    30    23    27    22\n3    28    23    25    32   Utah    37    38    19    29\n\n\n\n\nF. Box scores for the first day of the ’22/’23 NBA season (issues)\n\noct_18 <- box_scores(\"2022-10-18\")\noct_18\n\n            X1 X2 X3 X4 X5         X1.1 X2.1 X3.1 X4.1 X5.1               X1.2\n2 Philadelphia 29 34 25 29    LA Lakers   22   30   19   38 Philadelphia 76ers\n3       Boston 24 39 35 28 Golden State   25   34   32   32 Western Conference\n  X2.2 X3.2 X4.2 X5.2    X6    X7   X8   X9 X10 X11 X12  X13 X14 X15  X16 X17\n2    0    1 .000  1.0 117.0 126.0 <NA> <NA>  NA  NA  NA <NA>  NA  NA <NA>  NA\n3    W    L W/L%   GB  PS/G  PA/G <NA> <NA>  NA  NA  NA <NA>  NA  NA <NA>  NA\n  X18 X19 X20 X21 X22  X23  X24  X25  X26  X27  X28  X29  X30  X31 X32 X33 X34\n2  NA  NA  NA  NA  NA <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>  NA  NA  NA\n3  NA  NA  NA  NA  NA <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>  NA  NA  NA\n   X35 X36 X37  X38 X39 X40 X41 X42 X43 X44\n2 <NA>  NA  NA <NA>  NA  NA  NA  NA  NA  NA\n3 <NA>  NA  NA <NA>  NA  NA  NA  NA  NA  NA\n\n\nIssue: For the first game of the season there is an are NA tables that are being pulled in.\nG. First game of the 1992 NBA Finals AKA Michael Jordan’s famous Shrug (issues)\n\nfinals_92_g1 <- box_scores(\"1992-6-3\")\nfinals_92_g1\n\n        X1 X2 X3 X4 X5     X1.1 X2.1 X3.1 X4.1 X5.1\n2 Portland 30 21 17 21 Portland   30   21   17   21\n3  Chicago 33 33 38 18  Chicago   33   33   38   18\n\n\nIssue: For days where only one game is played the one game is printed twice in the data frame."
  },
  {
    "objectID": "01_blog/02_00_P-logically-equivalent-neg-neg-P/index.html",
    "href": "01_blog/02_00_P-logically-equivalent-neg-neg-P/index.html",
    "title": "Prove P is Logically Equivalent to the Negation of the Negation of P",
    "section": "",
    "text": "Solution 1\nConsider the truth table for P, \\(\\neg P\\), and \\(\\neg (\\neg P)\\), as shown below in Figure 1:\n\n\nFigure 1: Truth Table\n\n\nP\n\\(\\neg P\\)\n\\(\\neg (\\neg P)\\)\n\n\n\n\nT\nF\nT\n\n\nF\nT\nF\n\n\n\n\nSince the truth values for P and \\(\\neg (\\neg P)\\) are the same then P and \\(\\neg (\\neg P)\\) are logically equivalent.\n\n\nSolution 2\nSuppose by way of contradiction (BWOC) that P and \\(\\neg (\\neg P)\\) are not logically equivalent.\nLet P be true and then \\(\\neg (\\neg P)\\) would be false.\nIf P is true then \\(\\neg P\\) would be false, but \\(\\neg P\\) and \\(\\neg (\\neg P)\\) cannot both be false. Therefore BWOC \\(\\neg (\\neg P)\\equiv P\\).\n\\(\\square\\)"
  },
  {
    "objectID": "01_blog/2022-01-06-latex-hacks/index.html",
    "href": "01_blog/2022-01-06-latex-hacks/index.html",
    "title": "Latex",
    "section": "",
    "text": "Basic Symbols :\n\n\\(\\sim\\) : \\sim\n\\(\\circ\\) : \\circ\n\\(\\square\\) : \\square\n\\(\\equiv\\) : \\equiv\n\\(\\cong\\) : \\cong\n\\(\\unlhd\\) : \\unlhd\n\\(\\div\\) : \\div\n\\(\\nless\\) : \\nless\n\\(\\ngtr\\) : ngtr\n\\(\\emptyset\\) : \\emptyset\n\\(\\subseteq\\) : \\subseteq\n\\(a\\choose b\\) : a\\choose b\n\\(\\underset{i\\in I}U\\) : \\underset{i\\in I}U\n\\(\\Leftrightarrow\\) : \\Leftrightarrow\n\\(\\langle\\rangle\\) : \\langle\\rangle\n\\(\\overrightarrow{\\rm AB}\\) : \\overrightarrow{\\rm AB}\n\\(\\underline{\\text{Underline Text}}\\) : \\underline{\\text{Underline Text}}\n\\(\\mathbb{R}\\) : \\mathbb{R}\n\nbb : blackboard bold\n\n\\(\\mathcal{F}\\) : \\mathcal{F}\n\\(\\mathscr{F}\\) : \\mathscr{F}\n\n\n\nGreek :\n\n\\(\\tau\\) : \\tau\n\\(\\rho\\) : \\rho\n\\(\\alpha\\) : \\alpha\n\\(\\beta\\) : \\beta\n\\(\\Gamma\\) : \\Gamma\n\\(\\epsilon\\) : \\epsilon\n\\(\\mathcal{E}\\) : \\mathcal{E}\n\\(\\varepsilon\\) : \\varepsilon\n\\(\\varphi\\) : \\varphi\n\n\n\nInline :\nLimits above and below sums and integrals\n\n\\(\\sum\\limits_{n}^{i}\\int_0^1\\) : \\limits\n\nMatrices and Matrix Equations\n\n\\(\\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}\\) : \\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}\n\n\\(I=[\\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}]\\)\n\\((\\begin{smallmatrix} 1 & 1 \\\\ 1 & 0\\end{smallmatrix})(\\begin{smallmatrix} 1 & 1 \\\\ 0 & 1\\end{smallmatrix})\\ne(\\begin{smallmatrix} 1 & 1 \\\\ 0 & 1\\end{smallmatrix})(\\begin{smallmatrix} 1 & 1 \\\\ 1 & 0\\end{smallmatrix})\\)\n\n\n\n\nMultiple Lines :\nFunction\n\n\\(F(x)=\\begin{cases}1 & x\\geq 0\\\\0 & \\text{otherwise}\\end{cases}\\) : F(x)=\\begin{cases} . . . \\end{cases}\n\n1 & x \\geq 0 \\\\\n0 & \\text{otherwise}\n\n\nMatrix\n\n\\(F(x)=\\begin{bmatrix}1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\\\end{bmatrix}\\) : F(x)=\\begin{bmatrix}1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\\\end{bmatrix}\n\nSeries of Equalities\n\n\\(\\begin{equation}\\label{a}\\begin{split}x &= a+b+c\\\\&=1+2+3\\\\&=6\\end{split}\\end{equation}\\)\n\n: \\begin{equation}\\{label}\\begin{split}... \\end{split}\\end{equation}\n\nx &= a+b+c \\\\\n&= 1+2+3\n&= 6\n\n\n\nPotential Errors :\nSpelling\n\nEx: \\overlien{AB} should be \\overline{AB}\n\nlabel , table\n\n\nMore than two backslashes\n\nEx: Equation will work but \\end{equation} will show at the end. One of the lines has more than two backslashes at the end of at least one of the lines.\n\nSpace before final $\n\nEx: $\\angle ABC $ should be $\\angle ABC$\n\nMore $ on one side of equation than the other\n\nEx: $A^2+B^2=C^2$$ should be $A^2+B^2=C^2$\n\nClosing {}\n\nEx: $\\int\\limits_{1}^{2$ should be $\\int\\limits_{1}^{2}$\n\nUnderset on the wrong side\n\nEx: U\\underset{i\\in I} should be \\underset{i\\in I}U\n\n\n\nAdvice :\nDetextify\n\nIf you don’t know what a symbol is, draw it in Detextify here.\n\nGoogle Docs Equations Boxes\n\nMost latex backslashes work in google doc’s equation boxes. If I have to do a “quick” homework, and dont want to spend a lot of time formatting a pdf in R, I will use google docs and latex in the equations boxes.\n\nNote: This is how I began learning latex.\nWhy learn Latex?\n\nGenerally speaking it looks nicer, especially on reports, projects, and presentations.\nA lot of my peers and professors who wrote math by hand would have problems in their dominate writing hand. Typing math with latex helps spread that tension out to two hands.\nIt saves time in the long run, since updating a line in a typed document is a lot easier than re-writing an entire problem by hand. Not to mention the ability to use copy paste."
  },
  {
    "objectID": "01_blog/2022-01-06-latex-hacks/index.en.html",
    "href": "01_blog/2022-01-06-latex-hacks/index.en.html",
    "title": "Latex",
    "section": "",
    "text": "Basic Symbols :\n\n\\(\\sim\\) : \\sim\n\\(\\circ\\) : \\circ\n\\(\\square\\) : \\square\n\\(\\equiv\\) : \\equiv\n\\(\\cong\\) : \\cong\n\\(\\unlhd\\) : \\unlhd\n\\(\\div\\) : \\div\n\\(\\nless\\) : \\nless\n\\(\\ngtr\\) : ngtr\n\\(\\emptyset\\) : \\emptyset\n\\(\\subseteq\\) : \\subseteq\n\\(a\\choose b\\) : a\\choose b\n\\(\\underset{i\\in I}U\\) : \\underset{i\\in I}U\n\\(\\Leftrightarrow\\) : \\Leftrightarrow\n\\(\\langle\\rangle\\) : \\langle\\rangle\n\\(\\overrightarrow{\\rm AB}\\) : \\overrightarrow{\\rm AB}\n\\(\\underline{\\text{Underline Text}}\\) : \\underline{\\text{Underline Text}}\n\\(\\mathbb{R}\\) : \\mathbb{R}\n\nbb : blackboard bold\n\n\\(\\mathcal{F}\\) : \\mathcal{F}\n\\(\\mathscr{F}\\) : \\mathscr{F}\n\n\n\nGreek :\n\n\\(\\tau\\) : \\tau\n\\(\\rho\\) : \\rho\n\\(\\alpha\\) : \\alpha\n\\(\\beta\\) : \\beta\n\\(\\Gamma\\) : \\Gamma\n\\(\\epsilon\\) : \\epsilon\n\\(\\mathcal{E}\\) : \\mathcal{E}\n\\(\\varepsilon\\) : \\varepsilon\n\\(\\varphi\\) : \\varphi\n\n\n\nInline :\nLimits above and below sums and integrals\n\n\\(\\sum\\limits_{n}^{i}\\int_0^1\\) : \\limits\n\nMatrices and Matrix Equations\n\n\\(\\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}\\) : \\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}\n\n\\(I=[\\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}]\\)\n\\((\\begin{smallmatrix} 1 & 1 \\\\ 1 & 0\\end{smallmatrix})(\\begin{smallmatrix} 1 & 1 \\\\ 0 & 1\\end{smallmatrix})\\ne(\\begin{smallmatrix} 1 & 1 \\\\ 0 & 1\\end{smallmatrix})(\\begin{smallmatrix} 1 & 1 \\\\ 1 & 0\\end{smallmatrix})\\)\n\n\n\n\nMultiple Lines :\nFunction\n\n\\(F(x)=\\begin{cases}1 & x\\geq 0\\\\0 & \\text{otherwise}\\end{cases}\\) : F(x)=\\begin{cases} . . . \\end{cases}\n\n1 & x \\geq 0 \\\\\n0 & \\text{otherwise}\n\n\nMatrix\n\n\\(F(x)=\\begin{bmatrix}1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\\\end{bmatrix}\\) : F(x)=\\begin{bmatrix}1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\\\end{bmatrix}\n\nSeries of Equalities\n\n\\(\\begin{equation}\\label{a}\\begin{split}x &= a+b+c\\\\&=1+2+3\\\\&=6\\end{split}\\end{equation}\\) : `\\[\\begin{equation}\\{label}\\begin{split}... \\end{split}\\end{equation}\\]’\n\nx &= a+b+c \\\\\n&= 1+2+3\n&= 6\n\n\nNote: still haven’t figured out how to get multiple lines of equations to work in blogposts.\n\n\nPotential Errors :\nSpelling\n\nEx: \\overlien{AB} should be \\overline{AB}\n\nlabel , table\n\n\nMore than two backslashes\n\nEx: Equation will work but \\end{equation} will show at the end. One of the lines has more than two backslashes at the end of at least one of the lines.\n\nSpace before final $\n\nEx: $\\angle ABC $ should be $\\angle ABC$\n\nMore $ on one side of equation than the other\n\nEx: $A^2+B^2=C^2$$ should be $A^2+B^2=C^2$\n\nClosing {}\n\nEx: $\\int\\limits_{1}^{2$ should be $\\int\\limits_{1}^{2}$\n\nUnderset on the wrong side\n\nEx: U\\underset{i\\in I} should be \\underset{i\\in I}U\n\n\n\nAdvice :\nDetextify\n\nIf you don’t know what a symbol is, draw it in Detextify here.\n\nGoogle Docs Equations Boxes\n\nMost latex backslashes work in google doc’s equation boxes. If I have to do a “quick” homework, and dont want to spend a lot of time formatting a pdf in R, I will use google docs and latex in the equations boxes.\n\nNote: This is how I began learning latex.\nWhy learn Latex?\nWhen you type with latex instead of writting by hand:\n\nGenerally speaking it looks nicer, especially on reports, projects, and presentations.\nCan spread any tension that is normally located in your dominate hand into both.\nIt saves time in the long run updating a document on your computer than re-writing an entire problem by hand."
  },
  {
    "objectID": "01_blog/2021_08_26_Emojis/index.html",
    "href": "01_blog/2021_08_26_Emojis/index.html",
    "title": "Enable Emojis in Quarto",
    "section": "",
    "text": "1. Visual Editor\nOne way to add emojis to a quarto blog posts is from the ‘Visual’ editor in R Studio, select the Insert tab \\(\\rightarrow\\) ‘Special Characters’ \\(\\rightarrow\\) ‘Insert Emoji …’ and then selecting you desired emoji from a large list.\n\n\n2. Include 'from: markdown+emoji' in Header\nThe second way to add emoji’s into a quarto blog is to include ‘from: markdown+emoji’ in the .qmd header, and then type the name of the emoji you want to include encased in colons as shown below:\n:grinning: \\(\\rightarrow\\) 😀\n:smile: \\(\\rightarrow\\) 😄\n:heart: \\(\\rightarrow\\) ❤️\n:thumbsup: \\(\\rightarrow\\) 👍\n:call_me_hand: \\(\\rightarrow\\) 🤙\n\n\n\n\n\nFootnotes\n\n\nFrom Quarto Documentation - Content Editing↩︎"
  },
  {
    "objectID": "01_blog/2022_10_17_P-logically-equivalent-neg-neg-P/index.html",
    "href": "01_blog/2022_10_17_P-logically-equivalent-neg-neg-P/index.html",
    "title": "Prove P is Logically Equivalent to the Negation of the Negation of P",
    "section": "",
    "text": "Solution 1\nConsider the truth table for P, \\(\\neg P\\), and \\(\\neg (\\neg P)\\), as shown below in Figure 1:\n\n\nFigure 1: Truth Table\n\n\nP\n\\(\\neg P\\)\n\\(\\neg (\\neg P)\\)\n\n\n\n\nT\nF\nT\n\n\nF\nT\nF\n\n\n\n\nSince the truth values for P and \\(\\neg (\\neg P)\\) are the same then P and \\(\\neg (\\neg P)\\) are logically equivalent.\n\n\nSolution 2\nSuppose by way of contradiction (BWOC) that P and \\(\\neg (\\neg P)\\) are not logically equivalent.\nLet P be true and then \\(\\neg (\\neg P)\\) would be false.\nIf P is true then \\(\\neg P\\) would be false, but \\(\\neg P\\) and \\(\\neg (\\neg P)\\) cannot both be false. Therefore BWOC \\(\\neg (\\neg P)\\equiv P\\).\n\\(\\square\\)"
  },
  {
    "objectID": "01_blog/2022_08_27_Ch.3-R-for-ds/index.html",
    "href": "01_blog/2022_08_27_Ch.3-R-for-ds/index.html",
    "title": "R for Data Science - Ch.3: Data Visualisations",
    "section": "",
    "text": "1. Set Up\nThis first chunk will remove warning messages from all chunks in this file. To hide this chunk use include=FALSE within the {} brackets.\n\nknitr::opts_chunk$set(warning = FALSE, message = FALSE) \n\nThis second chunk calls two packages:\n\ntidyverse: to tidy data and create visuals with ggplot2.\ngridExtra: to arrange data in a grid\n\n\nlibrary(tidyverse)\nlibrary(gridExtra)\n\nThis chapter analyzes the mpg data so I’m using the head() function from utils to view the first five rows in the mpg data set.\n\nutils::head(mpg, 5)\n\n# A tibble: 5 × 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  <chr>        <chr> <dbl> <int> <int> <chr>      <chr> <int> <int> <chr> <chr> \n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…\n\n\n\n\n2. Visuals\n\\(\\underline{\\text{Question 1}}\\): Do cars with big engines use more fuel than cars with small engines?\nTo answer this question I will focus on two columns:\ndispl : a cars engine size in litres\nhwy : a car’s fuel efficiency on the highway in mpg.\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy))\n\n\n\n\nNote:\n\nThere is a negative relation between engine size and fuel efficiency.\nThe mapping argument is always paired with aes(), and the x and y arguments of aes() specify which variables to map to the x and y axes.\n\n\n\n3. 3.2.4 Exercises\n\nThe following code chunk creates an empty square.\n\n\nggplot2::ggplot(data = mpg)\n\n\n\n\n\nThe mpg data set has 234 rows and 11 columns.\nThe drv variable is the type of drive the car has such as f = front wheel, r = rear wheel, and 4 = 4 wheel drive.\nThe following plot shows hwy vs. cyl.\n\n\nggplot2::ggplot(mpg) +\n  ggplot2::geom_point(ggplot2::aes(x = cyl, y = hwy))\n\n\n\n\nNote: This isn’t very useful because it is obvious that as the number of cylinders increases the miles per gallon decreases.\n\nThe following plot shows class vs. drv.\n\n\nggplot2::ggplot(mpg) +\n  ggplot2::geom_point(ggplot2::aes(x = drv, y = class))\n\n\n\n\nNote: This plot isn’t useful because there are no obvious trends. Categorical variables usually have a small number of values they are limited to, so it only seems like there are 12 observed values.\n\n\n4. Aesthetics\nWithin the aes() function when specifying that color is equal to a column variable then ggplot will add a color key to these variables, as shown below.\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, color = class))\n\n\n\n\nWhen defining color outside aes() then color is equal to a specific color (such as red or blue), and ggplot will make all points that one color, as shown below.\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy), color = \"blue\")\n\n\n\n\nsize:\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, size = class))\n\n\n\n\n(Warning: using size for a discrete variable is not advised.)\nalpha: (transparency)\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, alpha = class))\n\n\n\n\nshape:\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, shape = class))\n\n\n\n\n\n\n\nshapes built into R\n\n\n\n\n5. 3.3.1 Exercises\n\nThe following code is incorrect because color is inside aes(), which is labeling all the points as “blue”.\n\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, color = \"blue\"))\n\n\n\n\n\nCategorical : manufacturer, model name, trans, drv, fl, and class  Continuous : displ, cty, year of manufacture, number of cylinders, and hwy\n\n\nNotice in the printed data frame the categorical variables are usually character  values, where continuous variables are numeric values such as  or .\n\n\nWhen mapping a continuous variable to an aes() such as color then then there the key also becomes continuos as shown below.\n\n\n# Categorical\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = manufacturer, color = trans))\n\n\n\n# Continuous\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = manufacturer, color = hwy))\n\n\n\n\n\nWhen mapping the same variable to multiple aesthetics then multiple keys are added as shown below.\n\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, size = hwy, color = displ))\n\n\n\n\n\nStroke adjusts the thickness of the boarder (for shapes 21-25) as shown below.\n\n\nggplot2::ggplot(mtcars, ggplot2::aes(wt, mpg)) +\n  ggplot2::geom_point(shape = 21, colour = \"black\", fill = \"pink\", size = 5, stroke = 5)\n\n\n\n\n\nWhen defining something like color to be displ < 5, it sets up a true or false argument for this, and applies one color (blue) to true values less than 5 and red for false values greater than 5.\n\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, color = displ < 5))\n\n\n\n\n\n\n6. Facets\nfacet_wrap() should be used for discrete values as shown below:\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_wrap(~ class, nrow = 2)\n\n\n\n\nTo facet on a combination of variables use facet_grid() as shown below:\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_grid(drv ~ cyl)\n\n\n\n\nUse + facet_grid(.~cyl) to not facet rows.\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_grid(.~ cyl)\n\n\n\n\n\n\n7. 3.5.1 Exercises\n\nWhen you facet a continuous variable you make A LOT of graphs.\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_wrap(~ hwy)\n\n\n\n\n\nThe empty cells in the facet_grid(drv ~ cyl) plot above are showing the empty points in the graph below. For example cars with four wheel drive only have an even number of cylinders so the plot of 4 wheel drive with 5 cylinders is empty because it does not exist.\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = drv, y = cyl))\n\n\n\n\n\nOne of the below plots is shown in rows and the other in columns. The period says not to facet the rows or the columns.\n\n\n# rows\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  facet_grid(drv ~ .)\n\n\n\n#columns\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  facet_grid(. ~ cyl)\n\n\n\n\n\nThe advantages of facet wrap allow for data with various classes or types to be analyzed by such. Additionally it’s difficult for humans to visualize a large amount of color so it is easier to digest the variety of date spread out. The disadvantage of this could be that spreading the data out would make it difficult to compare observations between different categories.\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_wrap(~ class, nrow = 2)\n\n\n\n\n\nnrow and ncol define the number of rows and columns in the facet wrap.There is also scales, shrink, labeler, as.table, switch, drop, dir, and stip.position. Facet grid doesn’t have these because it is specified in the function instead.\nVariables with more unique levels should be in columns when using facet_grid() because there is more space for columns if the plot is laid out horizontally.\n\n\n\n8. Geometric Objects\nThe side by side graphs below show the same data. The left graph uses the geometric object geom_point() which shows all the points, and the right graphs uses geom_smooth() which creates a best fit line with the data’s standard error without all the data points.\n\n# left graph: geom_point()\na <- ggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy))\n# right graph: geom_smooth()\nb <- ggplot(data = mpg) + \n  geom_smooth(mapping = aes(x = displ, y = hwy))\n# both together\ngrid.arrange(a,b, nrow = 1)\n\n\n\n\nFor different line “shapes” geom_smooth() can be used with different linetypes within aes() as shown below.\n\nggplot(data = mpg) + \n  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))\n\n\n\n\nFor the following geoms, you can set the group aesthetic to a categorical variable to draw multiple objects.\n\nc <- ggplot(data = mpg) +\n  geom_smooth(mapping = aes(x = displ, y = hwy))\n              \nd <- ggplot(data = mpg) +\n  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))\n    \ne <- ggplot(data = mpg) +\n  geom_smooth(\n    mapping = aes(x = displ, y = hwy, color = drv),\n    show.legend = FALSE)\ngrid.arrange(c,d,e, nrow = 1)\n\n\n\n\nBelow multiple geometric objects are added to one plot.\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  geom_smooth(mapping = aes(x = displ, y = hwy))\n\n\n\n\nDefining the mapping aes() helps reduce repetion, as shown below.\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point() + \n  geom_smooth()\n\n\n\n\nGlobal Mapping\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth()\n\n\n\n\nSubcompact (subset) mapping\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth(data = filter(mpg, class == \"subcompact\"), se = FALSE)\n\n\n\n\n\n\n9. 3.6.1 Exercises\n\nline chart: geom_line()  boxplot: geom_boxplot()  histogram: geom_histogram()  area chart: geom_area()\nPrediction: the below code will show the various points and lines for drv without any standard error.\n\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + \n  geom_point() + \n  geom_smooth(se = FALSE)\n\n\n\n\n\nshow.legend = FALSE hides the legend box, and was used earlier in this chapter because it changes the size of the graphs, which would make it more difficult to compare to the other graphs."
  },
  {
    "objectID": "01_blog/2021_08_30_APIs-and-tidycensus/index.html",
    "href": "01_blog/2021_08_30_APIs-and-tidycensus/index.html",
    "title": "API’s and tidycensus",
    "section": "",
    "text": "1. Set-up\nTo start Request a Key to get an API key.\nThen create an .Renviron file to your projects main directory with “CENSUS_API_KEY=XXXXXXXXXXX”, where all the X’s represent you key.\nNote:\n\nThis key will not work with spaces on either side of the equal sign.\ntidycensus already has this utility worked into it (read ?census_api_key). They call their api key CENSUS_API_KEY (it is common for this key to be in all caps), so that is what I also called mine. This will be especially helpful in not mixing up API keys if I use other API keys in the future.\n\nNow load the tidycensus package and use readRenviron() to access the API key.\n\nlibrary(tidycensus)\nbase::readRenviron(\"../../.Renviron\")\n\nNote:\n\nThe first time you access your API key you may want to reload your environment so you don’t have to restart R.\n../ tells your machine to go one folder outside the folder it is in.\nUse Sys.getenv(\"CENSUS_API_KEY\") to check your key is accesible and correct.\n\n\n\n2. Using tidycensus\nUse load_variables(year, dataset, chache=T/F) for various data sets. Read ?load_variables() for more information.\nNote:\n\nlabel shows the estimates by total, and then sex and age range.\nconcept is by sex, then race, origins, and ancestry.\n\n\na <- tidycensus::load_variables(2019, \"acs1\")\nutils::head(a, 10)\n\n# A tibble: 10 × 3\n   name       label                                    concept   \n   <chr>      <chr>                                    <chr>     \n 1 B01001_001 Estimate!!Total:                         SEX BY AGE\n 2 B01001_002 Estimate!!Total:!!Male:                  SEX BY AGE\n 3 B01001_003 Estimate!!Total:!!Male:!!Under 5 years   SEX BY AGE\n 4 B01001_004 Estimate!!Total:!!Male:!!5 to 9 years    SEX BY AGE\n 5 B01001_005 Estimate!!Total:!!Male:!!10 to 14 years  SEX BY AGE\n 6 B01001_006 Estimate!!Total:!!Male:!!15 to 17 years  SEX BY AGE\n 7 B01001_007 Estimate!!Total:!!Male:!!18 and 19 years SEX BY AGE\n 8 B01001_008 Estimate!!Total:!!Male:!!20 years        SEX BY AGE\n 9 B01001_009 Estimate!!Total:!!Male:!!21 years        SEX BY AGE\n10 B01001_010 Estimate!!Total:!!Male:!!22 to 24 years  SEX BY AGE\n\n\nLet’s only focus on the first line for now, “B01001_001” which should be the total estimates. Then we can use get_acs() to get data population data by state from the American Community Survey.\n\nb <- tidycensus::get_acs(geography = \"state\", year = 2019, variable = \"B01001_001\")\nutils::head(b, 10)\n\n# A tibble: 10 × 5\n   GEOID NAME                 variable   estimate   moe\n   <chr> <chr>                <chr>         <dbl> <dbl>\n 1 01    Alabama              B01001_001  4876250    NA\n 2 02    Alaska               B01001_001   737068    NA\n 3 04    Arizona              B01001_001  7050299    NA\n 4 05    Arkansas             B01001_001  2999370    NA\n 5 06    California           B01001_001 39283497    NA\n 6 08    Colorado             B01001_001  5610349    NA\n 7 09    Connecticut          B01001_001  3575074    NA\n 8 10    Delaware             B01001_001   957248    NA\n 9 11    District of Columbia B01001_001   692683    NA\n10 12    Florida              B01001_001 20901636    NA\n\n\nWe can get similar population estimates setting the variable = c(“POP), with get_estimates. As well as”DENSITY”; for housing unit estimates, c(“HUEST”); and for components of change estimates, c(“BIRTHS”, “DEATHS”, “DOMESTICMIG”, “INTERNATIONALMIG”, “NATURALINC”, “NETMIG”, “RBIRTH”, “RDEATH”, “RDOMESTICMIG”, “RINTERNATIONALMIG”, “RNATURALINC”, “RNETMIG”).\n\nc <- tidycensus::get_estimates(geography = \"state\", year = 2019, variable = c(\"POP\"))\nutils::head(c, 10)\n\n# A tibble: 10 × 4\n   NAME                 GEOID variable    value\n   <chr>                <chr> <chr>       <dbl>\n 1 Alabama              01    POP       4903185\n 2 Alaska               02    POP        731545\n 3 Arizona              04    POP       7278717\n 4 Arkansas             05    POP       3017804\n 5 California           06    POP      39512223\n 6 Colorado             08    POP       5758736\n 7 Delaware             10    POP        973764\n 8 District of Columbia 11    POP        705749\n 9 Connecticut          09    POP       3565287\n10 Florida              12    POP      21477737\n\n\n\nd <- tidycensus::get_estimates(geography = \"county\", state = \"OR\", year = 2019, variable = c(\"POP\"))\nutils::head(d, 10)\n\n# A tibble: 10 × 4\n   NAME                      GEOID variable  value\n   <chr>                     <chr> <chr>     <dbl>\n 1 Lane County, Oregon       41039 POP      382067\n 2 Washington County, Oregon 41067 POP      601592\n 3 Clatsop County, Oregon    41007 POP       40224\n 4 Jackson County, Oregon    41029 POP      220944\n 5 Grant County, Oregon      41023 POP        7199\n 6 Clackamas County, Oregon  41005 POP      418187\n 7 Tillamook County, Oregon  41057 POP       27036\n 8 Josephine County, Oregon  41033 POP       87487\n 9 Umatilla County, Oregon   41059 POP       77950\n10 Columbia County, Oregon   41009 POP       52354"
  },
  {
    "objectID": "01_blog/2021_10_19_Generative-Art-Jasmines/index.html",
    "href": "01_blog/2021_10_19_Generative-Art-Jasmines/index.html",
    "title": "Generative Art with Jasmines",
    "section": "",
    "text": "1. Set-Up\nI will be using jasmines to create art, and dplyr to pipe the code.\n\nlibrary(jasmines)\nlibrary(dplyr) \n\n\n\n2. Randi\nWhen playing around with this package, I initially had something less fluid and full of right angles, but wanted to show more movement in the design. I have a dance background and aside from fluid movement we also focused a lot on circles and rotation. Another reason I like this design is because it reminds me of a flower. I have seven tattoos, two of which are flowers. The two colors I chose are salmon and rosewood. I enjoy different shades of pink, and colors like salmon, and rosewood feel like a more sophisticated pink to me.\n\nuse_seed(5) %>%\n  entity_circle(grain = 1000, size = 10) %>%\n  unfold_warp(iterations = 100) %>%\n  style_ribbon(\n    color = \"#9E4244\",\n    background = \"#FDAB9F\")\n\n\n\n\n\n\n3. Unfolding Circle\n\nuse_seed(1) %>%\n  entity_circle(grain = 1000, size = 4) %>%\n  unfold_warp(iterations = 100) %>%\n  style_ribbon(\n    palette=\"base\",\n    colour = \"ind\",\n    background = \"mistyrose\")\n\n\n\n\n\n\n4. Typophobia\n\nscene_discs(\n  rings = 13, \n  points = 500, \n  size = 5\n  ) %>%\n  mutate(ind = 1:n()\n         ) %>%\n  unfold_warp(\n    iterations = 10,\n    scale = .5, \n    output = \"layer\" \n  ) %>%\n  unfold_tempest(\n    iterations = 10,\n    scale = .01\n  ) %>%\n  style_ribbon(\n    color = \"#48AAAD\",\n    colour = \"ind\",\n    alpha = c(.4,.1),\n    background = \"#016064\" \n  ) \n\n\n\n\n\n\n5. Snake Charmer\n\nuse_seed(4) %>%\n  entity_circle(grain = 10000) %>%\n  unfold_tempest(iterations = 13) %>%\n  style_ribbon(background = \"oldlace\")"
  },
  {
    "objectID": "01_blog/2021_10_19_Tree-Diagrams/index.html",
    "href": "01_blog/2021_10_19_Tree-Diagrams/index.html",
    "title": "Tree Diagrams",
    "section": "",
    "text": "1. Set-Up\nThis example is from W3-D5 Example 1 of my Statistics-461 Notes, and uses the data.tree package which can create a multiple node object.\n\nlibrary(data.tree)\n\n\n\n2. Creating a Node Object\nAll trees are constructed by tying together Node object, so to start I will create a new Node object for example 1.\n\nex1 <- data.tree::Node$new(\"Example 1\")\n\nFor example 1 we suppose that 1% of the population uses a certain drug. So next I want to AddChild to ex1 to show those who use the drug (d) and do not use the drug (dc, where c means compliment).\n\nd <- ex1$AddChild(\"Uses Drug\", p = 0.01)\ndc <- ex1$AddChild(\"Does Not Use Drug\", p = 0.99)\n\nNow let t be tests positive for the disease. The drug manufacturer claims that \\(P(T|D^C)=0.015\\) and \\(P(T^C|D)=0.005\\). Which means that:\n\\(P(T^C|D^C)=1-P(T|D^C)=1-0.015=0.985\\) and\n\\(P(T|D)=1-P(T^C|D)=1-0.005=0.995\\)\nSo lets add another layer of nodes to example 1.\n\nt <- d$AddChild(\"Positive Test\", p = 0.995)\ntc <- d$AddChild(\"Negative Test\", p = 0.005)\nt <- dc$AddChild(\"Positive Test\", p = 0.015)\ntc<- dc$AddChild(\"Negative Test\", p = 0.985)\n\nAnd then print what information we have.\n\nbase::print(ex1, 'p')\n\n              levelName     p\n1 Example 1                NA\n2  ¦--Uses Drug         0.010\n3  ¦   ¦--Positive Test 0.995\n4  ¦   °--Negative Test 0.005\n5  °--Does Not Use Drug 0.990\n6      ¦--Positive Test 0.015\n7      °--Negative Test 0.985\n\n\nIf the probability column shows as a percentages we can use the SetFormat() function to set the decimal to 3 places.\n\ndata.tree::SetFormat(ex1, \"p\", formatFun = data.tree::FormatFixedDecimal(3))\n\nAnd print the information we have.\n\nbase::print(ex1, 'p')\n\n              levelName     p\n1 Example 1                NA\n2  ¦--Uses Drug         0.010\n3  ¦   ¦--Positive Test 0.995\n4  ¦   °--Negative Test 0.005\n5  °--Does Not Use Drug 0.990\n6      ¦--Positive Test 0.015\n7      °--Negative Test 0.985\n\n\n\n\n3. Conditional Probability\nGiven a positive test, we can find the probability that a person actually uese the drug with the following equation:\n\\(\\begin{equation}\\label{a}\\begin{split}P(D|T) &= \\frac{P(T|D)\\times P(D)}{[P(T|D)\\times P(D)]+[P(T|D^C)\\times P(D^C)]}\\\\&=\\frac{(0.995)(0.01)}{(0.995\\times 0.01)+(0.015\\times 0.99)}\\\\&=\\frac{199}{496}\\\\&\\approx 0.4012\\end{split}\\end{equation}\\)\n\n\n4. Plotting a Tree Diagram\nLastly we can use the plot() function to print a Tree Diagram:\n\nbase::plot(ex1)\n\n\n\n\n\nTo visualize the tree diagram from left to right instead of top to bottom we can use the SetGraphStyle() function as shown below.\n\ndata.tree::SetGraphStyle(ex1, rankdir = \"LR\")\nbase::plot(ex1)"
  },
  {
    "objectID": "01_blog/2021_08_23_Emojis/index.html",
    "href": "01_blog/2021_08_23_Emojis/index.html",
    "title": "Enable Emojis in Quarto",
    "section": "",
    "text": "1. Visual Editor\nOne way to add emojis to a quarto blog posts is from the ‘Visual’ editor in R Studio, select the Insert tab \\(\\rightarrow\\) ‘Special Characters’ \\(\\rightarrow\\) ‘Insert Emoji …’ and then selecting you desired emoji from a large list.\n\n\n2. Include 'from: markdown+emoji' in Header\nThe second way to add emoji’s into a quarto blog is to include ‘from: markdown+emoji’ in the .qmd header, and then type the name of the emoji you want to include encased in colons as shown below:\n:grinning: \\(\\rightarrow\\) 😀\n:smile: \\(\\rightarrow\\) 😄\n:heart: \\(\\rightarrow\\) ❤️\n:thumbsup: \\(\\rightarrow\\) 👍\n:call_me_hand: \\(\\rightarrow\\) 🤙\n\n\n\n\n\nFootnotes\n\n\nQuarto Documentation - Content Editing↩︎"
  },
  {
    "objectID": "01_blog/2021_08_30_Ch.3-R-for-ds/index.html",
    "href": "01_blog/2021_08_30_Ch.3-R-for-ds/index.html",
    "title": "R for Data Science - Ch.3: Data Visualisations",
    "section": "",
    "text": "1. Set Up\nThis first chunk will remove warning messages from all chunks in this file. To hide this chunk use include=FALSE within the {} brackets.\n\nknitr::opts_chunk$set(warning = FALSE, message = FALSE) \n\nThis second chunk calls two packages:\n\ntidyverse: to tidy data and create visuals with ggplot2.\ngridExtra: to arrange data in a grid\n\n\nlibrary(tidyverse)\nlibrary(gridExtra)\n\nThis chapter analyzes the mpg data so I’m using the head() function from utils to view the first five rows in the mpg data set.\n\nutils::head(mpg, 5)\n\n# A tibble: 5 × 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  <chr>        <chr> <dbl> <int> <int> <chr>      <chr> <int> <int> <chr> <chr> \n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…\n\n\n\n\n2. Visuals\n\\(\\underline{\\text{Question 1}}\\): Do cars with big engines use more fuel than cars with small engines?\nTo answer this question I will focus on two columns:\ndispl : a cars engine size in litres\nhwy : a car’s fuel efficiency on the highway in mpg.\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy))\n\n\n\n\nNote:\n\nThere is a negative relation between engine size and fuel efficiency.\nThe mapping argument is always paired with aes(), and the x and y arguments of aes() specify which variables to map to the x and y axes.\n\n\n\n3. 3.2.4 Exercises\n\nThe following code chunk creates an empty square.\n\n\nggplot2::ggplot(data = mpg)\n\n\n\n\n\nThe mpg data set has 234 rows and 11 columns.\nThe drv variable is the type of drive the car has such as f = front wheel, r = rear wheel, and 4 = 4 wheel drive.\nThe following plot shows hwy vs. cyl.\n\n\nggplot2::ggplot(mpg) +\n  ggplot2::geom_point(ggplot2::aes(x = cyl, y = hwy))\n\n\n\n\nNote: This isn’t very useful because it is obvious that as the number of cylinders increases the miles per gallon decreases.\n\nThe following plot shows class vs. drv.\n\n\nggplot2::ggplot(mpg) +\n  ggplot2::geom_point(ggplot2::aes(x = drv, y = class))\n\n\n\n\nNote: This plot isn’t useful because there are no obvious trends. Categorical variables usually have a small number of values they are limited to, so it only seems like there are 12 observed values.\n\n\n4. Aesthetics\nWithin the aes() function when specifying that color is equal to a column variable then ggplot will add a color key to these variables, as shown below.\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, color = class))\n\n\n\n\nWhen defining color outside aes() then color is equal to a specific color (such as red or blue), and ggplot will make all points that one color, as shown below.\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy), color = \"blue\")\n\n\n\n\nsize:\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, size = class))\n\n\n\n\n(Warning: using size for a discrete variable is not advised.)\nalpha: (transparency)\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, alpha = class))\n\n\n\n\nshape:\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, shape = class))\n\n\n\n\n\n\n\nshapes built into R\n\n\n\n\n5. 3.3.1 Exercises\n\nThe following code is incorrect because color is inside aes(), which is labeling all the points as “blue”.\n\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, color = \"blue\"))\n\n\n\n\n\nCategorical : manufacturer, model name, trans, drv, fl, and class  Continuous : displ, cty, year of manufacture, number of cylinders, and hwy\n\n\nNotice in the printed data frame the categorical variables are usually character  values, where continuous variables are numeric values such as  or .\n\n\nWhen mapping a continuous variable to an aes() such as color then then there the key also becomes continuos as shown below.\n\n\n# Categorical\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = manufacturer, color = trans))\n\n\n\n# Continuous\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = manufacturer, color = hwy))\n\n\n\n\n\nWhen mapping the same variable to multiple aesthetics then multiple keys are added as shown below.\n\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, size = hwy, color = displ))\n\n\n\n\n\nStroke adjusts the thickness of the boarder (for shapes 21-25) as shown below.\n\n\nggplot2::ggplot(mtcars, ggplot2::aes(wt, mpg)) +\n  ggplot2::geom_point(shape = 21, colour = \"black\", fill = \"pink\", size = 5, stroke = 5)\n\n\n\n\n\nWhen defining something like color to be displ < 5, it sets up a true or false argument for this, and applies one color (blue) to true values less than 5 and red for false values greater than 5.\n\n\nggplot2::ggplot(data = mpg) + \n  ggplot2::geom_point(mapping = ggplot2::aes(x = displ, y = hwy, color = displ < 5))\n\n\n\n\n\n\n6. Facets\nfacet_wrap() should be used for discrete values as shown below:\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_wrap(~ class, nrow = 2)\n\n\n\n\nTo facet on a combination of variables use facet_grid() as shown below:\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_grid(drv ~ cyl)\n\n\n\n\nUse + facet_grid(.~cyl) to not facet rows.\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_grid(.~ cyl)\n\n\n\n\n\n\n7. 3.5.1 Exercises\n\nWhen you facet a continuous variable you make A LOT of graphs.\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_wrap(~ hwy)\n\n\n\n\n\nThe empty cells in the facet_grid(drv ~ cyl) plot above are showing the empty points in the graph below. For example cars with four wheel drive only have an even number of cylinders so the plot of 4 wheel drive with 5 cylinders is empty because it does not exist.\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = drv, y = cyl))\n\n\n\n\n\nOne of the below plots is shown in rows and the other in columns. The period says not to facet the rows or the columns.\n\n\n# rows\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  facet_grid(drv ~ .)\n\n\n\n#columns\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  facet_grid(. ~ cyl)\n\n\n\n\n\nThe advantages of facet wrap allow for data with various classes or types to be analyzed by such. Additionally it’s difficult for humans to visualize a large amount of color so it is easier to digest the variety of date spread out. The disadvantage of this could be that spreading the data out would make it difficult to compare observations between different categories.\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) + \n  facet_wrap(~ class, nrow = 2)\n\n\n\n\n\nnrow and ncol define the number of rows and columns in the facet wrap.There is also scales, shrink, labeler, as.table, switch, drop, dir, and stip.position. Facet grid doesn’t have these because it is specified in the function instead.\nVariables with more unique levels should be in columns when using facet_grid() because there is more space for columns if the plot is laid out horizontally.\n\n\n\n8. Geometric Objects\nThe side by side graphs below show the same data. The left graph uses the geometric object geom_point() which shows all the points, and the right graphs uses geom_smooth() which creates a best fit line with the data’s standard error without all the data points.\n\n# left graph: geom_point()\na <- ggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy))\n# right graph: geom_smooth()\nb <- ggplot(data = mpg) + \n  geom_smooth(mapping = aes(x = displ, y = hwy))\n# both together\ngrid.arrange(a,b, nrow = 1)\n\n\n\n\nFor different line “shapes” geom_smooth() can be used with different linetypes within aes() as shown below.\n\nggplot(data = mpg) + \n  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))\n\n\n\n\nFor the following geoms, you can set the group aesthetic to a categorical variable to draw multiple objects.\n\nc <- ggplot(data = mpg) +\n  geom_smooth(mapping = aes(x = displ, y = hwy))\n              \nd <- ggplot(data = mpg) +\n  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))\n    \ne <- ggplot(data = mpg) +\n  geom_smooth(\n    mapping = aes(x = displ, y = hwy, color = drv),\n    show.legend = FALSE)\ngrid.arrange(c,d,e, nrow = 1)\n\n\n\n\nBelow multiple geometric objects are added to one plot.\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy)) +\n  geom_smooth(mapping = aes(x = displ, y = hwy))\n\n\n\n\nDefining the mapping aes() helps reduce repetion, as shown below.\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point() + \n  geom_smooth()\n\n\n\n\nGlobal Mapping\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth()\n\n\n\n\nSubcompact (subset) mapping\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(mapping = aes(color = class)) + \n  geom_smooth(data = filter(mpg, class == \"subcompact\"), se = FALSE)\n\n\n\n\n\n\n9. 3.6.1 Exercises\n\nline chart: geom_line()  boxplot: geom_boxplot()  histogram: geom_histogram()  area chart: geom_area()\nPrediction: the below code will show the various points and lines for drv without any standard error.\n\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + \n  geom_point() + \n  geom_smooth(se = FALSE)\n\n\n\n\n\nshow.legend = FALSE hides the legend box, and was used earlier in this chapter because it changes the size of the graphs, which would make it more difficult to compare to the other graphs."
  },
  {
    "objectID": "01_blog/2021_09_20_APIs-and-tidycensus/index.html",
    "href": "01_blog/2021_09_20_APIs-and-tidycensus/index.html",
    "title": "API’s and tidycensus",
    "section": "",
    "text": "1. Set-up\nTo start Request a Key to get an API key.\nThen create an .Renviron file to your projects main directory with “CENSUS_API_KEY=XXXXXXXXXXX”, where all the X’s represent you key.\nNote:\n\nThis key will not work with spaces on either side of the equal sign.\ntidycensus already has this utility worked into it (read ?census_api_key). They call their api key CENSUS_API_KEY (it is common for this key to be in all caps), so that is what I also called mine. This will be especially helpful in not mixing up API keys if I use other API keys in the future.\n\nNow load the tidycensus package and use readRenviron() to access the API key.\n\nlibrary(tidycensus)\nbase::readRenviron(\"../../.Renviron\")\n\nNote:\n\nThe first time you access your API key you may want to reload your environment so you don’t have to restart R.\n../ tells your machine to go one folder outside the folder it is in.\nUse Sys.getenv(\"CENSUS_API_KEY\") to check your key is accesible and correct.\n\n\n\n2. Using tidycensus\nUse load_variables(year, dataset, chache=T/F) for various data sets. Read ?load_variables() for more information.\nNote:\n\nlabel shows the estimates by total, and then sex and age range.\nconcept is by sex, then race, origins, and ancestry.\n\n\na <- tidycensus::load_variables(2019, \"acs1\")\nutils::head(a, 10)\n\n# A tibble: 10 × 3\n   name       label                                    concept   \n   <chr>      <chr>                                    <chr>     \n 1 B01001_001 Estimate!!Total:                         SEX BY AGE\n 2 B01001_002 Estimate!!Total:!!Male:                  SEX BY AGE\n 3 B01001_003 Estimate!!Total:!!Male:!!Under 5 years   SEX BY AGE\n 4 B01001_004 Estimate!!Total:!!Male:!!5 to 9 years    SEX BY AGE\n 5 B01001_005 Estimate!!Total:!!Male:!!10 to 14 years  SEX BY AGE\n 6 B01001_006 Estimate!!Total:!!Male:!!15 to 17 years  SEX BY AGE\n 7 B01001_007 Estimate!!Total:!!Male:!!18 and 19 years SEX BY AGE\n 8 B01001_008 Estimate!!Total:!!Male:!!20 years        SEX BY AGE\n 9 B01001_009 Estimate!!Total:!!Male:!!21 years        SEX BY AGE\n10 B01001_010 Estimate!!Total:!!Male:!!22 to 24 years  SEX BY AGE\n\n\nLet’s only focus on the first line for now, “B01001_001” which should be the total estimates. Then we can use get_acs() to get data population data by state from the American Community Survey.\n\nb <- tidycensus::get_acs(geography = \"state\", year = 2019, variable = \"B01001_001\")\nutils::head(b, 10)\n\n# A tibble: 10 × 5\n   GEOID NAME                 variable   estimate   moe\n   <chr> <chr>                <chr>         <dbl> <dbl>\n 1 01    Alabama              B01001_001  4876250    NA\n 2 02    Alaska               B01001_001   737068    NA\n 3 04    Arizona              B01001_001  7050299    NA\n 4 05    Arkansas             B01001_001  2999370    NA\n 5 06    California           B01001_001 39283497    NA\n 6 08    Colorado             B01001_001  5610349    NA\n 7 09    Connecticut          B01001_001  3575074    NA\n 8 10    Delaware             B01001_001   957248    NA\n 9 11    District of Columbia B01001_001   692683    NA\n10 12    Florida              B01001_001 20901636    NA\n\n\nWe can get similar population estimates setting the variable = c(“POP), with get_estimates. As well as”DENSITY”; for housing unit estimates, c(“HUEST”); and for components of change estimates, c(“BIRTHS”, “DEATHS”, “DOMESTICMIG”, “INTERNATIONALMIG”, “NATURALINC”, “NETMIG”, “RBIRTH”, “RDEATH”, “RDOMESTICMIG”, “RINTERNATIONALMIG”, “RNATURALINC”, “RNETMIG”).\n\nc <- tidycensus::get_estimates(geography = \"state\", year = 2019, variable = c(\"POP\"))\nutils::head(c, 10)\n\n# A tibble: 10 × 4\n   NAME                 GEOID variable    value\n   <chr>                <chr> <chr>       <dbl>\n 1 Alabama              01    POP       4903185\n 2 Alaska               02    POP        731545\n 3 Arizona              04    POP       7278717\n 4 Arkansas             05    POP       3017804\n 5 California           06    POP      39512223\n 6 Colorado             08    POP       5758736\n 7 Delaware             10    POP        973764\n 8 District of Columbia 11    POP        705749\n 9 Connecticut          09    POP       3565287\n10 Florida              12    POP      21477737\n\n\n\nd <- tidycensus::get_estimates(geography = \"county\", state = \"OR\", year = 2019, variable = c(\"POP\"))\nutils::head(d, 10)\n\n# A tibble: 10 × 4\n   NAME                      GEOID variable  value\n   <chr>                     <chr> <chr>     <dbl>\n 1 Lane County, Oregon       41039 POP      382067\n 2 Washington County, Oregon 41067 POP      601592\n 3 Clatsop County, Oregon    41007 POP       40224\n 4 Jackson County, Oregon    41029 POP      220944\n 5 Grant County, Oregon      41023 POP        7199\n 6 Clackamas County, Oregon  41005 POP      418187\n 7 Tillamook County, Oregon  41057 POP       27036\n 8 Josephine County, Oregon  41033 POP       87487\n 9 Umatilla County, Oregon   41059 POP       77950\n10 Columbia County, Oregon   41009 POP       52354"
  },
  {
    "objectID": "01_blog/2021_09_27_Generative-Art-Jasmines/index.html",
    "href": "01_blog/2021_09_27_Generative-Art-Jasmines/index.html",
    "title": "Generative Art with Jasmines",
    "section": "",
    "text": "1. Set-Up\nI will be using jasmines to create art, and dplyr to pipe the code.\n\nlibrary(jasmines)\nlibrary(dplyr) \n\n\n\n2. Randi\nWhen playing around with this package, I initially had something less fluid and full of right angles, but wanted to show more movement in the design. I have a dance background and aside from fluid movement we also focused a lot on circles and rotation. Another reason I like this design is because it reminds me of a flower. I have seven tattoos, two of which are flowers. The two colors I chose are salmon and rosewood. I enjoy different shades of pink, and colors like salmon, and rosewood feel like a more sophisticated pink to me.\n\nuse_seed(5) %>%\n  entity_circle(grain = 1000, size = 10) %>%\n  unfold_warp(iterations = 100) %>%\n  style_ribbon(\n    color = \"#9E4244\",\n    background = \"#FDAB9F\")\n\n\n\n\n\n\n3. Unfolding Circle\n\nuse_seed(1) %>%\n  entity_circle(grain = 1000, size = 4) %>%\n  unfold_warp(iterations = 100) %>%\n  style_ribbon(\n    palette=\"base\",\n    colour = \"ind\",\n    background = \"mistyrose\")\n\n\n\n\n\n\n4. Typophobia\n\nscene_discs(\n  rings = 13, \n  points = 500, \n  size = 5\n  ) %>%\n  mutate(ind = 1:n()\n         ) %>%\n  unfold_warp(\n    iterations = 10,\n    scale = .5, \n    output = \"layer\" \n  ) %>%\n  unfold_tempest(\n    iterations = 10,\n    scale = .01\n  ) %>%\n  style_ribbon(\n    color = \"#48AAAD\",\n    colour = \"ind\",\n    alpha = c(.4,.1),\n    background = \"#016064\" \n  ) \n\n\n\n\n\n\n5. Snake Charmer\n\nuse_seed(4) %>%\n  entity_circle(grain = 10000) %>%\n  unfold_tempest(iterations = 13) %>%\n  style_ribbon(background = \"oldlace\")"
  },
  {
    "objectID": "01_blog/2021_10_18_Tree-Diagrams/index.html",
    "href": "01_blog/2021_10_18_Tree-Diagrams/index.html",
    "title": "Tree Diagrams",
    "section": "",
    "text": "1. Set-Up\nThis example is from W3-D5 Example 1 of my Statistics-461 Notes, and uses the data.tree package which can create a multiple node object.\n\nlibrary(data.tree)\n\n\n\n2. Creating a Node Object\nAll trees are constructed by tying together Node object, so to start I will create a new Node object for example 1.\n\nex1 <- data.tree::Node$new(\"Example 1\")\n\nFor example 1 we suppose that 1% of the population uses a certain drug. So next I want to AddChild to ex1 to show those who use the drug (d) and do not use the drug (dc, where c means compliment).\n\nd <- ex1$AddChild(\"Uses Drug\", p = 0.01)\ndc <- ex1$AddChild(\"Does Not Use Drug\", p = 0.99)\n\nNow let t be tests positive for the disease. The drug manufacturer claims that \\(P(T|D^C)=0.015\\) and \\(P(T^C|D)=0.005\\). Which means that:\n\\(P(T^C|D^C)=1-P(T|D^C)=1-0.015=0.985\\) and\n\\(P(T|D)=1-P(T^C|D)=1-0.005=0.995\\)\nSo lets add another layer of nodes to example 1.\n\nt <- d$AddChild(\"Positive Test\", p = 0.995)\ntc <- d$AddChild(\"Negative Test\", p = 0.005)\nt <- dc$AddChild(\"Positive Test\", p = 0.015)\ntc<- dc$AddChild(\"Negative Test\", p = 0.985)\n\nAnd then print what information we have.\n\nbase::print(ex1, 'p')\n\n              levelName     p\n1 Example 1                NA\n2  ¦--Uses Drug         0.010\n3  ¦   ¦--Positive Test 0.995\n4  ¦   °--Negative Test 0.005\n5  °--Does Not Use Drug 0.990\n6      ¦--Positive Test 0.015\n7      °--Negative Test 0.985\n\n\nIf the probability column shows as a percentages we can use the SetFormat() function to set the decimal to 3 places.\n\ndata.tree::SetFormat(ex1, \"p\", formatFun = data.tree::FormatFixedDecimal(3))\n\nAnd print the information we have.\n\nbase::print(ex1, 'p')\n\n              levelName     p\n1 Example 1                NA\n2  ¦--Uses Drug         0.010\n3  ¦   ¦--Positive Test 0.995\n4  ¦   °--Negative Test 0.005\n5  °--Does Not Use Drug 0.990\n6      ¦--Positive Test 0.015\n7      °--Negative Test 0.985\n\n\n\n\n3. Conditional Probability\nGiven a positive test, we can find the probability that a person actually uese the drug with the following equation:\n\\(\\begin{equation}\\label{a}\\begin{split}P(D|T) &= \\frac{P(T|D)\\times P(D)}{[P(T|D)\\times P(D)]+[P(T|D^C)\\times P(D^C)]}\\\\&=\\frac{(0.995)(0.01)}{(0.995\\times 0.01)+(0.015\\times 0.99)}\\\\&=\\frac{199}{496}\\\\&\\approx 0.4012\\end{split}\\end{equation}\\)\n\n\n4. Plotting a Tree Diagram\nLastly we can use the plot() function to print a Tree Diagram:\n\nbase::plot(ex1)\n\n\n\n\n\nTo visualize the tree diagram from left to right instead of top to bottom we can use the SetGraphStyle() function as shown below.\n\ndata.tree::SetGraphStyle(ex1, rankdir = \"LR\")\nbase::plot(ex1)"
  },
  {
    "objectID": "01_blog/2021_10_25_Epsilon-min/index.html",
    "href": "01_blog/2021_10_25_Epsilon-min/index.html",
    "title": "Let epsilon = min(x-a, b-x)",
    "section": "",
    "text": "Explanation\nConsider the real number line \\(\\mathbb{R}\\) and some value x which lies between (a,b). When \\(\\epsilon=\\text{min}(x-a,b-x)\\) then \\(\\epsilon\\) is equal to \\(2\\times\\) smaller distance to either a or b. For example, in the picture below x is closer to a, so x-a is smaller than b-x. Therefore \\(\\epsilon=2(x-a)\\).\n\nIf it helps to apply values consider \\(a=1\\), \\(b=4\\), and \\(x=2\\). Then\n\\(\\epsilon=\\text{min}(x-a,b-x)=\\text{min}(2-1,4-2)=\\text{min}(1,2)=2(1)=2\\)"
  },
  {
    "objectID": "01_blog/2022_01_06-latex-hacks/index.html",
    "href": "01_blog/2022_01_06-latex-hacks/index.html",
    "title": "Latex",
    "section": "",
    "text": "Basic Symbols :\n\n\\(\\sim\\) : \\sim\n\\(\\circ\\) : \\circ\n\\(\\square\\) : \\square\n\\(\\equiv\\) : \\equiv\n\\(\\cong\\) : \\cong\n\\(\\unlhd\\) : \\unlhd\n\\(\\div\\) : \\div\n\\(\\nless\\) : \\nless\n\\(\\ngtr\\) : ngtr\n\\(\\emptyset\\) : \\emptyset\n\\(\\subseteq\\) : \\subseteq\n\\(a\\choose b\\) : a\\choose b\n\\(\\underset{i\\in I}U\\) : \\underset{i\\in I}U\n\\(\\Leftrightarrow\\) : \\Leftrightarrow\n\\(\\langle\\rangle\\) : \\langle\\rangle\n\\(\\overrightarrow{\\rm AB}\\) : \\overrightarrow{\\rm AB}\n\\(\\underline{\\text{Underline Text}}\\) : \\underline{\\text{Underline Text}}\n\\(\\mathbb{R}\\) : \\mathbb{R}\n\nbb : blackboard bold\n\n\\(\\mathcal{F}\\) : \\mathcal{F}\n\\(\\mathscr{F}\\) : \\mathscr{F}\n\n\n\nGreek :\n\n\\(\\tau\\) : \\tau\n\\(\\rho\\) : \\rho\n\\(\\alpha\\) : \\alpha\n\\(\\beta\\) : \\beta\n\\(\\Gamma\\) : \\Gamma\n\\(\\epsilon\\) : \\epsilon\n\\(\\mathcal{E}\\) : \\mathcal{E}\n\\(\\varepsilon\\) : \\varepsilon\n\\(\\varphi\\) : \\varphi\n\n\n\nInline :\nLimits above and below sums and integrals\n\n\\(\\sum\\limits_{n}^{i}\\int_0^1\\) : \\limits\n\nMatrices and Matrix Equations\n\n\\(\\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}\\) : \\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}\n\n\\(I=[\\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}]\\)\n\\((\\begin{smallmatrix} 1 & 1 \\\\ 1 & 0\\end{smallmatrix})(\\begin{smallmatrix} 1 & 1 \\\\ 0 & 1\\end{smallmatrix})\\ne(\\begin{smallmatrix} 1 & 1 \\\\ 0 & 1\\end{smallmatrix})(\\begin{smallmatrix} 1 & 1 \\\\ 1 & 0\\end{smallmatrix})\\)\n\n\n\n\nMultiple Lines :\nFunction\n\n\\(F(x)=\\begin{cases}1 & x\\geq 0\\\\0 & \\text{otherwise}\\end{cases}\\) : F(x)=\\begin{cases} . . . \\end{cases}\n\n1 & x \\geq 0 \\\\\n0 & \\text{otherwise}\n\n\nMatrix\n\n\\(F(x)=\\begin{bmatrix}1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\\\end{bmatrix}\\) : F(x)=\\begin{bmatrix}1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\\\end{bmatrix}\n\nSeries of Equalities\n\n\\(\\begin{equation}\\label{a}\\begin{split}x &= a+b+c\\\\&=1+2+3\\\\&=6\\end{split}\\end{equation}\\)\n\n: \\begin{equation}\\{label}\\begin{split}... \\end{split}\\end{equation}\n\nx &= a+b+c \\\\\n&= 1+2+3\n&= 6\n\n\n\nPotential Errors :\nSpelling\n\nEx: \\overlien{AB} should be \\overline{AB}\n\nlabel , table\n\n\nMore than two backslashes\n\nEx: Equation will work but \\end{equation} will show at the end. One of the lines has more than two backslashes at the end of at least one of the lines.\n\nSpace before final $\n\nEx: $\\angle ABC $ should be $\\angle ABC$\n\nMore $ on one side of equation than the other\n\nEx: $A^2+B^2=C^2$$ should be $A^2+B^2=C^2$\n\nClosing {}\n\nEx: $\\int\\limits_{1}^{2$ should be $\\int\\limits_{1}^{2}$\n\nUnderset on the wrong side\n\nEx: U\\underset{i\\in I} should be \\underset{i\\in I}U\n\n\n\nAdvice :\nDetextify\n\nIf you don’t know what a symbol is, draw it in Detextify here.\n\nGoogle Docs Equations Boxes\n\nMost latex backslashes work in google doc’s equation boxes. If I have to do a “quick” homework, and dont want to spend a lot of time formatting a pdf in R, I will use google docs and latex in the equations boxes.\n\nNote: This is how I began learning latex.\nWhy learn Latex?\n\nGenerally speaking it looks nicer, especially on reports, projects, and presentations.\nA lot of my peers and professors who wrote math by hand would have problems in their dominate writing hand. Typing math with latex helps spread that tension out to two hands.\nIt saves time in the long run, since updating a line in a typed document is a lot easier than re-writing an entire problem by hand. Not to mention the ability to use copy paste."
  },
  {
    "objectID": "01_blog/2021_11_22_Skewness/index.html",
    "href": "01_blog/2021_11_22_Skewness/index.html",
    "title": "Skewness",
    "section": "",
    "text": "Physical Interpretation\nImagine your body is a symmetrical bell curve where your neck is your mode, waist is your median, hips are your mean, and are all stacked on top of each other to create a symmetrical bell curve as shown in the image below.\n\nWhen the hips are to the the right of your neck then you are creating a right skew. When you hips are to the left of your neck then your body bell curve is left skewed as shown in the diagram below.\n\nShakira famously said her hips don’t lie, but my hips dictate skewness."
  },
  {
    "objectID": "01_blog/2021_11_29_Proof-Idempotent/index.html",
    "href": "01_blog/2021_11_29_Proof-Idempotent/index.html",
    "title": "Prove H and I-H are Idempotent",
    "section": "",
    "text": "Proof\nFor H to be Idempotent then \\(HH=H\\)\n\\[\\begin{equation}\\label{HH=H}\n\\begin{split}\nHH & =[X(X^TX)^{-1}X^T][X(X^TX)^{-1}X^T]\\\\\n& = X(X^TX)^{-1}X^TX(X^TX)^{-1}X^T\\quad\\quad(X^TX)^{-1}X^TX=1\\\\\n& = X(X^TX)^{-1}X^T\\\\\n& = H\n\\end{split}\n\\end{equation}\\]\nTherefore by the series of equalities H is idempotent.\nFor I-H to be idempotent then \\((I-H)(I-H)=I-H\\)\n\\[\\begin{equation}\\label{I-H}\n\\begin{split}\n(I-H)(I-H) & =II-HI-IH+HH\\quad\\quad II=I, HI=IH=H, HH=H\\\\\n& = I-H-H+H\\\\\n& = I-H\n\\end{split}\n\\end{equation}\\]\nTherefor by the series of equalities I-H is idempotent.\nQED."
  },
  {
    "objectID": "01_blog/2022_10_31_NBA-functions/index.html",
    "href": "01_blog/2022_10_31_NBA-functions/index.html",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "",
    "text": "In this tutorial I will be creating functions to scrape NBA data. The goal here is to prepare these functions to use in a package for future analysis."
  },
  {
    "objectID": "01_blog/2022_10_31_NBA-functions/index.html#about-the-data",
    "href": "01_blog/2022_10_31_NBA-functions/index.html#about-the-data",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "0_1. About-The-Data",
    "text": "0_1. About-The-Data\nI will be scrapping data from Basketball Reference which gets thier data updated regularly by a handful of contributors and sources. The main reasons I like using this data is because it’s reliable, updated regularly, and similar sites exist for other non-NBA Sports (such as: WNBA, Baseball, Football, and others) if I wanted to expand my research outside the NBA."
  },
  {
    "objectID": "01_blog/2022_10_31_NBA-functions/index.html#package-installs",
    "href": "01_blog/2022_10_31_NBA-functions/index.html#package-installs",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "0_2. Package Installs",
    "text": "0_2. Package Installs\nThe packages I will be using are rvest to scrape the data and magrittr to pipe it. To install these packages, copy the code below and remove the first comment hash (command - shift - c).\n\n## install packages\n# install.packages(\"rvest\",  \"magrittr\")\n\nThen load:\n\n# load packages \nlibrary(rvest) \nlibrary(magrittr)"
  },
  {
    "objectID": "01_blog/2022_10_31_NBA-functions/index.html#team-statistics",
    "href": "01_blog/2022_10_31_NBA-functions/index.html#team-statistics",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "1_1. Team Statistics:",
    "text": "1_1. Team Statistics:\nThe first function I’m creating scrapes team statistics, which will need the user to input the teams url slug, the year that team attended or attends the NBA playoffs, and the stats_tb or statistics table that corresponds to what is shown on Basketball Reference. Currently not all tables work, but it should work for: #per_game, #totals, #per_36_minutes, and #advanced.\n\nscrape_team_data <- function(slug, year, stats_tb){\n    \"\n  A function that returns a data frame of team statistics. \n  \n  @param slug is string of three letters that represents the teams url. \n  @param year is a string that corresponds to the NBA finals.\n  @param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced\n  \n  @return a df of team statistics\n  \"\n  # define team page URL\n  url <- base::paste0(\"https://www.basketball-reference.com/teams/\",\n                slug,\"/\", year, \".html\")\n  \n  # Read stats table\n  stats_tb <- url %>%\n  read_html %>%\n  html_node(stats_tb) %>% \n  html_table()\n  \n  # Rename Column 2 to Name \n  base::names(stats_tb)[2] <- \"Name\"\n  \n  # Replace NA values with 0 (for stat functions)\n  stats_tb[base::is.na(stats_tb)] <- 0\n  \n  # make data frame\n  df <- base::data.frame(stats_tb)\n  base::return(df)\n  }\n\n\nExamples\n\nA. Current Blazers Roster\n\nzers_roster <- scrape_team_data(\"POR\",\"2022\",\"#roster\")\nutils::head(zers_roster)\n\n  No.              Name Pos  Ht  Wt         Birth.Date Var.7 Exp\n1  21    Keljin Blevins  SF 6-4 200  November 24, 1995    us   1\n2   4    Greg Brown III  SF 6-9 205  September 1, 2001    us   R\n3  33  Robert Covington  PF 6-7 209  December 14, 1990    us   8\n4  34 Jarron Cumberland  SG 6-5 205 September 22, 1997    us   R\n5  18         Kris Dunn  PG 6-3 205     March 18, 1994    us   5\n6  16         CJ Elleby  SF 6-6 200      June 16, 2000    us   1\n                       College\n1 Southern Miss, Montana State\n2                        Texas\n3              Tennessee State\n4                   Cincinnati\n5                   Providence\n6             Washington State\n\n\n\n\nB. 1997 Chicago Bulls Total Statistics\n\nbulls_totals <- scrape_team_data(\"CHI\", \"1998\", \"#totals\")\nutils::head(bulls_totals)\n\n  Rk           Name Age  G GS   MP  FG  FGA   FG. X3P X3PA  X3P. X2P X2PA  X2P.\n1  1 Michael Jordan  34 82 82 3181 881 1893 0.465  30  126 0.238 851 1767 0.482\n2  2  Dennis Rodman  36 80 66 2856 155  360 0.431   4   23 0.174 151  337 0.448\n3  3     Ron Harper  34 82 82 2284 293  665 0.441  16   84 0.190 277  581 0.477\n4  4     Toni Kukoč  29 74 52 2235 383  841 0.455  63  174 0.362 320  667 0.480\n5  5    Luc Longley  29 58 58 1703 277  609 0.455   0    0 0.000 277  609 0.455\n6  6 Scottie Pippen  32 44 44 1652 315  704 0.447  61  192 0.318 254  512 0.496\n   eFG.  FT FTA   FT. ORB DRB  TRB AST STL BLK TOV  PF  PTS\n1 0.473 565 721 0.784 130 345  475 283 141  45 185 151 2357\n2 0.436  61 111 0.550 421 780 1201 230  47  18 147 238  375\n3 0.453 162 216 0.750 107 183  290 241 108  48  91 181  764\n4 0.493 155 219 0.708 121 206  327 314  76  37 154 149  984\n5 0.455 109 148 0.736 113 228  341 161  34  62 130 206  663\n6 0.491 150 193 0.777  53 174  227 254  79  43 109 116  841\n\n\nHere we can see when Michael Jordan won his 6th ring with the Chicago Bulls he was also the leagues leading point scorer with 2,357 total points that season. Dennis Rodman was also a league leader that season in rebounds collecting a total of 1,201 rebounds."
  },
  {
    "objectID": "01_blog/2022_10_31_NBA-functions/index.html#player-statistics",
    "href": "01_blog/2022_10_31_NBA-functions/index.html#player-statistics",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "1_2. Player Statistics",
    "text": "1_2. Player Statistics\nThe second function will scrape player statistics. The user will need to input the players name, and the stats_tb or statistics table that corresponds to what is shown on Basketball Reference. Currently not all tables work, but it should work for: #per_game, #totals, #per_36_minutes, and #advanced.\n\nscrape_player_data <- function(name, stats_tb){\n  \"\n  A function that returns a data frame of player statistics. \n  \n  @param name is a string that represnets an NBA players name\n  @param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced\n  \n  @return a df of player statistics\n  \"\n  # make name lower case\n  lower_case_name <- base::tolower(name)\n\n  # split name \n  split_name <- base::strsplit(lower_case_name, \" +\")[[1]]\n\n  # define first and last name\n  first_name <- split_name[[1]]\n  last_name <- split_name[[2]]\n  \n  # first letter of last name\n  letter <- base::substr(last_name, 1,1)\n  \n  # first five letters of last name \n  last_5 <- base::substr(last_name, 1, 5)\n  \n  # first two letters of first name\n  first_2 <- base::substr(first_name, 1,2)\n  \n  # define team page URL\n  url <- base::paste0(\"https://www.basketball-reference.com/players/\",letter ,\"/\",last_5,first_2,\"01.html\")\n  \n  # Read stats table\n  stats_tb <- url %>%\n  read_html %>%\n  html_node(stats_tb) %>% \n  html_table()\n  \n  # Rename Column 2 to Name \n  names(stats_tb)[2] <- \"Name\"\n  \n  # Replace NA values with 0 (for stat functions)\n  stats_tb[base::is.na(stats_tb)] <- 0\n  \n  # make list a dataframe\n  df <- base::data.frame(stats_tb)\n  \n  base::return(df)\n  }\n\n\nExamples\n\nC. Allen Iverson Per Game Stats\n\nai_per_game <- scrape_player_data(\"Allen Iverson\", \"#per_game\")\nhead(ai_per_game)\n\n   Season Name  Tm  Lg Pos  G GS   MP   FG  FGA  FG. X3P X3PA X3P. X2P X2PA\n1 1996-97   21 PHI NBA  PG 76 74 40.1  8.2 19.8 .416 2.0  6.0 .341 6.2 13.8\n2 1997-98   22 PHI NBA  PG 80 80 39.4  8.1 17.6 .461 0.9  2.9 .298 7.2 14.7\n3 1998-99   23 PHI NBA  SG 48 48 41.5  9.1 22.0 .412 1.2  4.1 .291 7.9 17.9\n4 1999-00   24 PHI NBA  SG 70 70 40.8 10.4 24.8 .421 1.3  3.7 .341 9.1 21.0\n5 2000-01   25 PHI NBA  SG 71 71 42.0 10.7 25.5 .420 1.4  4.3 .320 9.4 21.2\n6 2001-02   26 PHI NBA  SG 60 59 43.7 11.1 27.8 .398 1.3  4.5 .291 9.8 23.4\n  X2P. eFG.  FT  FTA  FT. ORB DRB TRB AST STL BLK TOV  PF  PTS\n1 .448 .467 5.0  7.2 .702 1.5 2.6 4.1 7.5 2.1 0.3 4.4 3.1 23.5\n2 .494 .486 4.9  6.7 .729 1.1 2.6 3.7 6.2 2.2 0.3 3.1 2.5 22.0\n3 .440 .439 7.4  9.9 .751 1.4 3.5 4.9 4.6 2.3 0.1 3.5 2.0 26.8\n4 .435 .446 6.3  8.9 .713 1.0 2.8 3.8 4.7 2.1 0.1 3.3 2.3 28.4\n5 .441 .447 8.2 10.1 .814 0.7 3.1 3.8 4.6 2.5 0.3 3.3 2.1 31.1\n6 .419 .422 7.9  9.8 .812 0.7 3.8 4.5 5.5 2.8 0.2 4.0 1.7 31.4\n\n\nNotice that when Allen Iverson won the NBA’s MVP in 2001 he was putting up about 31 points a game.\n\n\nD. Kareem Abdul-Jabbar Totals\n\nkaj_totals <- scrape_player_data(\"Kareem Abdul-Jabbar\", \"#totals\")\nutils::head(kaj_totals)\n\n   Season Name  Tm  Lg Pos  G GS   MP   FG  FGA   FG. X3P X3PA X3P.  X2P X2PA\n1 1969-70   22 MIL NBA   C 82  0 3534  938 1810 0.518   0    0    0  938 1810\n2 1970-71   23 MIL NBA   C 82  0 3288 1063 1843 0.577   0    0    0 1063 1843\n3 1971-72   24 MIL NBA   C 81  0 3583 1159 2019 0.574   0    0    0 1159 2019\n4 1972-73   25 MIL NBA   C 76  0 3254  982 1772 0.554   0    0    0  982 1772\n5 1973-74   26 MIL NBA   C 81  0 3548  948 1759 0.539   0    0    0  948 1759\n6 1974-75   27 MIL NBA   C 65  0 2747  812 1584 0.513   0    0    0  812 1584\n   X2P.  eFG.  FT FTA   FT. ORB DRB  TRB AST STL BLK TOV  PF  PTS Var.31\n1 0.518 0.518 485 743 0.653   0   0 1190 337   0   0   0 283 2361      0\n2 0.577 0.577 470 681 0.690   0   0 1311 272   0   0   0 264 2596      0\n3 0.574 0.574 504 732 0.689   0   0 1346 370   0   0   0 235 2822      0\n4 0.554 0.554 328 460 0.713   0   0 1224 379   0   0   0 208 2292      0\n5 0.539 0.539 295 420 0.702 287 891 1178 386 112 283   0 238 2191      0\n6 0.513 0.513 325 426 0.763 194 718  912 264  65 212   0 205 1949      0\n  Trp.Dbl\n1       0\n2       1\n3       1\n4       2\n5       3\n6       1"
  },
  {
    "objectID": "01_blog/2022_10_31_NBA-functions/index.html#box-scores",
    "href": "01_blog/2022_10_31_NBA-functions/index.html#box-scores",
    "title": "Creating Functions in R to Scrape NBA Data",
    "section": "1_3. Box Scores",
    "text": "1_3. Box Scores\nThe last function still needs a bit of work, but will pull box scores of all the NBA games on a given day. The user will need to enter the game_day or day of the games they want box scores for.\nNote: Ideally this function would return a list with each game being its own df, but for now it only prints one data frame that includes all games played on that date. There also seem to be issues when only one game is played, or it is the first game of the season (see examples below), but for now those issues are manageable.\n\nbox_scores <- function(game_day){\n  \"\n  A function that returns a data frame of box scores. \n  \n  @param game_day is a string that represents the date in the form Y-M-D\n  \n  @return a df of box scores from that day.\n  \"\n  # split by dash\n  split_date <- base::strsplit(game_day, \"-\")\n  \n  # year - month - day \n  year <- split_date[[1]][[1]]\n  month <- split_date[[1]][[2]]\n  day <- split_date[[1]][[3]]\n  \n  #url\n  url <- base::paste0(\"https://www.basketball-reference.com/boxscores/?month=\",\n                month ,\"&day=\", day,\"&year=\", year)\n  \n  # read url\n  html <- read_html(url)\n  \n  # extract all the 'div\" items from the html as tables\n  div <- html %>% \n    html_elements(\"div\") %>% \n    html_table()\n  \n  #remove empties\n  div <- div[base::sapply(div, function(i) dim(i)[1]) > 0]\n  \n  # only keep rows == 7\n  div <- div[base::sapply(div, function(i) nrow(i)[1]) == 7]\n  \n  # empty list\n  my_vec <- base::list()\n  \n  #for loop\n  for(i in 1:base::length(div)) {        \n  my_out <- div[[i]][3:5,] \n  my_vec <- c(my_vec, my_out)\n  df <- base::data.frame(my_vec)\n  }\n  \n  df <- df[-1,]\n  \n  base::return(df)\n}\n\n\nExample\n\nE. Box Scores for 10-19-2022 (works correctly)\n\noct_19 <- box_scores(\"2022-10-19\")\noct_19\n\n       X1 X2 X3 X4 X5        X1.1 X2.1 X3.1 X4.1 X5.1    X1.2 X2.2 X3.2 X4.2\n2 Houston 20 30 30 27 New Orleans   32   26   40   32 Orlando   28   27   28\n3 Atlanta 26 33 25 33    Brooklyn   14   36   28   30 Detroit   17   40   34\n  X5.2       X1.3 X2.3 X3.3 X4.3 X5.3     X1.4 X2.4 X3.4 X4.4 X5.4 X6    X1.5\n2   26 Washington   36   24   27   27 New York   23   23   33   29  4 Chicago\n3   22    Indiana   25   27   25   30  Memphis   25   36   24   23  7   Miami\n  X2.5 X3.5 X4.5 X5.5          X1.6 X2.6 X3.6 X4.6 X5.6    X1.7 X2.7 X3.7 X4.7\n2   28   31   37   20 Oklahoma City   22   30   35   21  Dallas   32   30   19\n3   33   26   27   22     Minnesota   35   30   22   28 Phoenix   24   21   31\n  X5.7       X1.8 X2.8 X3.8 X4.8 X5.8        X1.9 X2.9 X3.9 X4.9 X5.9     X1.10\n2   24   Portland   32   19   33   31   Charlotte   38   30   30   31 Cleveland\n3   31 Sacramento   23   32   29   24 San Antonio   22   25   28   27   Toronto\n  X2.10 X3.10 X4.10 X5.10  X1.11 X2.11 X3.11 X4.11 X5.11\n2    22    35    27    21 Denver    30    23    27    22\n3    28    23    25    32   Utah    37    38    19    29\n\n\n\n\nF. Box scores for the first day of the ’22/’23 NBA season (issues)\n\noct_18 <- box_scores(\"2022-10-18\")\noct_18\n\n            X1 X2 X3 X4 X5         X1.1 X2.1 X3.1 X4.1 X5.1               X1.2\n2 Philadelphia 29 34 25 29    LA Lakers   22   30   19   38 Philadelphia 76ers\n3       Boston 24 39 35 28 Golden State   25   34   32   32 Western Conference\n  X2.2 X3.2 X4.2 X5.2    X6    X7   X8   X9 X10 X11 X12  X13 X14 X15  X16 X17\n2    0    1 .000  1.0 117.0 126.0 <NA> <NA>  NA  NA  NA <NA>  NA  NA <NA>  NA\n3    W    L W/L%   GB  PS/G  PA/G <NA> <NA>  NA  NA  NA <NA>  NA  NA <NA>  NA\n  X18 X19 X20 X21 X22  X23  X24  X25  X26  X27  X28  X29  X30  X31 X32 X33 X34\n2  NA  NA  NA  NA  NA <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>  NA  NA  NA\n3  NA  NA  NA  NA  NA <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>  NA  NA  NA\n   X35 X36 X37  X38 X39 X40 X41 X42 X43 X44\n2 <NA>  NA  NA <NA>  NA  NA  NA  NA  NA  NA\n3 <NA>  NA  NA <NA>  NA  NA  NA  NA  NA  NA\n\n\nIssue: For the first game of the season there is an are NA tables that are being pulled in.\nG. First game of the 1992 NBA Finals AKA Michael Jordan’s famous Shrug (issues)\n\nfinals_92_g1 <- box_scores(\"1992-6-3\")\nfinals_92_g1\n\n        X1 X2 X3 X4 X5     X1.1 X2.1 X3.1 X4.1 X5.1\n2 Portland 30 21 17 21 Portland   30   21   17   21\n3  Chicago 33 33 38 18  Chicago   33   33   38   18\n\n\nIssue: For days where only one game is played the one game is printed twice in the data frame."
  },
  {
    "objectID": "01_blog/2022_10_24_P-logically-equivalent-neg-neg-P/index.html",
    "href": "01_blog/2022_10_24_P-logically-equivalent-neg-neg-P/index.html",
    "title": "Prove P is Logically Equivalent to the Negation of the Negation of P",
    "section": "",
    "text": "Solution 1\nConsider the truth table for P, \\(\\neg P\\), and \\(\\neg (\\neg P)\\), as shown below in Figure 1:\n\n\nFigure 1: Truth Table\n\n\nP\n\\(\\neg P\\)\n\\(\\neg (\\neg P)\\)\n\n\n\n\nT\nF\nT\n\n\nF\nT\nF\n\n\n\n\nSince the truth values for P and \\(\\neg (\\neg P)\\) are the same then P and \\(\\neg (\\neg P)\\) are logically equivalent.\n\n\nSolution 2\nSuppose by way of contradiction (BWOC) that P and \\(\\neg (\\neg P)\\) are not logically equivalent.\nLet P be true and then \\(\\neg (\\neg P)\\) would be false.\nIf P is true then \\(\\neg P\\) would be false, but \\(\\neg P\\) and \\(\\neg (\\neg P)\\) cannot both be false. Therefore BWOC \\(\\neg (\\neg P)\\equiv P\\).\n\\(\\square\\)"
  },
  {
    "objectID": "01_blog/2021_12_20_Transformations-and-Weighting-to-Correct-Model-Inadequacies/index.html",
    "href": "01_blog/2021_12_20_Transformations-and-Weighting-to-Correct-Model-Inadequacies/index.html",
    "title": "Transformations and Weighting to Correct Model Inadequacies",
    "section": "",
    "text": "1. Set Up\nFor this analysis I will be using four packages:\n\nmagrittr: for piping (%>%)\ndplyr: to arrange the data\nMASS: to use the boxcox function\nlatex2exp: to put latex on graphs\n\n\nlibrary(latex2exp) \nlibrary(magrittr) \nlibrary(dplyr) \nlibrary(MASS) \n\n\n\n2. Example 5.1: The Electric Utility Data\nAn electric utility company is interested in developing a model relating peak-hour demand \\((y)\\) to total energy usage during the month \\((x)\\).\nTo start lets look at the data.\n\nex51 <- utils::read.csv(\"../../00_data/ex5-1.csv\")\nex51\n\n    X Customer x_.kWh. y_.kW.\n1   1        1     679   0.79\n2   2        2     292   0.44\n3   3        3    1012   0.56\n4   4        4     493   0.79\n5   5        5     582   2.70\n6   6        6    1156   3.64\n7   7        7     997   4.73\n8   8        8    2189   9.50\n9   9        9    1097   5.34\n10 10       10    2078   6.85\n11 11       11    1818   5.84\n12 12       12    1700   5.21\n13 13       13     747   3.25\n14 14       14    2030   4.43\n15 15       15    1643   3.16\n16 16       16     414   0.50\n17 17       17     354   0.17\n18 18       18    1276   1.88\n19 19       19     745   0.77\n20 20       20     435   1.39\n21 21       21     540   0.56\n22 22       22     874   1.56\n23 23       23    1543   5.28\n24 24       24    1029   0.64\n25 25       25     710   4.00\n26 26       26    1434   0.31\n27 27       27     837   4.20\n28 28       28    1748   4.88\n29 29       29    1381   3.48\n30 30       30    1428   7.58\n31 31       31    1255   2.63\n32 32       32    1777   4.99\n33 33       33     370   0.59\n34 34       34    2316   8.19\n35 35       35    1130   4.79\n36 36       36     463   0.51\n37 37       37     770   1.74\n38 38       38     724   4.10\n39 39       39     808   3.94\n40 40       40     790   0.96\n41 41       41     783   3.29\n42 42       42     406   0.44\n43 43       43    1242   3.24\n44 44       44     658   2.14\n45 45       45    1746   5.71\n46 46       46     468   0.64\n47 47       47    1114   1.90\n48 48       48     413   0.51\n49 49       49    1787   8.33\n50 50       50    3560  14.94\n51 51       51    1495   5.11\n52 52       52    2221   3.85\n53 53       53    1526   3.93\n\n\nRight away we can see that for each customer there is a value x_.kWH for Kilowatt hour which corresponds to energy usage during the month, and y_.kW for kilowatt which would then be peak-hour demand. The plot of this is shown below.\n\nbase::plot(ex51$x_.kWh., \n           ex51$y_.kW.,\n           xlab = \"Usage\",\n           ylab = \"Demand\")\n\n\n\n\nScatter diagram of the energy demand (kW) versus energy usage (kWh)\n\n\n\n\nAs a starting point a simple linear regression model is assumed. Lets look at the summary to get an equation for the least-squares fit, and analyze variability.\n\nlm51 <- stats::lm(ex51$y_.kW. ~ ex51$x_.kWh., data = ex51)\nsummary(lm51)\n\n\nCall:\nstats::lm(formula = ex51$y_.kW. ~ ex51$x_.kWh., data = ex51)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.1399 -0.8275 -0.1934  1.2376  3.1522 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -0.8313037  0.4416121  -1.882   0.0655 .  \nex51$x_.kWh.  0.0036828  0.0003339  11.030 4.11e-15 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.577 on 51 degrees of freedom\nMultiple R-squared:  0.7046,    Adjusted R-squared:  0.6988 \nF-statistic: 121.7 on 1 and 51 DF,  p-value: 4.106e-15\n\n\nFrom our summary our we can extrapolate our least-squares fit is: \\(\\hat y=-0.83130+0.00368x\\)\nFor this model \\(R^2=0.7046\\); that is about 70% of the variability in demand is accounted for by the straight-line fit to energy usage. The summary statistics do not reveal any obvious problems with this model.\nBelow this model is plotted with a red line.\n\nbase::plot(ex51$x_.kWh.,\n           ex51$y_.kW.,\n           xlab = \"Usage\",\n           ylab = \"Demand\")\ngraphics::abline(lm51, col = \"red\")\n\n\n\n\nScatter diagram of the energy demand (kW) versus energy usage (kWh) with Simple Linear Model\n\n\n\n\nFrom visual inspection we can see the points on the far left side of the graph are much closer to the best fit line than those in the middle and right side of the graph. We might want to apply a transformation to this model, so lets look at the Studentized Residual also known as r student.\n\nbase::plot(stats::fitted(lm51),\n           stats::rstudent(lm51),\n           ylab=latex2exp::TeX(r'($t_i$)'),\n           xlab=latex2exp::TeX(r'($\\hat{y}_i$)'),\n           pch = 16);graphics::abline(0, 0,lty = 2)\n\n\n\n\nPlot of R-Student vs. fitted values\n\n\n\n\nFrom this graph we can see that the residuals form an outward-opening funnel, indicating that the error variance is increasing as energy consumption increases. A transformation may be helpful in correcting this model inadequacy. To select the form of the transformation, note that the response variable y may be viewed as a “count” of the number of kilowatts used by a customer during a particular hour. The simplest probabilistic model for count data is the Poisson distribution. This suggests regressing \\(y^*=\\sqrt{y}\\) on x as a variance-stabilizing transformation.\n\nex51$ystar <- base::sqrt(ex51$y_.kW.)\nlm51T <- stats::lm(ex51$ystar ~ ex51$x_.kWh., data = ex51)\nbase::summary(lm51T)\n\n\nCall:\nstats::lm(formula = ex51$ystar ~ ex51$x_.kWh., data = ex51)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.39185 -0.30576 -0.03875  0.25378  0.81027 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  5.822e-01  1.299e-01   4.481 4.22e-05 ***\nex51$x_.kWh. 9.529e-04  9.824e-05   9.699 3.61e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.464 on 51 degrees of freedom\nMultiple R-squared:  0.6485,    Adjusted R-squared:  0.6416 \nF-statistic: 94.08 on 1 and 51 DF,  p-value: 3.614e-13\n\n\nThe resulting least-squares fit is: \\(\\hat y^*=0.5822+0.0009529x\\)\n\nbase::plot(stats::fitted(lm51T),\n           stats::rstudent(lm51T),\n           ylab=latex2exp::TeX(r'($t_i$)'),\n           xlab=latex2exp::TeX(r'($\\hat{y}^*_i$)'),\n           pch = 16);graphics::abline(0, 0,lty = 2)\n\n\n\n\nThe impression from examining this plot is that the variance is stable; consequently, we conclude that the transformed model is adequate.\nNote that there is one suspiciously large residual (customer 26) and one customer whose energy usage is somewhat large (customer 50). The effect of these two points on the fit should be studied further before the model is released for use.\n\n\n3. Example 5.2: The Windmill Data\nA research engineer is investigating the use of a windmill to generate electricity. He has collected data on the DC Output from his windmill and the corresponding wind velocity.\n\nex52 <- utils::read.csv(\"../../00_data/ex5-2.csv\")\nutils::head(ex52)\n\n  X ObservationNumber_i WindVelocity_xi_mph DCOutput_yi\n1 1                   1                 5.0       1.582\n2 2                   2                 6.0       1.822\n3 3                   3                 3.4       1.057\n4 4                   4                 2.7       0.500\n5 5                   5                10.0       2.236\n6 6                   6                 9.7       2.386\n\n\nThe data is plotted below.\n\nbase::plot(ex52$WindVelocity_xi_mph,\n           ex52$DCOutput_yi,\n           xlab = \"Wind Velocity, X\",\n           ylab = \"DC Output, Y\")\n\n\n\n\nInspection of the scatter diagram indicates that the relationship between DC output \\((y)\\) and wind velocity \\((x)\\) may be nonlinear. However, we initially fit a straight-line model to the data, and look at the summary statistics.\n\nlm52 <- stats::lm(ex52$DCOutput_yi ~ ex52$WindVelocity_xi_mph, data = ex52)\nbase::summary(lm52)\n\n\nCall:\nstats::lm(formula = ex52$DCOutput_yi ~ ex52$WindVelocity_xi_mph, \n    data = ex52)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.59869 -0.14099  0.06059  0.17262  0.32184 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(>|t|)    \n(Intercept)               0.13088    0.12599   1.039     0.31    \nex52$WindVelocity_xi_mph  0.24115    0.01905  12.659 7.55e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2361 on 23 degrees of freedom\nMultiple R-squared:  0.8745,    Adjusted R-squared:  0.869 \nF-statistic: 160.3 on 1 and 23 DF,  p-value: 7.546e-12\n\n\nThe summary statistics for this model are \\(R^2=0.8745\\), and \\(F_0=160.26\\) (the P-value is <0.0001), and he regression model is: \\(\\hat y=0.1309+0.2411x\\), shown in red below.\n\nbase::plot(ex52$WindVelocity_xi_mph,\n           ex52$DCOutput_yi,\n           xlab = \"Wind Velocity, x\",\n           ylab = \"DC Output, Y\")\ngraphics::abline(lm52, col = \"red\")\n\n\n\n\nBelow we can extract the fitted and residual values from our linear model, and then arrange them in order of increasing wind speed.\n\nex52$fitted <- stats::fitted(lm52)\nex52$resid <- stats::resid(lm52)\nex52 %>% dplyr::arrange(-dplyr::desc(ex52$WindVelocity_xi_mph)) \n\n    X ObservationNumber_i WindVelocity_xi_mph DCOutput_yi    fitted       resid\n1  25                  25                2.45       0.123 0.7216899 -0.59868986\n2   4                   4                2.70       0.500 0.7819771 -0.28197708\n3  11                  11                2.90       0.653 0.8302069 -0.17720685\n4   8                   8                3.05       0.558 0.8663792 -0.30837918\n5   3                   3                3.40       1.057 0.9507813  0.10621871\n6  16                  16                3.60       1.137 0.9990111  0.13798894\n7  24                  24                3.95       1.144 1.0834132  0.06058683\n8  23                  23                4.10       1.194 1.1195855  0.07441450\n9  13                  13                4.60       1.562 1.2401599  0.32184007\n10  1                   1                5.00       1.582 1.3366195  0.24538052\n11 20                  20                5.45       1.501 1.4451365  0.05586353\n12 14                  14                5.80       1.737 1.5295386  0.20746142\n13  2                   2                6.00       1.822 1.5777683  0.24423165\n14 10                  10                6.20       1.866 1.6259981  0.24000188\n15 12                  12                6.35       1.930 1.6621705  0.26782955\n16 19                  19                7.00       1.800 1.8189172 -0.01891722\n17 15                  15                7.40       2.088 1.9153768  0.17262323\n18 17                  17                7.85       2.179 2.0238938  0.15510624\n19  9                   9                8.15       2.166 2.0962384  0.06976158\n20 18                  18                8.80       2.112 2.2529852 -0.14098518\n21 21                  21                9.10       2.303 2.3253298 -0.02232985\n22  7                   7                9.55       2.294 2.4338468 -0.13984684\n23  6                   6                9.70       2.386 2.4700192 -0.08401917\n24  5                   5               10.00       2.236 2.5423638 -0.30636383\n25 22                  22               10.20       2.310 2.5905936 -0.28059360\n\n\nThe residuals show a distinct pattern, that is, they move systematically from negative to positive and back to negative again as wind speed increases.\n\nbase::plot(stats::fitted(lm52),\n           stats::resid(lm52),\n           ylab=TeX(r'($e_i$)'),\n           xlab=TeX(r'($\\hat{y}_i$)'),\n           pch = 16);graphics::abline(0, 0,lty = 2)\n\n\n\n\nThis residual plot indicates model inadequacy and implies that the linear relationship has not captured all of the information in the wind speed variable. Note that the curvature was apparent in the earlier scatter diagram, but is greatly amplified in the residual plot\nClearly some other model form must be considered. We might initially consider using a quadratic model such as: \\(y=\\beta_0+\\beta_1x+\\beta_2x^2+\\epsilon\\) to account for the curvature. However since the quadratic model will eventually bend downward as wind speed increases, it would not be appropriate for these data. A more reasonable model for windmill data that incorporates an upper asymptote would be: \\(y=\\beta_0+\\beta_1(\\frac{1}{x})+\\epsilon\\).\n\nex52$xstar <- 1/ex52$WindVelocity_xi_mph\nlm52T <- stats::lm(ex52$DCOutput_yi ~ ex52$xstar, data = ex52)\nbase::summary(lm52T)\n\n\nCall:\nstats::lm(formula = ex52$DCOutput_yi ~ ex52$xstar, data = ex52)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.20547 -0.04940  0.01100  0.08352  0.12204 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   2.9789     0.0449   66.34   <2e-16 ***\nex52$xstar   -6.9345     0.2064  -33.59   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.09417 on 23 degrees of freedom\nMultiple R-squared:   0.98, Adjusted R-squared:  0.9792 \nF-statistic:  1128 on 1 and 23 DF,  p-value: < 2.2e-16\n\n\nThe fitted regression model is \\(\\hat y=2.9789-6.9345x'\\)\nThe summary statistics for this model are \\(R^2=0.98\\), and \\(F_0=1128\\) (the p value is <0.0001).\n\nbase::plot(stats::fitted(lm52T),\n           stats::rstudent(lm52T),\n           ylab=TeX(r'($t_i$)'),\n           xlab=TeX(r'($\\hat{y}_i$)'),\n           pch = 16);graphics::abline(0, 0,lty = 2)\n\n\n\n\nThis plot does not reveal any serious problems.\n\n\n4. Example 5.3: The Electic Utility Data\nWe use the Box-Cox procedure to select a variance-stabilizing transformation. The values of \\(SS_{Res}(\\lambda)\\) for various values are shown in the table.\n\nboxcoxResult = MASS::boxcox(ex51$y_.kW. ~ ex51$x_.kWh., data = ex51, lambda = seq(-2,2,0.125))\n\n\n\n\nThe Box-Cox graph shows most of the data is below the 95% confidence interval.\n\nlambda <- boxcoxResult$x[which.max(boxcoxResult$y)]\nlambda\n\n[1] 0.5454545\n\n\nWhere \\(\\lambda\\approx\\) 0.5454545 could be used as an appropriate exponent to use to transform the data into a “normal shape.”"
  },
  {
    "objectID": "01_blog/2022_01_31_LearnGeom/index.html",
    "href": "01_blog/2022_01_31_LearnGeom/index.html",
    "title": "LearnGeom",
    "section": "",
    "text": "1. Set Up\nTo create coordinate planes, trianges, and line segments I will be using the LearnGeom package.\n\nlibrary(LearnGeom)\n\n\n\n2. Coordinate Plane\nTo create a coordinate plane I will first need to define x and y minimums and maximums, and then plot the planes with the CoordinatePlane() function.\n\nx_min <- 0\nx_max <- 10\ny_min <- 0\ny_max <- 10\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n\n\n\n\nNULL\n\n\n\n\n3. Polygons\nTo create a triangle with labels:\n\nPrint the coordinate plane I just created.\nDefine three points of a triangle.\nUse CreatePolygon() function to create the polygon.\nUse the Draw() function to draw the polygon.\nDefine label = TRUE to show the points of a triangle.\n\n\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n\nNULL\n\nP1 <- c(1,4)\nP2 <- c(3,7)\nP3 <- c(4, 1)\nPoly <- LearnGeom::CreatePolygon(P1, P2, P3)\n\n[1] \"Some of the inserted points are collinear. This could lead to a defective polygon.\"\n\nLearnGeom::Draw(Poly, c(\"pink\"), label = TRUE)\n\n\n\n\nTriangle\n\n\n\n\nNULL\n\n\nTo create a trapezoid:\n\nPrint the coordinate plane I just created.\nDefine four points of a trapezoid.\nUse CreatePolygon() function to create the polygon.\n\nNote: The order of points will matter.\n\nUse the Draw() function to draw the polygon.\n\n\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n\nNULL\n\nP4 <- c(6, 3)\nP5 <- c(8, 3)\nP6 <- c(9, 8)\nP7 <- c(7, 8)\nPoly2 <- LearnGeom::CreatePolygon(P4, P5, P6, P7)\n\n[1] \"Some of the inserted points are collinear. This could lead to a defective polygon.\"\n\nLearnGeom::Draw(Poly2, c(\"light blue\"))\n\n\n\n\nTrapezoid\n\n\n\n\nNULL\n\n\nWe can also print both polygons on the same graph, shown below.\n\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n\nNULL\n\nLearnGeom::Draw(Poly, c(\"pink\"), label = TRUE)\n\nNULL\n\nLearnGeom::Draw(Poly2, c(\"light blue\"))\n\n\n\n\nTriangle and Trapezoid\n\n\n\n\nNULL\n\n\n\n\n4. Angle and Point Line Segments\nTo create a Segment Angle:\n\nPrint the coordinate plane I just created.\nDefine a points where the line originates from.\nDefine the angle of the line.\nDefine the length of the line.\nUse CreateSegmentAngle() function to create the line segment.\nUse the Draw() function to draw the line.\n\n\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n\nNULL\n\nP <- c(0,0)\nangle <- 30\nlen <- 10\nSegment <- LearnGeom::CreateSegmentAngle(P, angle, len)\nLearnGeom::Draw(Segment, \"blue\")\n\n\n\n\nNULL\n\n\nSegment Point\nTo create a Segment (with) Point(s):\n\nPrint the coordinate plane.\nDefine two endpoint.\nUse CreateSegmentPoint() function to create the line segment.\nUse the Draw() function to draw the line.\n\n\nLearnGeom::CoordinatePlane(x_min, x_max, y_min, y_max)\n\nNULL\n\nP1 <- c(2,8)\nP2 <- c(8,6)\nSegment <- LearnGeom::CreateSegmentPoints(P1, P2)\nLearnGeom::Draw(Segment, \"purple\")\n\n\n\n\nNULL"
  },
  {
    "objectID": "01_blog/2022_01_24-latex-hacks/index.html",
    "href": "01_blog/2022_01_24-latex-hacks/index.html",
    "title": "Latex",
    "section": "",
    "text": "Basic Symbols :\n\n\\(\\sim\\) : \\sim\n\\(\\circ\\) : \\circ\n\\(\\square\\) : \\square\n\\(\\equiv\\) : \\equiv\n\\(\\cong\\) : \\cong\n\\(\\unlhd\\) : \\unlhd\n\\(\\div\\) : \\div\n\\(\\nless\\) : \\nless\n\\(\\ngtr\\) : ngtr\n\\(\\emptyset\\) : \\emptyset\n\\(\\subseteq\\) : \\subseteq\n\\(a\\choose b\\) : a\\choose b\n\\(\\underset{i\\in I}U\\) : \\underset{i\\in I}U\n\\(\\Leftrightarrow\\) : \\Leftrightarrow\n\\(\\langle\\rangle\\) : \\langle\\rangle\n\\(\\overrightarrow{\\rm AB}\\) : \\overrightarrow{\\rm AB}\n\\(\\underline{\\text{Underline Text}}\\) : \\underline{\\text{Underline Text}}\n\\(\\mathbb{R}\\) : \\mathbb{R}\n\nbb : blackboard bold\n\n\\(\\mathcal{F}\\) : \\mathcal{F}\n\\(\\mathscr{F}\\) : \\mathscr{F}\n\n\n\nGreek :\n\n\\(\\tau\\) : \\tau\n\\(\\rho\\) : \\rho\n\\(\\alpha\\) : \\alpha\n\\(\\beta\\) : \\beta\n\\(\\Gamma\\) : \\Gamma\n\\(\\epsilon\\) : \\epsilon\n\\(\\mathcal{E}\\) : \\mathcal{E}\n\\(\\varepsilon\\) : \\varepsilon\n\\(\\varphi\\) : \\varphi\n\n\n\nInline :\nLimits above and below sums and integrals\n\n\\(\\sum\\limits_{n}^{i}\\int_0^1\\) : \\limits\n\nMatrices and Matrix Equations\n\n\\(\\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}\\) : \\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}\n\n\\(I=[\\begin{smallmatrix} 1 & 0 \\\\ 0 & 1\\end{smallmatrix}]\\)\n\\((\\begin{smallmatrix} 1 & 1 \\\\ 1 & 0\\end{smallmatrix})(\\begin{smallmatrix} 1 & 1 \\\\ 0 & 1\\end{smallmatrix})\\ne(\\begin{smallmatrix} 1 & 1 \\\\ 0 & 1\\end{smallmatrix})(\\begin{smallmatrix} 1 & 1 \\\\ 1 & 0\\end{smallmatrix})\\)\n\n\n\n\nMultiple Lines :\nFunction\n\n\\(F(x)=\\begin{cases}1 & x\\geq 0\\\\0 & \\text{otherwise}\\end{cases}\\) : F(x)=\\begin{cases} . . . \\end{cases}\n\n1 & x \\geq 0 \\\\\n0 & \\text{otherwise}\n\n\nMatrix\n\n\\(F(x)=\\begin{bmatrix}1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\\\end{bmatrix}\\) : F(x)=\\begin{bmatrix}1\\\\2\\\\3\\\\4\\\\5\\\\6\\\\\\end{bmatrix}\n\nSeries of Equalities\n\n\\(\\begin{equation}\\label{a}\\begin{split}x &= a+b+c\\\\&=1+2+3\\\\&=6\\end{split}\\end{equation}\\)\n\n: \\begin{equation}\\{label}\\begin{split}... \\end{split}\\end{equation}\n\nx &= a+b+c \\\\\n&= 1+2+3\n&= 6\n\n\n\nPotential Errors :\nSpelling\n\nEx: \\overlien{AB} should be \\overline{AB}\n\nlabel , table\n\n\nMore than two backslashes\n\nEx: Equation will work but \\end{equation} will show at the end. One of the lines has more than two backslashes at the end of at least one of the lines.\n\nSpace before final $\n\nEx: $\\angle ABC $ should be $\\angle ABC$\n\nMore $ on one side of equation than the other\n\nEx: $A^2+B^2=C^2$$ should be $A^2+B^2=C^2$\n\nClosing {}\n\nEx: $\\int\\limits_{1}^{2$ should be $\\int\\limits_{1}^{2}$\n\nUnderset on the wrong side\n\nEx: U\\underset{i\\in I} should be \\underset{i\\in I}U\n\n\n\nAdvice :\nDetextify\n\nIf you don’t know what a symbol is, draw it in Detextify here.\n\nGoogle Docs Equations Boxes\n\nMost latex backslashes work in google doc’s equation boxes. If I have to do a “quick” homework, and dont want to spend a lot of time formatting a pdf in R, I will use google docs and latex in the equations boxes.\n\nNote: This is how I began learning latex.\nWhy learn Latex?\n\nGenerally speaking it looks nicer, especially on reports, projects, and presentations.\nA lot of my peers and professors who wrote math by hand would have problems in their dominate writing hand. Typing math with latex helps spread that tension out to two hands.\nIt saves time in the long run, since updating a line in a typed document is a lot easier than re-writing an entire problem by hand. Not to mention the ability to use copy paste."
  },
  {
    "objectID": "01_blog/2022_02_21_UO-ggplot2/index.html",
    "href": "01_blog/2022_02_21_UO-ggplot2/index.html",
    "title": "UO: ggplot2 Part 2",
    "section": "",
    "text": "1. Set Up\nFor this post we used the following packages:\n\nggplot2: to create nice looking plots.\nmagrittr: to pipe %>%.\ndplyr: to use filter().\nflametree: to make art.\nozmaps: to make Australian Maps.\nrmapshaper: to use ms_simplyfy to simplify polygons.\nplotly: to create interactive plots.\n\n\nlibrary(ggplot2)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(flametree)\nlibrary(ozmaps)\nlibrary(rmapshaper)\nlibrary(plotly)\n\nAnd the following data sets:\n\ncars\nBOD(Biochemical Oxygen Demand)\n\n\ndata(\"cars\")\ndata (\"BOD\")\n\n\n\n2. ggplot2 Review\nTo start we made a simple point plot using the cars data set.\nNote: ggplot(data= <DATA>, mapping = aes(<MAPPING>))+ <GEOM FUNCTION>()\n\nggplot2::ggplot(data = mpg, mapping = ggplot2::aes(x = displ, y = hwy)) + \n  ggplot2::geom_point()\n\n\n\n\nWe can compare this to a simple plot in base R.\nNote : the $ is how we id the specific variable we are wanting to work with.\n\nbase::plot(mpg$displ, mpg$hwy)\n\n\n\n\n\n\n3. Line Graph\nStarting with base R:\nNote: help(pressure) is the same as ?pressure\n\nbase::plot(pressure$temperature, pressure$pressure, type = \"l\")\n# add points\ngraphics::points(pressure$temperature, pressure$pressure)\n# add lines (and points)\ngraphics::lines(pressure$temperature, pressure$pressure/2, col = \"red\")\ngraphics::points(pressure$temperature, pressure$pressure/2, col = \"red\")\n\n\n\n\nggplot:\n\nggplot2::ggplot(pressure, ggplot2::aes(x = temperature, y = pressure)) + \n  ggplot2::geom_line() + \n  ggplot2::geom_point() + \n  ggplot2::geom_line(ggplot2::aes(x = temperature, y = pressure/2), color = \"red\") + \n  ggplot2::geom_point(ggplot2::aes(x = temperature, y = pressure/2), color = \"red\") \n\n\n\n\n\n\n4. Bar Graphs\nBase R:\n\ngraphics::barplot(BOD$demand, names.arg = BOD$Time)\n\n\n\n\n\ngraphics::barplot(base::table(mtcars$cyl))\n\n\n\n\nggplot2:\n\nggplot2::ggplot(BOD, ggplot2::aes(x = base::factor(Time), y = demand)) + \n  ggplot2::geom_col()\n\n\n\n\nNotice that the 6 isn’t there because of factor().\nNote : geom_bar does counts, but column has the height of the bar based on the data.\n\nggplot2::ggplot(mtcars, aes(x=cyl)) +\n  ggplot2::geom_bar()\n\n\n\n\n\n\n5. Histogram\nBase R:\n\ngraphics::hist(mtcars$mpg, breaks = 4)\n\n\n\n\nggplot2:\n\nggplot2::ggplot(mtcars, ggplot2::aes(x=mpg)) +\n  ggplot2::geom_histogram(binwidth = 4)\n\n\n\n\n\n\n6. Boxplot\nBase R:\n\nbase::plot(ToothGrowth$supp, ToothGrowth$len)\n\n\n\n\nBase R: Formula Syntax\n\nbase::plot(len ~ supp, data = ToothGrowth)\nbase::plot(len ~ supp + dose, data = ToothGrowth)\n\n\n\n\n\n\n\nggplot2:\n\nggplot2::ggplot(ToothGrowth, ggplot2::aes(x= supp, y = len)) +\n  ggplot2::geom_boxplot()\n\n\n\n\n\n\n7. Time Series\nggplot2 will automatically recognize the variable as a date as long as the variable is imported as a date.\nTo start create some dummy data:\n\ndata <- base::data.frame(\n  day = base::as.Date(\"2017-06-14\")-0:364,\n  value = stats::runif(365)\n)\nutils::head(data)\n\n         day     value\n1 2017-06-14 0.6035865\n2 2017-06-13 0.2421695\n3 2017-06-12 0.9796016\n4 2017-06-11 0.2389377\n5 2017-06-10 0.8995370\n6 2017-06-09 0.9711135\n\n\nThen plot it with ggplot2:\n\nggplot2::ggplot(data, ggplot2::aes(x = day, y = value)) +\n  ggplot2::geom_line()\n\n\n\n\nNow to make a plot with the economics data set which is included in ggplot2.\n\nggplot2::ggplot(data = economics, ggplot2::aes(x = date, y = pop)) +\n  ggplot2::geom_line()\n\n\n\n\nNext create a subset of the data from 2006 and beyond:\n\nsubset <- ggplot2::economics %>%\n  dplyr::filter(date>base::as.Date(\"2006-1-1\"))\n\nNow to create a different line graph of the subset data over time where the size of the line is based on the value of unemployment (which is the number of unemployment in thousands).\n\nggplot2::ggplot(economics, ggplot2::aes(x = date, y = pop)) +\n  ggplot2::geom_line(ggplot2::aes(size = unemploy), color = \"red\")\n\n\n\n\n\n\n8. Maps\nUsing map_data() get lat and long data for counties in Oregon:\n\nor_counties <- ggplot2::map_data(\"county\", \"oregon\") %>%\n  dplyr::select(lon = long, lat, group, id = subregion)\nutils::head(or_counties)\n\n        lon      lat group    id\n1 -117.2042 44.30683     1 baker\n2 -117.4907 44.30683     1 baker\n3 -117.4907 44.38704     1 baker\n4 -117.5366 44.42142     1 baker\n5 -117.5709 44.42142     1 baker\n6 -117.5996 44.43861     1 baker\n\n\nUsing or_counties data create a ggplot2 map:\n\nggplot2::ggplot(or_counties, ggplot2::aes(lon, lat, group = group))+\n  ggplot2::geom_polygon(fill = \"white\", color = \"grey\") +\n  ggplot2::coord_quickmap()\n\n\n\n\nUsing ozmap_states get the names of the different states in Australia.\n\noz_stats <- ozmaps::ozmap_states\noz_stats\n\nSimple feature collection with 9 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 105.5507 ymin: -43.63203 xmax: 167.9969 ymax: -9.229287\nGeodetic CRS:  GDA94\n# A tibble: 9 × 2\n  NAME                                                                  geometry\n* <chr>                                                       <MULTIPOLYGON [°]>\n1 New South Wales              (((150.7016 -35.12286, 150.6611 -35.11782, 150.6…\n2 Victoria                     (((146.6196 -38.70196, 146.6721 -38.70259, 146.6…\n3 Queensland                   (((148.8473 -20.3457, 148.8722 -20.37575, 148.85…\n4 South Australia              (((137.3481 -34.48242, 137.3749 -34.46885, 137.3…\n5 Western Australia            (((126.3868 -14.01168, 126.3625 -13.98264, 126.3…\n6 Tasmania                     (((147.8397 -40.29844, 147.8902 -40.30258, 147.8…\n7 Northern Territory           (((136.3669 -13.84237, 136.3339 -13.83922, 136.3…\n8 Australian Capital Territory (((149.2317 -35.222, 149.2346 -35.24047, 149.271…\n9 Other Territories            (((167.9333 -29.05421, 167.9188 -29.0344, 167.93…\n\n\nThen create a ggplot2 map of Australia:\n\nggplot2::ggplot(oz_stats)+\n  ggplot2::geom_sf() +\n  ggplot2::coord_sf()\n\n\n\n\nNext we remove the “Other territories”, and create a multi-polygon data set of Australian Bureau of Statistics.\n\noz_stats <- ozmaps::ozmap_states %>% \n  dplyr::filter(NAME != \"Other Territories\")\noz_votes <- rmapshaper::ms_simplify(ozmaps::abs_ced)\n\nThen create another map of Australian territories:\n\nggplot2::ggplot()+\n  ggplot2::geom_sf(data = oz_stats, mapping = ggplot2::aes(fill = NAME)) +\n  ggplot2::geom_sf(data = oz_votes, fill = NA) +\n  ggplot2::coord_sf()\n\n\n\n\n\n\n9. Plotly\nAn interactive graph of the iris data:\n\nfig <- plotly::plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)\nfig\n\n\n\n\n\nAn interactive plot of the cars data set:\n\nmpg %>% plotly::plot_ly(x = ~displ, y = ~mpg, color = ~class)\n\n\n\n\n\nNote: you can double click on the legend to see a subset of the data.\nAnother plot with ggplot2:\n\nplot <- ggplot2::ggplot(mpg, ggplot2::aes(x = displ, y = hwy)) + \n  ggplot2::geom_point(mapping = aes(color = class)) +\n  ggplot2::geom_smooth()\nplot\n\n\n\n\nUse ggplotly to make it interactive:\n\nplotly::ggplotly(plot)\n\n\n\n\n\n\n\n10. Art\n\nshades <- c(\"blue\", \"green\", \"red\", \"orange\")\ndata <- flametree::flametree_grow(time = 10, trees = 10)\ndata %>% flametree::flametree_plot(\n  background = \"white\",\n  palette = shades,\n  style = \"nativeflora\"\n)\n\n\n\n\nPackage by Danielle Navarro. Check out her art."
  },
  {
    "objectID": "01_blog/2022_02_28_RStudio-building-a-blog-with-R/index.html",
    "href": "01_blog/2022_02_28_RStudio-building-a-blog-with-R/index.html",
    "title": "RStudio: Building a Blog with R",
    "section": "",
    "text": "1. About Isabella Velesquez\nEmail: isabella.velasquez@rstudio.com\n\nWorks at Posit.\nSeattle Lady Co-Organizer.\nFirst R-Ladies talk in 2018.\n\n\n\n2. Agenda\n\nWhy create a blog?\nDeciding on a topic.\nTools for building a blog.\n\n\n\n3. Why create a blog?\n\nWhen you’re given the same advice 3 times, write a blog post.\nShare what you’ve learned.\nWrite your opinions.\nShare updates, and news.\nExternal blogs (for business)\n\nPosit has 4 different external blogs:\n\nThe Posit Blog\nPosit AI Blog\nTidyverse\nR Views\n\n\nInternal blogs (for business)\n\nShare information more easily and effectively.\nImprove collaboration.\nServing as a bulletin board for projects.\n\n\n\n\n4. Types of Posts\n\nStandard lists\nHow To’s / tutorials\nNew posts\nProblem - and - solution\nFAQ\nCheat sheets\nChecklists\nInfo graphics\nPresentations\nDebates\nInspiration\nInterviews\n\n\n\n5. Seperating Posts\n\nTutorials (learning oriented)\nHow To’s (task oriented)\nExplanation (understanding oriented)\nReference (information oriented)\n\n\n\n6. Building a Blog with R\n\nKnowledge of R and R Markdown.\nVersion Control (Github)\nNetlify\n\n\n\n7. Overall Thoughts\nWhile this was called “Building a blog”, there wasn’t a lot of blog building. Similar to other RStudio presentations it was very business and product information heavy.\n\n\n8. Recommended Blog (from chat)\nMachine Learning Mastery"
  },
  {
    "objectID": "01_blog/2022_03_21_Midterm-Prep-Modern-College-Geometry/index.html",
    "href": "01_blog/2022_03_21_Midterm-Prep-Modern-College-Geometry/index.html",
    "title": "Midterm Prep. Modern College Geometry",
    "section": "",
    "text": "Notes consists of logic, Euclid’s 5th, Congruence and Length Theorem, Congruence and Angle Theorem, angles and parallel lines, and triangle congruence theorems."
  },
  {
    "objectID": "01_blog/2022_03_21_Midterm-Prep-Modern-College-Geometry/index.html#example",
    "href": "01_blog/2022_03_21_Midterm-Prep-Modern-College-Geometry/index.html#example",
    "title": "Midterm Prep. Modern College Geometry",
    "section": "Example",
    "text": "Example\nConditional Statement: If it is cloudy then it is raining.\nNegation: It could be cloudy and not raining.\nInverse: If it is not cloudy then it is not raining.\nContrapositive: If it is not raining then it is not cloudy.\nConverse. If it is rainy, then it is cloudy."
  },
  {
    "objectID": "01_blog/2022_03_21_Midterm-Prep-Modern-College-Geometry/index.html#example-1",
    "href": "01_blog/2022_03_21_Midterm-Prep-Modern-College-Geometry/index.html#example-1",
    "title": "Midterm Prep. Modern College Geometry",
    "section": "Example",
    "text": "Example\nWhen proving supplementary angles add to \\(180^\\circ\\) we were able to use Euclids 5th element to say that the supplementary interior angles added up to \\(\\geq 180^\\circ\\) because the lines are parallel (and don’t intersect)."
  },
  {
    "objectID": "01_blog/2022_03_21_Midterm-Prep-Modern-College-Geometry/index.html#proof-points",
    "href": "01_blog/2022_03_21_Midterm-Prep-Modern-College-Geometry/index.html#proof-points",
    "title": "Midterm Prep. Modern College Geometry",
    "section": "Proof Points",
    "text": "Proof Points\n\n“Because \\(\\triangle ABC\\cong \\triangle DEF\\) then there is an isometry f that superimposes angle ABC on angle DEF. Isometries preserve angle measure, so angles ABC and DEF must have had the same measure.”\n“Suppose angles ABC and DEF have the same measure.” Then explain isometry needed to move angle ABC to angle DEF. “Translation, rotation, and reflection are all isometries, so we’ve shown angles ABC and DEF are congruent.”"
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html",
    "title": "Midterm Prep. Group Theory",
    "section": "",
    "text": "Notes consist of Sets, Subsets, Operations, Group, Abelian Group, Subgroups, and Homework 1 and 2 questions."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#examples",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#examples",
    "title": "Midterm Prep. Group Theory",
    "section": "Examples",
    "text": "Examples\n\n\\(\\mathbb{N}=\\{1,2,3,...\\}\\) : they exist naturally\n\\(\\mathbb{Z}=\\{...,-3,-2,-1,0,1,2,3,...\\}\\) : includes zero and negatives\n\\(\\mathbb{Q}=\\{\\frac{m}{n}|m,n\\in \\mathbb{Z}\\text{ and }n\\ne 0\\}\\) : integer fractions\n\\(\\mathbb{R}\\) : includes square roots and pie, real analysis starts with \\(\\sqrt{2}\\)\n\\(\\mathbb{C}\\) : includes imaginary numbers\nAsterisk in the superscript means delete zero\nPlus sign in the superscript means only positive values (>0)"
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#properties",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#properties",
    "title": "Midterm Prep. Group Theory",
    "section": "Properties",
    "text": "Properties\n\n* is commutative if \\(a\\ne b\\), \\(a*b=b*a\\) \\(\\forall\\) a,b \\(\\in A\\).\n\n+ and \\(\\cdot\\) are commutative\n- , \\(\\div\\) , funtion composition and matrix multiplication are not commutative\n\n* is associative if \\((a*b)*c=a*(b*c)\\) \\(\\forall\\) a,b,c, \\(\\in A\\).\n\naddition is associative, subtraction is not associative\n\nIf \\(\\exists\\) \\(e\\in A\\) \\(\\Rightarrow\\) \\(e*a=a*e=a\\) \\(\\forall\\) \\(a\\in A\\), the we call e the identity element in A w.r.t. *.\n\n0=e w.r.t. addition\n1=e w.r.t. multiplication\n\nIf \\(e\\in A\\) is the identity w.r.t. * and \\(a,b\\in A\\Rightarrow\\) \\(a*b=b*a=e\\) we call a and b inverses of one another.\n\nthe inverse of \\(a\\in \\mathbb{R}\\) w.r.t. addition is -a since \\(a+(-a)=(-a)+a=0\\)\nthe inverse of \\(a\\in\\mathbb{R}^*\\) w.r.t. multiplication is \\(\\frac{1}{a}\\) since \\(a(\\frac{1}{a})=(\\frac{1}{a})a=1\\)"
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#proof-outlines",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#proof-outlines",
    "title": "Midterm Prep. Group Theory",
    "section": "Proof Outlines",
    "text": "Proof Outlines\n\nCommutative:\n\\(\\underline{\\text{No}}\\): Give an example, “Let a = 1, and b =2”, and then show \\(a*b\\ne b*a\\).\n\\(\\underline{\\text{Yes}}\\): “For any a,b in the set” and then show \\(a*b=b*a\\).\nAssociative\n\\(\\underline{\\text{No}}\\): Give an example, “Let a=1, b=2, c=3” and then show \\(a*(b*c)\\ne (a*b)*c\\).\n\\(\\underline{\\text{Yes}}\\): “For any a,b,c in the set” and then show \\(a*(b*c)=(a*b)*c\\).\nIdentity\n\\(\\underline{\\text{No}}\\): Suppose that \\(e\\in\\) the given set \\(\\Rightarrow\\) \\(a*e=a\\) \\(\\forall a\\in\\) the given set. Then show \\(a*e=a\\) by plugging e in for b and solving for e. “Since the identity element must be a constant then there is no identiy w.r.t.” the given set. (can’t involve variables)\n\\(\\underline{\\text{Yes}}\\): State what the identity element is w.r.t. the orperation and show that \\(a*e=a\\) and \\(e*a=a\\).\nInverses\n\\(\\underline{\\text{No}}\\): Given an example of an element who doesn’t have an inverse.\nNote: If there is not identity element then there is no inverse.\n\\(\\underline{\\text{Yes}}\\): “Suppose b=\\(a^{-1}\\). Then \\(a*b=e\\)” (where e is the identity found in 3), and then try to solve the eqation for b. Then check \\(b*a=e\\) as well.\nNote: Do not need to check \\(b*a=e\\) if we know * is commutative."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#proposition-1",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#proposition-1",
    "title": "Midterm Prep. Group Theory",
    "section": "Proposition 1",
    "text": "Proposition 1\nLet G be a group, then G has exactly one identity element."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#proposition-2",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#proposition-2",
    "title": "Midterm Prep. Group Theory",
    "section": "Proposition 2",
    "text": "Proposition 2\nEvery element of G has exactly one inverse."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#theorem-1-cancellation-law",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#theorem-1-cancellation-law",
    "title": "Midterm Prep. Group Theory",
    "section": "Theorem 1 (Cancellation Law)",
    "text": "Theorem 1 (Cancellation Law)\nLet G be a group and let \\(a,b,c\\in G\\), then \\(ab=ac\\Rightarrow b=c\\) and \\(ba=ca\\Rightarrow b=c\\)."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#theorem-2",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#theorem-2",
    "title": "Midterm Prep. Group Theory",
    "section": "Theorem 2",
    "text": "Theorem 2\nLet G be a group and let \\(a,b\\in G\\). If \\(ab=e\\), then a and b are inverses, i.e. \\(a=b^{-1}\\) and \\(b=a^{-1}\\)."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#theorem-3",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#theorem-3",
    "title": "Midterm Prep. Group Theory",
    "section": "Theorem 3",
    "text": "Theorem 3\nLet G be a group and let \\(a,b\\in G\\) then \\((ab)^{-1}=b^{-1}a^{-1}\\) and \\((a^{-1})^{-1}=a\\).\n\nto show a and b are inverses, show their product is e."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#klein-4-group",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#klein-4-group",
    "title": "Midterm Prep. Group Theory",
    "section": "Klein 4 Group",
    "text": "Klein 4 Group\n(for fintie groups) : \\(a^2=b^2=c^2=e\\)"
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#example",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#example",
    "title": "Midterm Prep. Group Theory",
    "section": "Example",
    "text": "Example\nAddition:\n\n\\(0\\in H\\).\n\\(\\forall\\) a,b \\(\\in H\\) \\(a+b=H\\).\n\\(\\forall\\) \\(a\\in H\\) , \\(-a\\in H\\)."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#proof-outlines-two-step-subgroup-test",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#proof-outlines-two-step-subgroup-test",
    "title": "Midterm Prep. Group Theory",
    "section": "Proof Outlines (Two-Step Subgroup Test)",
    "text": "Proof Outlines (Two-Step Subgroup Test)\n\n\\(e\\in H\\)\nfor all a,b \\(\\in H\\), \\(ab^{-1}\\in H\\).\n\nProve something is a subgroup of G.\n\n“Suppose” then show e is 0 or 1 for the subgroup in a short series of equalities, “the additive or multiplicative element 0 or 1 is in” the subgroup.\n“Now take any a,b \\(\\in\\) the subgroup.” Then define a and b potentially for some other integers. Then show \\(ab^{-1}=\\) something identifiable in the subgroup.\n\n“Therefore we’ve shown that” our subgroup “contains the identity element and for all a,b \\(\\in H\\) , \\(ab^{-1}\\in\\)” our subgroup. Thus our subgroup is a subgroup of G."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#example-1",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#example-1",
    "title": "Midterm Prep. Group Theory",
    "section": "Example",
    "text": "Example\nAddition:\n\n\\(0\\in H\\).\nfor all \\(a,b\\in H\\), \\(a+(-b)=a-b\\in H\\)."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#added-notes",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#added-notes",
    "title": "Midterm Prep. Group Theory",
    "section": "Added Notes",
    "text": "Added Notes\n\nIf G is abelian, then \\((ab)^n=a^nb^n\\) for all \\(n\\in \\mathbb{N}\\).\nIn any group \\((a^{-1})^n=(a^n)^{-1}\\) for all \\(n\\in \\mathbb{N}\\).\nIn any group \\(e^{-1}=e\\)."
  },
  {
    "objectID": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#two-step-subgroup-test",
    "href": "01_blog/2022_03_28_Midterm-Prep-Group-Theory/index.html#two-step-subgroup-test",
    "title": "Midterm Prep. Group Theory",
    "section": "Two-step subgroup test",
    "text": "Two-step subgroup test\nLet G be a group. A subset H \\(\\subseteq G\\) is a subgroup of G if\n\n\\(e\\in H\\)\n\n\naddition: show 0 \\(\\in H\\)\n\n\n\\(\\forall a,b,\\in H\\), \\(ab^{-1}\\in H\\).\n\n\naddition: \\(\\forall\\) a,b \\(\\in H\\), \\(a+(-b)=a-b\\in H\\)"
  },
  {
    "objectID": "01_blog/2022_04_18_Tidy-Spice/index.html",
    "href": "01_blog/2022_04_18_Tidy-Spice/index.html",
    "title": "Tidy Spice",
    "section": "",
    "text": "This post is my reproduction of Julia Silge’s blogpost Topic Modeling for #TidyTuesday Spice Girls Lyrics, with some added inspiration from a blogpost by Ariane Aumaitre called Tutorial: Text analysis and data visualization with Taylor Swift songs."
  },
  {
    "objectID": "01_blog/2022_04_18_Tidy-Spice/index.html#gamma-matrix",
    "href": "01_blog/2022_04_18_Tidy-Spice/index.html#gamma-matrix",
    "title": "Tidy Spice",
    "section": "Gamma Matrix",
    "text": "Gamma Matrix\nGamma Matricies\n\nsong_topics <- tidytext::tidy(topic_model,\n                              matrix = \"gamma\",\n                              document_names = base::rownames(lyrics_sparse)\n)\nsong_topics\n\n# A tibble: 124 × 3\n   document                   topic    gamma\n   <chr>                      <int>    <dbl>\n 1 2 Become 1                     1 0.932   \n 2 Denying                        1 0.00154 \n 3 Do It                          1 0.996   \n 4 Get Down With Me               1 0.300   \n 5 Goodbye                        1 0.000971\n 6 Holler                         1 0.00155 \n 7 If U Can't Dance               1 0.000896\n 8 If You Wanna Have Some Fun     1 0.0171  \n 9 Last Time Lover                1 0.140   \n10 Let Love Lead the Way          1 0.00178 \n# … with 114 more rows\n\n\n\nsong_topics %>%\n  dplyr::mutate(\n    song_name = fct_reorder(document, gamma),\n    topic = base::factor(topic)\n  ) %>%\n  ggplot2::ggplot(ggplot2::aes(gamma, topic, fill = topic)) +\n  ggplot2::geom_col(show.legend = FALSE) +\n  ggplot2::facet_wrap(vars(song_name), ncol = 4) +\n  ggplot2::scale_x_continuous(expand = c(0, 0)) +\n  ggplot2::labs(x = base::expression(gamma), y = \"Topic\")"
  },
  {
    "objectID": "01_blog/2022_04_25_PDX-R-Aggregate-Making-Tables-with-gt/index.html",
    "href": "01_blog/2022_04_25_PDX-R-Aggregate-Making-Tables-with-gt/index.html",
    "title": "Portland R User Group: Aggregate making tables with gt packag",
    "section": "",
    "text": "Ted Landeras led this event for Portland R user Group where we watched Rich Lannone|| Making Beautiful Tables with {gt}|| RStudio as a group on Youtube, and then went through some other examples."
  },
  {
    "objectID": "01_blog/2022_04_25_PDX-R-Aggregate-Making-Tables-with-gt/index.html#example-1",
    "href": "01_blog/2022_04_25_PDX-R-Aggregate-Making-Tables-with-gt/index.html#example-1",
    "title": "Portland R User Group: Aggregate making tables with gt packag",
    "section": "Example 1",
    "text": "Example 1\n\nhead(rock)\n\n  area    peri     shape perm\n1 4990 2791.90 0.0903296  6.3\n2 7002 3892.60 0.1486220  6.3\n3 7558 3930.66 0.1833120  6.3\n4 7352 3869.32 0.1170630  6.3\n5 7943 3948.54 0.1224170 17.1\n6 7979 4010.15 0.1670450 17.1\n\n\n\nrock %>% # Get 'rock' data\n  head(5) %>% # First 5 lines only\n  gt() # Make a table, it just works.\n\n\n\n\n\n  \n  \n    \n      area\n      peri\n      shape\n      perm\n    \n  \n  \n    4990\n2791.90\n0.0903296\n6.3\n    7002\n3892.60\n0.1486220\n6.3\n    7558\n3930.66\n0.1833120\n6.3\n    7352\n3869.32\n0.1170630\n6.3\n    7943\n3948.54\n0.1224170\n17.1"
  },
  {
    "objectID": "01_blog/2022_04_25_PDX-R-Aggregate-Making-Tables-with-gt/index.html#example-2",
    "href": "01_blog/2022_04_25_PDX-R-Aggregate-Making-Tables-with-gt/index.html#example-2",
    "title": "Portland R User Group: Aggregate making tables with gt packag",
    "section": "Example 2",
    "text": "Example 2\n\nhead(BOD)\n\n  Time demand\n1    1    8.3\n2    2   10.3\n3    3   19.0\n4    4   16.0\n5    5   15.6\n6    7   19.8\n\n\n\nBOD %>% # Get the data...\ngt() %>% # use 'gt' to make an awesome table...\n  tab_header( \n    title = \"BOD Table Woooooo!\", # ...with this title\n    subtitle = \"Hooray gt!\") %>% # and this subtitle\n  fmt_number( # A column (numeric data)\n    columns = vars(Time), # What column variable? BOD$Time\n    decimals = 2 # With two decimal places\n    ) %>% \n  fmt_number( # Another column (also numeric data)\n    columns = vars(demand), # What column variable? BOD$demand\n    decimals = 1 # I want this column to have one decimal place\n  ) %>% \n  cols_label(Time = \"Time (hours)\", demand = \"Demand (mg/L)\") # Update labels\n\n\n\n\n\n  \n    \n      BOD Table Woooooo!\n    \n    \n      Hooray gt!\n    \n  \n  \n    \n      Time (hours)\n      Demand (mg/L)\n    \n  \n  \n    1.00\n8.3\n    2.00\n10.3\n    3.00\n19.0\n    4.00\n16.0\n    5.00\n15.6\n    7.00\n19.8"
  },
  {
    "objectID": "01_blog/2022_04_25_PDX-R-Aggregate-Making-Tables-with-gt/index.html#example-3",
    "href": "01_blog/2022_04_25_PDX-R-Aggregate-Making-Tables-with-gt/index.html#example-3",
    "title": "Portland R User Group: Aggregate making tables with gt packag",
    "section": "Example 3",
    "text": "Example 3\n\nBOD %>% # Get the data...\ngt() %>% # use 'gt' to make an awesome table...\n  tab_header( \n    title = \"BOD Table Woooooo!\", # ...with this title\n    subtitle = \"Hooray gt!\") %>% # and this subtitle\n  fmt_number( # A column (numeric data)\n    columns = vars(Time), # What column variable? BOD$Time\n    decimals = 2 # With two decimal places\n    ) %>% \n  fmt_number( # Another column (also numeric data)\n    columns = vars(demand), # What column variable? BOD$demand\n    decimals = 1 # I want this column to have one decimal place\n  ) %>% \n  cols_label(Time = \"Time (hours)\", demand = \"Demand (mg/L)\") # Update labels\n\n\n\n\n\n  \n    \n      BOD Table Woooooo!\n    \n    \n      Hooray gt!\n    \n  \n  \n    \n      Time (hours)\n      Demand (mg/L)\n    \n  \n  \n    1.00\n8.3\n    2.00\n10.3\n    3.00\n19.0\n    4.00\n16.0\n    5.00\n15.6\n    7.00\n19.8"
  },
  {
    "objectID": "01_blog/2022_04_25_PDX-R-Aggregate-Making-Tables-with-gt/index.html#example-4",
    "href": "01_blog/2022_04_25_PDX-R-Aggregate-Making-Tables-with-gt/index.html#example-4",
    "title": "Portland R User Group: Aggregate making tables with gt packag",
    "section": "Example 4",
    "text": "Example 4\n\ntooth_length <- ToothGrowth %>% \n  group_by(supp, dose) %>% \n  summarize(\n    mean_len = mean(len)\n  ) %>% \n  as_tibble() \n\n# A gt table: \ntooth_length %>% # Take tooth_length\n  gt() %>% # Make a gt table with it\n  tab_header(\n    title = \"A title just like that\", # Add a title\n    subtitle = \"(with something below it!)\" # And a subtitle\n  ) %>%\n  fmt_passthrough( # Not sure about this but it works...\n    columns = vars(supp) # First column: supp (character)\n  ) %>% \n  fmt_number(\n    columns = vars(mean_len), # Second column: mean_len (numeric)\n    decimals = 2 # With 4 decimal places\n  ) %>% \n  fmt_number(\n    columns = vars(dose), # Third column: dose (numeric)\n    decimals = 2 # With 2 decimal places\n  ) %>% \n  data_color( # Update cell colors...\n    columns = vars(supp), # ...for supp column!\n    colors = scales::col_factor( # <- bc it's a factor\n      palette = c(\n        \"green\",\"cyan\"), # Two factor levels, two colors\n      domain = c(\"OJ\",\"VC\")# Levels\n  )\n  ) %>% \n  data_color( # Update cell colors...\n    columns = vars(dose), # ...for dose column \n    colors = scales::col_numeric( # <- bc it's numeric\n      palette = c(\n        \"yellow\",\"orange\"), # A color scheme (gradient)\n      domain = c(0.5,2) # Column scale endpoints\n  )\n  ) %>% \n  data_color( # Update cell colors...\n    columns = vars(mean_len), # ...for mean_len column\n    colors = scales::col_numeric(\n      palette = c(\n        \"red\", \"purple\"), # Overboard colors! \n      domain = c(7,27) # Column scale endpoints\n  )\n  ) %>% \n  cols_label(supp = \"Supplement\", dose = \"Dosage (mg/d)\", mean_len = \"Mean Tooth Length\") %>% # Make the column headers\n  tab_footnote(\n    footnote = \"Baby footnote test\", # This is the footnote text\n    locations = cells_column_labels(\n      columns = vars(supp) # Associated with column 'supp'\n      )\n    ) %>% \n    tab_footnote(\n    footnote = \"A second footnote\", # Another line of footnote text\n    locations = cells_column_labels( \n      columns = vars(dose) # Associated with column 'dose'\n      )\n    )\n\n\n\n\n\n  \n    \n      A title just like that\n    \n    \n      (with something below it!)\n    \n  \n  \n    \n      Supplement1\n      Dosage (mg/d)2\n      Mean Tooth Length\n    \n  \n  \n    OJ\n0.50\n13.23\n    OJ\n1.00\n22.70\n    OJ\n2.00\n26.06\n    VC\n0.50\n7.98\n    VC\n1.00\n16.77\n    VC\n2.00\n26.14\n  \n  \n  \n    \n      1 Baby footnote test\n    \n    \n      2 A second footnote"
  },
  {
    "objectID": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html",
    "href": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html",
    "title": "Final Prep. Group Theory",
    "section": "",
    "text": "Notes consist of order, cyclic groups, counting cosets, homomorphisms, normal subgroups, quotient groups, and the Fundamental Homomorphism Theorem."
  },
  {
    "objectID": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#theorems",
    "href": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#theorems",
    "title": "Final Prep. Group Theory",
    "section": "Theorems",
    "text": "Theorems\nTheorem 3: Let G be a group and let \\(a\\in G\\) have order \\(n<\\infty\\). Then every power of a is equal to exactly one \\(e,a,a^2,a^3,...,a^{n-1}\\)\nCorollary: Let ord(a)=\\(n<\\infty\\). Then the cyclic group generated by a has n elements. \\(\\langle a\\rangle=\\{...,a^{-2},a^{-1},e,a,a^2,a^3\\}=\\{e,a,a^2,...,a^{n-1}\\}\\).\nTheorem 4: Let ord(a)=\\(\\infty\\). Then for all \\(i,j\\in\\mathbb{Z}\\), if \\(i\\in j\\) then \\(a^i\\ne a^j\\).\n(No power of a gives the identity, and no power of a is the same.)\nCorollary: If ord(a)=\\(\\infty\\), the cyclic group generated by a has infintely many elements: \\(\\langle a\\rangle =\\{...,a^{-2},a^{-1},e,a,a^{2},...\\}\\)\nTheorem 5: Let \\(a\\in G\\) have order \\(n<\\infty\\). Then \\(a^m=e\\) if and only if m is a multiple of n."
  },
  {
    "objectID": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#facts-about-cyclic-groups",
    "href": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#facts-about-cyclic-groups",
    "title": "Final Prep. Group Theory",
    "section": "Facts about Cyclic Groups",
    "text": "Facts about Cyclic Groups\nLet \\(G=\\langle a\\rangle=\\{e,a,a^2,a^3,...,a^{n-1}\\}\\) be a cyclic group of size n. \n\nG is abelian (Since \\(a^ia^j=a^{i+j}=a^{j}a^{i}\\))\nLet \\(k\\geq 1\\) be a positive divisor of \\(|G|=n\\). Then G has exactly one subgroup of size k.\nThe subgroup of G of size 1 is \\(\\langle e\\rangle =\\{e\\}\\). If \\(k>1\\) is a divisor of n, the subgorup of size k is \\(\\langle a^{n/k}\\rangle\\)"
  },
  {
    "objectID": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#definitions",
    "href": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#definitions",
    "title": "Final Prep. Group Theory",
    "section": "Definitions",
    "text": "Definitions\ncoset: Let G be a group and H a subgroup of G. For any \\(a\\in G\\), the set \\(Ha=\\{ha|h\\in H\\}.\\) This is a (right) \\(\\underline{\\text{coset}}\\) of H in G.\nindex: The number of cosets of H in G, n, is called the \\(\\underline{\\text{index}}\\) of H in G."
  },
  {
    "objectID": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#facts-about-cosets",
    "href": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#facts-about-cosets",
    "title": "Final Prep. Group Theory",
    "section": "Facts about Cosets",
    "text": "Facts about Cosets\n\nAll cosets have the same size as H.\nDistinct cosets don’t overlap.\nEvery element of G is in some coset of H.\nHow should we choose a so that we don’t get repeated cosets? Choose a to be an element of G that hasn’t yet appeared in a coset.\nHow do we know when we’ve listed all cosets? We’re done when every element of G has appeared in a coset."
  },
  {
    "objectID": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#theorems-1",
    "href": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#theorems-1",
    "title": "Final Prep. Group Theory",
    "section": "Theorems",
    "text": "Theorems\nLemma: Distinct cosets don’t overlap.\nCorollary: If \\(a\\in Hb\\) then \\(Ha=Hb\\).\nTheorem 1: The set \\(\\{Ha|a\\in G\\}\\) of all cosets of H is a partiion of G.\nCorollary: Define a relation \\(\\sim\\) on G by \\(a\\sim b\\) iff a and b are in the same coset of H.\nTheorem 2: Every coset of H in G has the same size as H.\nLagrange’s Theorem: Let G be a finite group and H be a subgroup of G. Then the size of H divides the size of G.\nTheorem 4: Let \\(p\\in\\mathbb{Z}\\) be prime. If \\(|G|=p\\), then \\(G\\cong\\mathbb{Z}_p\\).\nTheorem 5: Let G be a finite group and \\(a\\in G\\). Then ord(a) divides \\(|G|\\)."
  },
  {
    "objectID": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#definitions-1",
    "href": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#definitions-1",
    "title": "Final Prep. Group Theory",
    "section": "Definitions",
    "text": "Definitions\nHomomorphism: Let \\(G_1\\) and \\(G_2\\) be groups. A \\(\\underline{\\text{homomorphism}}\\) is a function \\(f:G_1\\rightarrow G_2\\) such that for all \\(a,b\\in G_1\\), \\(f(ab)=f(a)f(b)\\).\nHomomorphic Image: If \\(f:G_1\\rightarrow G_2\\) is an onto homomorphism, we call \\(G_2\\) a \\(\\underline{\\text{homomorphic image}}\\) of \\(G_1\\).\nKernel: Let \\(f:G_1\\rightarrow G_2\\) be a homomorphism. The \\(\\underline{\\text{kernel}}\\) of f is the set of all elements in \\(G_1\\) that get sent to \\(e_2\\in G_2\\): \\(\\text{ker}(f)=\\{x\\in G_1|f(x)=e_2\\}.\\)\nConjugate: Let G be a group and \\(g_1x\\in G\\). The element \\(gxg^{-1}\\) is called the \\(\\underline{\\text{conjugate}}\\) of x by g. Going from x to \\(gxg^{-1}\\) is called \\(\\underline{\\text{conjugation by g}}\\).\nNormal: Let H be a subgroup of G. We call H a \\(\\underline{\\text{normal}}\\) subgroup of G if for all \\(g\\in G\\) and \\(h\\in H\\), the conjugate \\(ghg^{-1}\\) is in H. Notation: \\(H \\unlhd G\\)\nNormal Subgroup: A subgroup H of G is called a \\(\\underline{\\text{normal subgroup}}\\) if for all \\(g\\in G\\) and \\(h\\in H\\). \\(ghg^{-1}\\in H\\)."
  },
  {
    "objectID": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#theorems-2",
    "href": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#theorems-2",
    "title": "Final Prep. Group Theory",
    "section": "Theorems",
    "text": "Theorems\nTheorem 1: Let \\(f:G_1\\rightarrow G_2\\) be a homomorphism. Then\n\n\\(f(e_1)=e_2\\)\n\\(f(a^{-1})=[f(a)]^{-1}\\forall a\\in G_1\\)\n\nTheorem: Let \\(f:G_1\\rightarrow G_2\\) be a homomorphism. Then f is one-to-one if and only if ker(f)=\\(\\{e_1\\}\\).\nTheorem: If G is abelian, every subgroup of G is normal.\nTheorem: Let H be a subgroup of G. Then H is normal in G if and only if \\(aH=Ha\\) for all \\(a\\in G\\).\nTheorem: A subgroup H of G is normal in G iff \\(aH=Ha\\forall a\\in G\\).\nTheorem 2: Let \\(f:G_1\\rightarrow G_2\\) be a homomorphism.\n\nran(f)=\\(\\{f(x)|x\\in G_1\\}\\) is a subgroup of \\(G_2\\)\nker(f) is a normal subgroup of \\(G_1\\)."
  },
  {
    "objectID": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#theorems-3",
    "href": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#theorems-3",
    "title": "Final Prep. Group Theory",
    "section": "Theorems",
    "text": "Theorems\nTheorem 2: Let H be a normal subgroup of G. If \\(Ha=Hc\\) and \\(Hb=Hd\\), then \\(H(ab)=H(cd)\\).\nTheorem 3: Let H be a normal subgroup of G. The set \\(G/H=\\{Ha|a\\in G\\}\\)\nTheorem 4: Let H be a normal subgroup of G. The function \\(f:G\\rightarrow G/H\\) define by \\[f(a)=Ha\\] is a surjective homomorphsim with kernel H.\nTheorem 5: Let H be a subgroup of G.\n\n\\(Ha=Hb\\) if and only if \\(ab^{-1}\\in H\\).\n\\(Ha=H\\) if and only if \\(a\\in H\\)."
  },
  {
    "objectID": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#theorems-4",
    "href": "01_blog/2022_05_23_Final-Prep-Group-Theory/index.html#theorems-4",
    "title": "Final Prep. Group Theory",
    "section": "Theorems",
    "text": "Theorems\nTheorem 1: Let \\(f:G\\rightarrow H\\) be a homomorphism with kernel K. Then \\(f(a)=f(b) \\Leftrightarrow Ka=Kb\\).\nTheorem 2: Let \\(f:G\\rightarrow H\\) be a surjective (onto) homomorphism with kernel K. Then \\(G/K\\cong H\\)."
  },
  {
    "objectID": "01_blog/2022_05_30_Final-Prep-Geometry/index.html",
    "href": "01_blog/2022_05_30_Final-Prep-Geometry/index.html",
    "title": "Final Prep. Modern College Geometry",
    "section": "",
    "text": "1. Euclidean Geometry\n\nEuclid’s 5th Axiom\nTriangle Congruence: SAS, ASA, SSS, AAS\nAngles and Parallel Lines\n\nvertical angels are congruent\ncorresponding angles are congruent\nalternate interior angles are congruent\nsupplementary angles add to \\(180^\\circ\\)\n\n\nQuadrilaterals: 4 sided figure in the plane, where the edges are straight lines.\nParallelogram: Both pairs of opposite sides are parallel.\nTrapezoid: At least 1 pair of opposite sides are parallel.\nRhombus: Parallelogram, all sides are same length.\nRectangle: Parallelogram whose internal angles are all right angles.\nSquare: Rectangle whose sides are all equal length.\nParallelogram Theorem: Let ABCD be a parallelogram. Then the following are equivalent:\n\nABCD is a parallelogram. (opposite sides are parallel)\n\\(\\angle DAB \\cong \\angle BCD\\) and \\(\\angle ABC\\cong \\angle CDA\\) (angles that are across from each other are congruent)\n\\(AB=CD\\) and \\(BC=DA\\) (opposite sides have equal measure)\n\\(\\overline{AC}\\) and \\(\\overline{BD}\\) bisect each other. (diagnals bisect each other)\n\nAxioms of Area:\n\nTo every polygonal region (space enclosed by straight lines in the plane) there corresponds a unique positive number called \\(\\underline{area}\\).\nIf 2 tirangles are congruent their areas are equal.\nIf \\(R=R_1\\cup R_2\\) and \\(R_1\\cap R_2\\) is a finite number of segments or points, then the area of \\(R\\) is the sum of the areas of \\(R_1+R_2\\).\nThe area of a rectangle is its base times its height.\n\n\n\n2. Similarity\nDilation: shrink or expand by a scaling factor, k, from a center point, P.\nSimilarity: 2 figures are similar if one can be superimposed on the other by a dilation and a sequence of isometries.\n\nAA, SAS\n\n\n\n3. Circles\nCircle: center, radius\nPoints on circle have distance r from the center point O.\nUnit Circle: radius length 1.\nArc: a connected subset of the points on circle.\nChord: line segment connecting 2 points on circle.\nCentral Angle: vertex is center of circle, rays intersect in 2 different points. (pie slice)\nInscribed Angles vertex is on circle, rays intersect circle in 2 points.\nInscribed: verities on circle.\nFor an inscribed square, all four points of a square are on the circle.\nTangent Line: Line that intersects circle at only 1 point.\nRadian: measure of the central angle in a unit circle with arc length of 1.\nInscribed Angle Theorem: An inscribed angle is half of a centeral angle that subtends the same arc.\nCorollary: Any two inscribed angles have the same arc on the circle are congruent.\nPower of the Point Theorem 1: If \\(\\overline{AB}\\) and \\(\\overline{CD}\\) are chords of circle intersecting in x inside a circle. Then \\(Ax\\cdot xB=Cx\\cdot xD\\)\nPower of the Point Theorem 2: LEt P be a point outside a given circle. Suppose we draw two rays from the point P: one ray intersects the circle at points A and B (in that order), and the other intersects the circle at the points C and D (in that order). Then \\(PA\\cdot PB=PC\\cdot PD\\)\n\n\n4. Isometries and Symmetries\nThe set of isometries with composition is a group:\n\nClosure\nAssociativity\nIdentity\nInverses\n\nSymmetry A symmetry is an isometry that sends a geometric figure to itself.\n\n6 symmetries of an equilateral triangle\n8 symmetries of a square\n2n symmetries of a regular polygon\n\n\n\n5. Taxicab Geometry\nEuclidean Distance: \\(d_E(A,B)=\\sqrt{(x_B-x_A)^2+(y_B-y_A)^2}\\)\n\n\\(\\pi\\approx 3.14\\)\n\nTaxicab Distance: \\(d_T=|x_B-x_A|+|y_B-y_A|\\)\n\n\\(\\pi = 4\\)\n\nIsometries for taxicab (traingles):\n\ntranslations\nrotations by \\(90^\\circ k\\) where k is an integer\ncombinations\n\n\n\n6. Spherical Geometry\nNo parallel may be drawn through a point not on a given line.\nEquation of a Sphere: \\(S^2=\\{(x,y,z)\\in\\mathbb{R}^3|x^2+y^2+z^2=\\rho^2\\}\\)\n\ngreat circles are straight lines (equator and longitudes)\n\nDistance of a Sphere: \\(d_s(A,B)=\\rho\\cdot\\text{arc cos}(\\frac{A\\cdot B}{\\rho ^2})\\)\nTriangle Angle Measurements\n\nCan have three right angles\nAll three angles added together will be greater than \\(180^\\circ\\)\n\nArea of a Sphere: \\(\\rho^2\\cdot E\\) (where the excess \\(E=\\alpha+\\beta+\\gamma-180^\\circ\\))\nConsider the surface area of a sphere to be \\(4\\pi\\rho^2\\), then the area of a triangle on a sphere will be a proportion of that.\n\n\n7. Hyperbolic Geometry\nMore than one parallel may be drawn through a point not on a given line.\nInversions about a circle\n\npreserve angles (conformal)\n\nCross Ratio: Given four distinct points (A,B,C,D) in the plane, the cross ratio is define \\((A,B;C,D)=\\frac{AC\\cdot BD}{BC\\cdot AD}\\)"
  }
]