---
title: "Week 8 Tidy Tuesday: Bob Ross Paintings"
date: "2023-02-21"
categories: ["#TidyTuesday", R]
draft: false
---

Step into the world of happy little data with my Week 8 [#TidyTuesday](https://github.com/rfordatascience/tidytuesday) submission which reveals the number of colors Bob Ross used each season of "The Joy of Painting".

# Bob Ross Paintings

The data this week comes from Jared Wilber's data on [Bob Ross Paintings](https://github.com/jwilber/Bob_Ross_Paintings/blob/master/data/bob_ross_paintings.csv) via @frankiethull [Bob Ross Colors data package](https://github.com/frankiethull/BobRossColors).

![](plot.png)

# Code

This week I wanted to keep the visual fairly simple so that I could focus my efforts on designing the project in a way that felt intuitive, was easy to read, and had a manageable workflow. To achieve these objectives I broke the project into three key functions: cleaning, visualizing, and styling - organized within the 'Functions' folder for that weeks submission. The `index.R` file integrates data loading, function execution, and the generation of of a data visualization.

::: {.panel-tabset}

### Cleaning Function

```{r clean function}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#### Load Packages ####
# dplyr: data cleaning functions.
base::library(dplyr)
#### Cleaning Function ####
clean <- function(df){
  # clean function
  clean_df <- df %>%
    dplyr::group_by(season) %>%
    dplyr::summarise(
      total_num_colors = base::sum(num_colors))
  return(clean_df)
}
```

### Visual Function

```{r visual function}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#### Load Packages ####
# ggplot2: graphing functions. 
base::library(ggplot2)
#### Visual Function ####
vis <- function(clean_df){
  vis <- ggplot2::ggplot(
    clean_df,
    ggplot2::aes(
      x = season,
      y = total_num_colors)) +
    ggplot2::geom_point() + 
    ggplot2::geom_segment(
      ggplot2::aes(
        x = season,
        xend = season,
        y = 0,
        yend = total_num_colors)) + 
    ggplot2::geom_hline(
      yintercept=137.871, 
      linetype="dashed", 
      color = "red") +
    ggplot2::geom_text(
      ggplot2::aes(label = total_num_colors,
                   vjust = -1)
    )
  return(vis)
}
```

### Style Function

```{r style function}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#### Load Packages ####
# ggplot2: graphing functions. 
base::library(ggplot2)
#### Style Function ####
sty <- function(vis){
  sty <- vis +
    # labels 
    ggplot2::labs(
      title = "Colors Used Each Season",
      subtitle = "The dashed red line shows the average number of colors used each season, 137.871.",
      caption = "Graph by Randi Bolt \n Data from #TidyTuesday",
      x = "Season",
      y = "Colors Used"
    ) + 
    # themes
    ggplot2::theme_classic() + 
    ggplot2::theme(
      plot.title = element_text(
        face = "bold",
        hjust = .5),
      plot.subtitle = element_text(
        hjust = .5)
    ) 
  return(sty)
  }
```

### Index.R

```{r index file}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#| message: false
#### Load Packages ####
# tidyverse: A collection of data-related packages.
base::library(tidyverse)

#### Load Data ####
# bob_ross: data about and from "The Joy of Painting".
tt_data <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-21/bob_ross.csv')

#### Clean Data ####
clean_data <- clean(tt_data)

#### Create Data Visual ####
vis_data <- vis(clean_data)

#### Style Data Visual ####
sty_vis <- sty(vis_data)

#### Save Plot ####
ggplot2::ggsave(
  base::paste0("plot.png"), 
  width = 30, 
  height = 20, 
  units = "cm")
```

### Links

[Week 8 Submission](https://github.com/rbolt13/tidytuesday/tree/main/2023/week_08) 

[TidyTuesday Repository](https://github.com/rbolt13/tidytuesday).

:::

# Quick Notes

* To make a lollipop graph using ggplot2 you need to assign `geom_point()` and `geom_segment()`.

* `goem_hline()` was used to created the dashed horizontal red line.

* `geom_text()` is used to add the values above the lollipops. 

* Using the TidyTuesdayR package can be problematic. 

* It looks nicer to keep all labels in the `labs()` function. 