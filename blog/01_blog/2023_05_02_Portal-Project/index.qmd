---
title: "The Portal Project (Week 18)"
date: "2023-05-02"
categories: ["#TidyTuesday", R, "Data Visuals"]
draft: true
toc: true
---

In this post, I will guide you through the process of creating a data visualization for the Portal Project's #TidyTuesday[^1] challenge in Week 18 of 2023.

[^1]: [#tidytuesday](https://github.com/rfordatascience/tidytuesday)

![](img1.png)

# Introduction

> The Portal Project is a long-term ecological study being conducted near Portal, AZ. Since 1977, the site has been used to study the interactions among rodents, ants and plants and their respective responses to climate. To study the interactions among organisms, they experimentally manipulate access to 24 study plots. This study has produced over 100 scientific papers and is one of the longest running ecological studies in the U.S.[^2]

[^2]: [Portal Project](https://portal.weecology.org/)

This post will follow a similar format to what is presented in Rohan Alexander's Book [Telling Stories with Data](https://tellingstorieswithdata.com/). We will start with a plan of how the data and graph should look. Then simulate the data and visualization. Next we will acquire and clean the data, explore the data by creating the visual, and lastly share the data by saving it.

```{r, setup }
#| code-fold: true
#| code-summary: "Show Preamble"
#| warning: false
#### Preamble ####
# Purpose: Read in data from csv and make a
# graph of swollen testicles by month and year
# of the AZ Merriam Kangaroo Rat.
# Author: Randi Bolt
# Email: randibolt93@gmail.com
# Date: 2 May 2023
# Prerequisites: -
#### Workspace setup ####
# tidyverse: A collection of data-related packages
# ggridges: creates partially overlapping line plots
base::library(tidyverse) 
base::library(ggridges)
```

# 1. Plan

To start, we need to think about two things: What the **data** should look like, and what the **graph** should look like.

::: columns
::: {.column width="49%"}
### üêÄ Simulated Data

```{r moc data}
#| code-fold: true
#| code-summary: "Show Code for Simulted Data"
#| warning: false
#### Simulated Data ####
# Includes:
# - years between 1978 and 2022
# - months between 1 and 12
# - n between 1 and 20
df <- base::data.frame(
  "year" = base::sample(
    c(1978:2022),
    size = 399,
    replace = TRUE),
  "month" = base::sample(
    c(1,2,3,4,5,6,7,8,9,10,11,12),
    size = 399,
    replace = TRUE),
  "n" = base::sample(
    c(1:20),
    size = 399,
    replace = TRUE
  ))
utils::head(df)
```

### üêÄ Graph Function

```{r graphing function}
#| code-fold: true
#| code-summary: "Show Code for Graphing Function"
#| warning: false
#### Graph Function ####
# A function that takes in a df,
# and outputs a graph.
# 
# @param df is a dataframe with that 
# include month, year, and n. 
# @return vis is a graph. 
#
# Parts:
# 1. Mapping 
# 2. Graph Geometries 
# 3. Facet Wrap
vis <-  function(df){
  vis <- ggplot2::ggplot(
    df, 
    # 1. Mapping
    mapping = ggplot2::aes(
      x = month,
      y = n,
      group = year)
    ) +
  # 2. Graph geoms
  ggplot2::geom_point() +
  ggplot2::geom_line() +
  # 3. Facet Wrap
  ggplot2::facet_wrap(~year)
  return(vis)
}
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
## Graph

```{r create simple graph}
#| code-fold: show
#| code-summary: "Show Code for Sample Graph"
#| warning: false
vis(df)
```
:::
:::

# 2. Simulate

Since we've already simulated the data, and what we want our graph to look like above in the plan. All that's left to simulate is a style function for our graph. 

::: columns
::: {.column width="49%"}
### üêÄ Style Function

```{r style function}
#| code-fold: true
#| code-summary: "Show Code for Style Function"
#| warning: false
#| message: false
#### Style Function ####
# A function that inputs a graph, 
# and outputs a stylized graph. 
# 
# @param vis is a graph.
# @return sty is a stylized graph.
# 
# Parts: 
# 1. Title, subtitles, labels, caption, alt text.
# 2. X and Y scale.
# 3. Add values above points.
# 4. Format
sty <- function(vis){
  sty <- vis +
    # 1. Title, subtitles, labels, caption, alt text
    ggplot2::ggtitle("Swollen Testicles of Merriam's Kangaroo Rat by Month and Year near Portal, AZ") +
    ggplot2::labs(
      subtitle = "The Portal Project is a long-term ecological study being conducted near Portal, AZ.\nThis chart shows the number of Merriam's Kangaroo Rat with swollen testicles by month and year over the past 45 years.",
      x = "Month",
      y = "Number of Rodents",
      caption = "Graph by Randi Bolt \n Data from #TidyTuesday and Portal Project",
      alt = "This is a point and line graph showing swollen testicles of Merriam's Kangaroo Rat by months and year over the past 45 years. The x axis shows months, and the y axis shows number of rodents.") +
    
    # 2. x and y scale 
    ggplot2::scale_x_continuous(
      breaks = seq(1,12,1)) + 
    ggplot2::scale_y_continuous(
      breaks = seq(0,60,10)) +
    
    # 3. add values above points
    ggplot2::geom_text(
      ggplot2::aes(
        label = n,
        vjust = -0.2)) +
    
    # 4. format
    ggplot2::theme(
      # title
      plot.title = element_text(
        size = 16,
        face = "bold",
        color = "#232741",
        hjust = .5),
      # subtitle
      plot.subtitle = element_text(
      size = 12,
      hjust = .5,
      color = "#232741"),
    # plot background
    plot.background = element_rect(
      fill = "#C58C60"),
    # graph background
    panel.background = element_rect(
      fill = "#D3DAD9"),
    # x and y axis lables
    axis.title = element_text(
      size = 14, 
      color = "#232741"),
    # legend background
    legend.background = element_rect(
      fill = "#C58C60"),
    # facet graph titles
    strip.background = element_rect(
      fill = "#A76858"))
  return(sty)
}
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
## Stylized Graph

```{r style graph}
#| code-fold: show
#| code-summary: "Show Code for Stylized Graph"
#| warning: false
sty(vis(df)) 
```
:::
:::

# 3. Aquire

Now to read in the data, and create a cleaning function.

::: columns
::: {.column width="49%"}
### üêÄ Read Data

```{r read data}
#| code-fold: true
#| code-summary: "Show Code for Reading in the Data"
#| warning: false
#### Read in the data ####
surveys <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/surveys.csv')
```

### üêÄ Cleaning Function

```{r cleaning function}
#| code-fold: true
#| code-summary: "Show Code for Cleaning Function"
#| warning: false
#### Cleaning Function ####
# A function that takes in a df
# and returns a clean df. 
#
# @param data is a df.
# @param clean is a clean df.
#
# Parts: 
# 1. Select
# 2. Filter 
# 3. Group
# 4. Reframe
# 5. Unique 
clean <- function(data){
  clean <- data %>%
    # 1. Select 
    dplyr::select(
      month, 
      year, 
      sex, 
      testes, 
      species) %>%
    # 2. Filter 
    dplyr::filter(
      sex == "M",
      species == "DM",
      testes == "S") %>%
    # 3. Group
    dplyr::group_by(
      year, 
      month) %>%
    # 4. Refremae
    dplyr::reframe(
      month = month,
      year = year,
      n = n()) %>%
    # 5. unique 
    base::unique()
  return(clean)
}
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
## Clean Data

```{r clean data}
#| code-fold: show
#| code-summary: "Show Code for Data Cleaning"
#| warning: false
utils::head(clean(surveys))
```
:::
:::

# 4. Explore

```{r create tt visual}
#| code-fold: show
#| code-summary: "Show Code for Finished Visual"
sty(vis(clean(surveys)))
```

# 5. Share

Lastly to save the graph as a png and share this post!

```{r save tt visual}
#| code-fold: true
#| code-summary: "Show Code to save plot"
#| eval: false
ggplot2:ggsave(
  "img1.png", 
  width = 30, 
  height = 20, 
  units = "cm")
```

Thanks for reading üòÅ‚ú®
