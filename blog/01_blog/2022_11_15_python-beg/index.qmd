---
title: "Python Basics"
author: "Randi Bolt"
date: "2022-11-15"
categories: [Python]
toc: true
---

In this post I will be showcasing some basic python skills for data scientist. 

![Image of a pink snake with a bow](../../00_img/pink-snake.png)

# `0_0. Introduction`

```{python}
import numpy as np
import pandas as pd

from pandas import Series, DataFrame
```

# `1_0. Series`

Create a Series object with 8 rows. 

```{python}
series_obj = Series(np.arange(8), index=['row 1', 'row 2', 'row 3', 'row 4', 'row 5', 'row 6', 'row 7', 'row 8'])
series_obj
```

## `1_1. Extracting`

Select row 7

```{python}
series_obj['row 7']
```

Select Elements at Position 0 and 7

```{python}
series_obj[[0,7]]
```

## `1_2. Slicing`

Select every row between 3 and 7. 

```{python}
series_obj['row 3':'row 7']
```

## `1_3. Scalars`

Print values greater than 5. 

```{python}
series_obj[series_obj>5]
```

Set row 1 to the value 8. 

```{python}
series_obj['row 1'] = 8
series_obj
```

## `1_4. Missing Values`

Create a variable of missing values using np.nan

* np.nan: numpy function, not a number (nan)

```{python}
missing = np.nan
missing
```

Create a new series object with missing values for row 3 and 7.

```{python}
series_obj2 = Series(['row 1', 'row 2', missing , 'row 5', 'row 6', missing, 'row 8'])
series_obj2
```

Find what values are missing using .isnull()

* isnull(): pandas function that returns t/f if null

```{python}
series_obj2.isnull()
```

## `1_5. Rename Data`

Name series object. 

```{python}
series_obj.name ="added_variable"
series_obj
```

# `2_0. Data Frame`

Create a data frame object of 36 random numbers (6X6) with a set seed of 25.

* np.random.seed(): numpy seed generator function 
* np.random.rand(): numpy random number generator function
* reshape(): numpy function to reshape data frame 

```{python}
np.random.seed(25)
DF_obj = DataFrame(np.random.rand(36).reshape((6,6)),
                  index = ['row 1', 'row 2', 'row 3', 'row 4', 'row 5', 'row 6'],
                  columns = ['column 1', 'column 2', 'column 3', 'column 4', 'column 5', 'column 6'])
DF_obj
```

## `2_1. Extracting`

Select values from row 2, row 5, column 5, and column 2. 

```{python}
DF_obj.loc[['row 2', 'row 5'], ['column 5', 'column 2']]
```

## `2_2. Scalars`

Return a true or false for all values less than .2

```{python}
DF_obj < .2
```


## `2_3. Missing Values`

Set the values in rows 4-5 of column 1, and rows 2-4 of column 6 to missing.  

* iloc: python function used to select a particular cell of the dataset.

```{python}
DF_obj.iloc[3:5, 0] = missing
DF_obj.iloc[1:4, 5] = missing
DF_obj
```

Replace non values with 0.

* fillna: pandas function used to replace missing values. 

```{python}
# fill NaN values with 0
filled_DF = DF_obj.fillna(0)
filled_DF
```

Count the number of missing values in each column. 

```{python}
DF_obj.isnull().sum()
```

Filter out rows with missing values. 

* dropna(): pandas function that removes rows with missing values. 

```{python}
DF_no_NaN_rows = DF_obj.dropna()
DF_no_NaN_rows
```

Filter out columns with missing values.

```{python}
DF_no_NaN_columns = DF_obj.dropna(axis=1)
DF_no_NaN_columns
```


Fill the missing values with the method ffill.

* ffill: pandas function fill forward which fills in the lass non-null value in DF. 

```{python}
fill_DF = DF_obj.fillna(method='ffill')
fill_DF
```

## `2_4. Duplicates`

Create a new data frame object. 

```{python}
DF_obj2 = DataFrame({'column 1':[1,1,2,2,3,3,3],
                   'column 2' :['a', 'a', 'b', 'b', 'c','c','c'],
                   'column 3': ['A','A','B','B','C','C','C']})
DF_obj2
```

Show which rows have duplicates. 

* duplicated(): pandas function that returns t/f for rows with duplicate values. 

```{python}
DF_obj2.duplicated()
```

Drop duplicates rows. 

* drop_duplicates()

```{python}
DF_obj2_row_drop  = DF_obj2.drop_duplicates()
DF_obj2_row_drop
```

Drop duplicate from column 3. 

```{python}
DF_obj2_c3_drop = DF_obj2.drop_duplicates(['column 3'])
DF_obj2_c3_drop
```

## `2_5. Adding data`

Slice the first 6 rows of series object. 

```{python}
new_series_obj = series_obj['row 0':'row 6']
new_series_obj
```

Add new_series_obj to the end of DF_obj

```{python}
variable_added = DataFrame.join(DF_obj, series_obj)
variable_added
```

Use append to add data table to itself retaining index values. 

```{python}
added_datatable = variable_added.append(variable_added, ignore_index=False)
added_datatable
```

Use append to add data table to itself, resetting index values. 

```{python}
added_datatable = variable_added.append(variable_added, ignore_index=True)
added_datatable
```

Create a 6x6 data frame with values arraged from 0-35, and another 3x5 data frame with values arranged from 0-14. 

```{python}
DF_obj3 = pd.DataFrame(np.arange(36).reshape(6,6))
DF_obj3

DF_obj4 = pd.DataFrame(np.arange(15).reshape(5,3))
DF_obj4
```

Concatenate by adding columns. 

```{python}
pd.concat([DF_obj3, DF_obj4], axis = 1)
```

Concatenate by adding rows. 

```{python}
pd.concat([DF_obj3, DF_obj4])
```

## `2_6. Grouping and Aggregating Data`

Read cars csv with python. 

```{python}
address = '../../02_data/mtcars.csv'
cars = pd.read_csv(address)
cars.head()
```

Group by cyl and find mean values.

```{python}
cars_groups = cars.groupby(cars['cyl'])
cars_groups.mean()
```

Group by am and find mean values. 

```{python}
cars_trans_group = cars.groupby(cars['am'])
cars_trans_group.mean()
```

# `3_0. Data Visuals`

```{python}
from numpy.random import randn

import matplotlib.pyplot as plt
from matplotlib import rcParams
```

## `3_1. Line Chart`

Plot a line with matplotlib.

```{python}
# x = range(1,10)
# y = [1,2,3,4,0,4,3,2,1]
# plt.plot(x,y)
```








