---
title: "Week 22 Tidy Tuesday: Centenarians Data"
date: "2023-05-30"
categories: ["#TidyTuesday", R]
draft: false
---

For week 22 of [#TidyTuesday](https://github.com/rfordatascience/tidytuesday) we dive into the realm of centenarians' data, uncovering a suprising trend: a remarkably high number of centenarian deaths are recorded in the month of January. 

# Verified Oldest People

The data this week comes from the [Wikipedia List of the verified oldest people](https://en.wikipedia.org/wiki/List_of_the_verified_oldest_people) via [frankiethull on GitHub](https://github.com/frankiethull/centenarians). Thank you for the submission, Frank!

> These are lists of the 100 known verified oldest people sorted in descending order by age in years and days. The oldest person ever whose age has been independently verified is Jeanne Calment (1875–1997) of France, who lived to the age of 122 years and 164 days. The oldest verified man ever is Jiroemon Kimura (1897–2013) of Japan, who lived to the age of 116 years and 54 days. The oldest known living person is Maria Branyas of Spain, aged 116 years, 85 days. The oldest known living man is Juan Vicente Pérez of Venezuela, aged 114 years, 1 day. The 100 oldest women have, on average, lived several years longer than the 100 oldest men.

![](plot.png)

# Code 

This week I wanted to do more to spice up a bar plot. So I gave the visual a dark black background, and highlighted the main findings in red. This project retains its core components of cleaning, visualizing, and styling, while the index.R file handles data loading, file execution, and the generation of a data visualization. 

::: {.panel-tabset}

### Cleaning

```{r cleaning function}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#### Load Packages ####
# magrittr: %>% pipe function. 
# dplyr: data cleaning functions. 
base::library(dplyr)
base::library(magrittr)

#### Cleaning Function ####
clean <- function(df){
  clean_df <- df %>%
    dplyr::mutate(death_month = base::format(death_date, "%m")) %>%
    dplyr::group_by(death_month) %>%
    dplyr::summarise(count = dplyr::n()) %>%
    # highlight jan. 
    mutate(to_highlight = ifelse(death_month == "01", "yes", "no"))
  clean_df$to_highlight[13] <- "no"
  return(clean_df)
}
```

### Visualize

```{r visualize function}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#### Load Packages ####
base::library(ggplot2)

#### Visual Function ####
vis <- function(clean_df){
  vis <- ggplot2::ggplot(
    clean_df,
    ggplot2::aes(x = death_month, y = count, fill = to_highlight)) +
    geom_bar(stat = "identity")
  return(vis)
}
```

### Style

```{r stle function}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false
#### Load Packages ####
base::library(ggplot2)
base::library(ggchicklet)

#### Load Fonts ####
sysfonts::font_add_google("EB Garamond", "font")
showtext::showtext_auto()

#### Load Colors ####
col1 <- "white"
col2 <- "#0d0d0d"
col3 <- "#b22b2e"
col4 <- "#6d6a6e"

#### Style Function ####
sty <- function(vis){
  sty <- vis +
    # labs
    ggplot2::labs(
      title = "High Number of Centenarian Deaths in January",
      subtitle = "Of the 200 oldest verified men and women,\n the most common month for a centarian to die in is January.",
      caption = "\nRandi Bolt ~ #TidyTuesday - Verified Oldest People ~ May 2023",
      x = "Death Month",
      y = "Count")  +
    # ylim
    ylim(0, 36) +
    # add numbers above boxes
    ggplot2::geom_text(
      ggplot2::aes(
        label = count,
        vjust = -.5),
      color = col1,
      size = 20
    ) + 
    # scales 
    ggplot2::scale_x_discrete(
      labels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "Alive")
    ) +
    scale_fill_manual(values  = c("yes" = col3, "no"= col4), guide = "none") + 
    # theme
    ggplot2::theme(
      plot.title = element_text(
        size = 100,
        family = "font",
        face = "bold",
        hjust = .5,
        vjust = -5,
        color = col1),
      plot.subtitle = element_text(
        size = 55,
        family = "font",
        hjust = .5,
        vjust = -20,
        color = col1),
      plot.caption = element_text(
        size = 30,
        family = "font",
        hjust = .5,
        color = col1),
      axis.title = element_text(
        size = 50, 
        family = "font",
        face = "bold",
        color = col1),
      axis.text = element_text(
        size = 45, 
        family = "font",
        color = col1),
      axis.text.x = element_text(angle = 25), 
      plot.background = element_rect(fill = col2),
      panel.background = element_rect(fill = col2),
      panel.grid.major.x = element_blank(),
      panel.grid.major.y = element_blank(),
      panel.grid.minor.y = element_blank()) +               
    # ggplot2 barplot with round corners
    geom_chicklet(radius = grid::unit(3, "mm")) 
  return(sty)
}
```

### index.R

```{r index.R file}
#| code-fold: true
#| code-summary: "Show Code"
#| warning: false

#### Load Packages ####
base::library(tidyverse)

#### Load Data ####
# centenarians: 100 verified oldest men and women.
centenarians <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-30/centenarians.csv')

#### Clean Data ####
clean_data <- clean(centenarians)

#### Create Data Visual ####
vis_data <- vis(clean_data)

#### Style Data Visual ####
sty_vis <- sty(vis_data)

#### Save Plot ####
ggsave(
  "plot.png", 
  width = 30, 
  height = 20, 
  units = "cm")
```


### Links

[Week 24 Submission](https://github.com/rbolt13/tidytuesday/tree/main/2023/week_24) 

[TidyTuesday Repository](https://github.com/rbolt13/tidytuesday).


:::

# Quick Notes

* To highlight the month of January in the cleaning file I used the `dplyr::mutate()` function to create a "to_highlight" column for any death month equal to January. Then in the visualize package I assigned the fill aesthetic to the "to_highlight" column. 

* To curve the edges of the boxes (so they look more like tombstones) in the styling file I used `ggchicklet::geom_chicklet()` to assign a curved radius of 3 milimeters.  

* To angle the labels on the x-axis I used `ggplot2::theme(axis.text.x = element_text(angle = 25))`. 
* Spacing is a little funky, but I think it might work for this visual. 

* Frequentist data visuals seem to be the low hanging fruit for these Tid Tuesday submissions, and my goal is to push onto more predictive and model based visual analysis by the end of the summer. 
