---
title: "Predicting Stock Prices"
date: "2022-06-27"
categories: [R]
toc: true
---

This post uses the R packages quantmod and prophet to predict stock prices for [MicroVision](https://www.microvision.com/).

![](../../00_img/stock.jpeg)

```{r global options, echo=FALSE, message=FALSE}
# Global Options 
knitr::opts_chunk$set(error=FALSE,
                      message= FALSE,
                      warning=FALSE)
```

# `1.` Background

During the summer of 2021 I took a  business fiance class, and learned a lot about stocks and the stock market. Most of my projects centered around [MicroVision](https://www.microvision.com/) which is a research and development company creating the newest Lidar technology for autonomous vehicles. 

# `2.` Set Up

This analysis will use three packages:

- [tidyverse](https://github.com/tidyverse): to clean the data

- [quantmod](https://github.com/joshuaulrich/quantmod): to get data from yahoo finace

- [prophet](https://github.com/facebook/prophet): to make predictions

```{r set up}
# Load Libraries 
library(quantmod)
library(tidyverse)  
library(prophet) 
```

There are a few places that quantmod can pull data from, but the default which I will be using is [Yahoo Finace](https://finance.yahoo.com/). You can specify this with  `src="yahoo"`. Use `?getSymbols` for more information on this functions parameters. 

Note: If you are having issues with quantmod try re-installing it. 

```{r load data}
quantmod::getSymbols("MVIS", src="yahoo")
```

# `3.` quantmod Functions

Right away we quantmod functions like `chartSeries()` can be used to look at various plots of MicroVision stocks. Below are a few examples showing various subsets of data from 2019 - 2022. As well as different types such as bar, line, candlesticks, and auto. The last graph also includes `addBBands()`, `addMomentum()` and `addROC()`. Use `?` with any of these functions to find out more details on their parameters. 

```{r quantmod}
chartSeries(MVIS, type = "candlesticks", subset = '2019-09-01::2019-12-31', theme= chartTheme('white'))
chartSeries(MVIS, type = "bar", subset = '2020', theme= chartTheme('white'))
chartSeries(MVIS, type = "line", subset = '2021', theme= chartTheme('white'))
chartSeries(MVIS, type = "auto", subset = '2022', theme= chartTheme('white'))
chartSeries(MVIS, type = "auto", subset = '2022-06', theme= chartTheme('white'))
addBBands(n=20,sd=2)
addMomentum(n=1)
addROC(n=7)
```

# `4.` Tidy Data

```{r untidy date}
head(MVIS)
```

You might notice that the date column doesn't have a column name, and that is because it is being read as the names of the rows. To change this I will first need to change the data into a data frame, and then change the row names into a column with the function `rownames_to_column()`. It is then important to assign the date series column the name `ds`. That is how the prophet package will recognize it, so this will save us the step of renaming this later on. 

```{r}
MVIS <- base::data.frame(MVIS)
MVIS <- tibble::rownames_to_column(MVIS, "ds")
utils::head(MVIS)
```

It will also be important that the ds column is read as date values instead of character value. 

```{r}
MVIS <- MVIS %>% 
  dplyr::mutate(ds = as.Date(ds))
utils::head(MVIS)
```

Lastly to create a data frame for the prophet package with just the date and closing costs. It is important to rename the closing cost column to `y`. 

```{r closing data}
# CLosing Data 
MVIS_close <- base::data.frame(ds = MVIS$ds, y = MVIS$MVIS.Close)
utils::head(MVIS_close)
```

# `5.` Prophet Functions

Using the `prophet()` function I can create a model of the data. Then I can use `make_future_dataframe()` to make a predicted model of the next three years. 

```{r}
# call prophet function to fit the model 
Model1 <- prophet::prophet(MVIS_close,
                           daily.seasonality=TRUE)
Future1 <- prophet::make_future_dataframe(Model1,
                                          periods = 365*3)
utils::tail(Future1)
```

# `6.` Predict Function

The `predict()` function is a stats function that uses various model fitting functions to predict future results. 

```{r}
# Forecast Proper 
Forecast1 <- stats::predict(Model1, Future1)
# Forecast Values 
predict_date <- Forecast1$ds[length(Forecast1$ds)]
predict_value <- Forecast1$yhat[length(Forecast1$yhat)]
predict_lower <- Forecast1$yhat_lower[length(Forecast1$yhat_lower)]
predict_upper <- Forecast1$yhat_upper[length(Forecast1$yhat_upper)]
```

This model predicts that on `r predict_date`, the value of MicroVision stock will be about `r predict_value`. This value is in a range between `r predict_lower` and `r predict_upper`. Note that this range is so large because of the long time period on which it is making the prediction. 

# `7.` Plot Model

Below is an interactive plot that shows the actual values in black, and the predicted values in blue. The grey graph underneath can be adjusted to look at a specific window of time. 

```{r prophet plot}
prophet::dyplot.prophet(Model1, Forecast1)
```

# `8.` Plot Componets

Lastly using the `prophet_plot_components()` function can be used to see yearly, weekly, seasonally, and daily trends. 

```{r componets plot}
prophet::prophet_plot_components(Model1, Forecast1)
```

Looking at daily trends it appears that MicroVision was on the decline after 2010 for some time, but has been trading up since about 2019. 

Looking at the weekly trends, it obvious MicroVision is popular during the Monday - Friday trading week, however looking at the time trends the stock is most popular at the beginning and end of the day.

The third graph shows us that MicroVision does not seem to preform well in the first quarter of the year, but picks up around May until it starts to drop off again around November. 

# `9.` Sources 

[Easily Import Financial Data to R with Quantmod](https://www.youtube.com/watch?v=bDXeRofJFTE)

[Technical Analysis with R - Ch.7 Quantmod](https://bookdown.org/kochiuyu/Technical-Analysis-with-R/quantmod.html)

[Forecasting Bitcoin Prices Using Prophet in R](https://www.youtube.com/watch?v=4784Ait88G8&t=311s)